msgid ""
msgstr ""
"Project-Id-Version: R 4.6.0\n"
"Report-Msgid-Bugs-To: bugs.r-project.org\n"
"POT-Creation-Date: 2025-06-27 19:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"


#: R/QC.R: 0
#. R/QC.R: gettextf("  %s calls:", f)

msgid "%s calls:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("  %s has wrong argument list %s", f, sQuote(paste(bad,     collapse = ", ")))

msgid "%s has wrong argument list %s"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("'%s' must be a character string", "x")

msgid "'%s' must be a character string"
msgstr ""


#: R/check.R: 0
#. R/check.R: message("'--as-cran' turns off '--extra-arch'")

msgid "'--as-cran' turns off '--extra-arch'"
msgstr ""


#: R/check.R: 0
#. R/check.R: warning("'--multiarch' specified with only one usable sub-architecture",     call. = FALSE, immediate. = TRUE)

msgid "'--multiarch' specified with only one usable sub-architecture"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("'::' or ':::' import not declared from: %s", sQuote(xx))

msgid "'::' or ':::' import not declared from: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("'::' or ':::' imports not declared from:")

msgid "'::' or ':::' imports not declared from:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("':::' call which should be '::': %s", sQuote(xx))

msgid "':::' call which should be '::': %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("':::' calls which should be '::':")

msgid "':::' calls which should be '::':"
msgstr ""


#: R/md5.R: 0
#: R/sha256.R: 0
#. R/md5.R: stop("'bytes' must be a raw vector")
#. R/sha256.R: stop("'bytes' must be a raw vector")

msgid "'bytes' must be a raw vector"
msgstr ""


#: R/apitools.R: 0
#. R/apitools.R: stop("'cc' is not on the path")

msgid "'cc' is not on the path"
msgstr ""


#: R/install.R: 0
#. R/install.R: warning("'cleanup' exists but is not executable -- see the 'R Installation and Administration Manual'",     call. = FALSE)

msgid "'cleanup' exists but is not executable -- see the 'R Installation and Administration Manual'"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("'data(package=)' call not declared from: %s", sQuote(xx))

msgid "'data(package=)' call not declared from: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("'data(package=)' calls not declared from:")

msgid "'data(package=)' calls not declared from:"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: warning("'diff' is not available so useDiff = FALSE will be used")

msgid "'diff' is not available so useDiff = FALSE will be used"
msgstr ""


#: R/md5.R: 0
#: R/sha256.R: 0
#. R/md5.R: stop("'files' and 'bytes' are mutually exclusive")
#. R/sha256.R: stop("'files' and 'bytes' are mutually exclusive")

msgid "'files' and 'bytes' are mutually exclusive"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("'library' or 'require' call not declared from: %s",     sQuote(xx))

msgid "'library' or 'require' call not declared from: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("'library' or 'require' call to %s in package code.",     sQuote(xx))

msgid "'library' or 'require' call to %s in package code."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("'library' or 'require' call to %s which was already attached by Depends.",     sQuote(xx))

msgid "'library' or 'require' call to %s which was already attached by Depends."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("'library' or 'require' calls in package code:")

msgid "'library' or 'require' calls in package code:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("'library' or 'require' calls not declared from:")

msgid "'library' or 'require' calls not declared from:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("'library' or 'require' calls to packages already attached by Depends:")

msgid "'library' or 'require' calls to packages already attached by Depends:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("'loadNamespace' or 'requireNamespace' call not declared from: %s",     sQuote(xx))

msgid "'loadNamespace' or 'requireNamespace' call not declared from: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("'loadNamespace' or 'requireNamespace' calls not declared from:")

msgid "'loadNamespace' or 'requireNamespace' calls not declared from:"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: stop("'macros' must be TRUE or must specify existing macros")

msgid "'macros' must be TRUE or must specify existing macros"
msgstr ""


#: R/apitools.R: 0
#. R/apitools.R: stop("'objdump' is not on the path")

msgid "'objdump' is not on the path"
msgstr ""


#: R/checktools.R: 0
#. R/checktools.R: stop("'reverse$repos' should be a subset of getOption(\"repos\")")

msgid "'reverse$repos' should be a subset of getOption(\"repos\")"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("'text' must be a character vector")

msgid "'text' must be a character vector"
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: stop("'type' must be one of 'txt', 'html', 'latex' or 'example'",     call. = FALSE)

msgid "'type' must be one of 'txt', 'html', 'latex' or 'example'"
msgstr ""


#: R/htmltools.R: 0
#. R/htmltools.R: sprintf("* Package: %s", p)
#. R/htmltools.R: sprintf("* Package: %s", basename(d))

msgid "* Package: %s"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("*** someone has corrupted the Built field in package '%s' ***",     db["Package"])

msgid "*** someone has corrupted the Built field in package '%s' ***"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: warning("*not* using 'C' for LC_COLLATE locale")

msgid "*not* using 'C' for LC_COLLATE locale"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("--- failed re-building %s\n", sQuote(file))

msgid "--- failed re-building %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("--- finished re-building %s\n", sQuote(file))

msgid "--- finished re-building %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("--- re-building %s using %s", sQuote(file), engine$name)

msgid "--- re-building %s using %s"
msgstr ""


#: R/check.R: 0
#: R/install.R: 0
#. R/check.R: stop("-l option without value", call. = FALSE)
#. R/install.R: stop("-l option without value", call. = FALSE)

msgid "-l option without value"
msgstr ""


#: R/Rd2pdf.R: 0
#: R/check.R: 0
#: R/install.R: 0
#. R/Rd2pdf.R: stop("-o option without value", call. = FALSE)
#. R/check.R: stop("-o option without value", call. = FALSE)
#. R/install.R: stop("-o option without value", call. = FALSE)

msgid "-o option without value"
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: stop("-t option without value", call. = FALSE)

msgid "-t option without value"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop(".install_packages() exit status ", status)

msgid ".install_packages() exit status"
msgstr ""


#: R/code2html.R: 0
#. R/code2html.R: gettextf("<p><code class='language-R'>%s</code> was run in the console.</p>",     snippet)

msgid "<p><code class='language-R'>%s</code> was run in the console.</p>"
msgstr ""


#: R/code2html.R: 0
#. R/code2html.R: gettext("<p>To view output in the browser, the <a href='https://CRAN.R-project.org/package=knitr'>knitr</a> package must be installed and the environment variable <code>_R_HELP_ENABLE_ENHANCED_HTML_</code> must be set to TRUE.</p>")

msgid "<p>To view output in the browser, the <a href='https://CRAN.R-project.org/package=knitr'>knitr</a> package must be installed and the environment variable <code>_R_HELP_ENABLE_ENHANCED_HTML_</code> must be set to TRUE.</p>"
msgstr ""


#: R/code2html.R: 0
#. R/code2html.R: gettext("<p>To view output in the browser, the <a href='https://CRAN.R-project.org/package=knitr'>knitr</a> package must be installed.</p>")

msgid "<p>To view output in the browser, the <a href='https://CRAN.R-project.org/package=knitr'>knitr</a> package must be installed.</p>"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("All existing entry MD5sums match tarballs.")

msgid "All existing entry MD5sums match tarballs."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("All field tags must be ASCII.")

msgid "All field tags must be ASCII."
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("Applied installation-time patch %s and saved it as %s in package installation\n",     purl, fname)

msgid "Applied installation-time patch %s and saved it as %s in package installation"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Argument %s must be a character vector or NULL and not %s",     sQuote("pattern"), sQuote(class(pattern)[1L]))

msgid "Argument %s must be a character vector or NULL and not %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Argument %s must be a function and not %s", sQuote("weave"),     sQuote(class(weave)[1L]))
#. R/Vignettes.R: gettextf("Argument %s must be a function and not %s", sQuote("tangle"),     sQuote(class(tangle)[1L]))

msgid "Argument %s must be a function and not %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Argument items with no description in Rd file '%s':",     nm)

msgid "Argument items with no description in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("  Argument names in code not in docs:")

msgid "Argument names in code not in docs:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("  Argument names in docs not in code:")

msgid "Argument names in docs not in code:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Assignments in \\usage in Rd file '%s':", nm)

msgid "Assignments in \\usage in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives more than one person with maintainer role:")

msgid "Authors@R field gives more than one person with maintainer role:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives no person with maintainer role, valid email address and non-empty name.")

msgid "Authors@R field gives no person with maintainer role, valid email address and non-empty name."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives no person with name and author role")

msgid "Authors@R field gives no person with name and author role"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives no person with name and roles.")

msgid "Authors@R field gives no person with name and roles."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives persons with duplicated ORCID identifiers:")

msgid "Authors@R field gives persons with duplicated ORCID identifiers:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives persons with duplicated ROR identifiers:")

msgid "Authors@R field gives persons with duplicated ROR identifiers:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives persons with invalid ORCID identifiers:")

msgid "Authors@R field gives persons with invalid ORCID identifiers:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives persons with invalid ROR identifiers:")

msgid "Authors@R field gives persons with invalid ROR identifiers:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives persons with no name:")

msgid "Authors@R field gives persons with no name:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Authors@R field gives persons with no role:")

msgid "Authors@R field gives persons with no role:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Auto-generated content requiring editing in Rd file '%s':",     nm)

msgid "Auto-generated content requiring editing in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Bad \\usage lines found in Rd file '%s':", nm)

msgid "Bad \\usage lines found in Rd file '%s':"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop(conditionMessage(e), "\nCall sequence:\n", paste(.eval_with_capture(traceback(tb))$output,     collapse = "\n"), call. = FALSE)

msgid "Call sequence:"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Cannot change the %s engine or use an engine of that name",     sQuote("Sweave"))

msgid "Cannot change the %s engine or use an engine of that name"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Cannot extract Author field from Authors@R field:")

msgid "Cannot extract Author field from Authors@R field:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Cannot extract Maintainer field from Authors@R field:")

msgid "Cannot extract Maintainer field from Authors@R field:"
msgstr ""


#: R/news.R: 0
#. R/news.R: gettextf("Cannot extract version info from the following section titles:\n%s",     paste0("  ", unique(nms[!ind]), collapse = "\n"))

msgid "Cannot extract version info from the following section titles:\n%s"
msgstr ""


#: R/news.R: 0
#. R/news.R: gettextf("Cannot process chunk/lines:\n%s", .collapse(paste0("  ",     x)))

msgid "Cannot process chunk/lines:\n%s"
msgstr ""


#: R/bibstyle.R: 0
#. R/bibstyle.R: stop("Changes require specified 'style'")

msgid "Changes require specified 'style'"
msgstr ""


#: R/CRANtools.R: 0
#. R/CRANtools.R: sprintf("Checking %s", m)

msgid "Checking %s"
msgstr ""


#: R/news.R: 0
#. R/news.R: sprintf("\nChunk %s:\n%s", format(seq_along(bad)), bad)

msgid "Chunk %s:\n%s"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettext("Code demonstrations:")

msgid "Code demonstrations:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Code: %s", format_args(ffc))
#. R/QC.R: gettextf("Code: %s", format_args(docObj[["code"]]))

msgid "Code: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Codoc mismatches from Rd file '%s':", fname)

msgid "Codoc mismatches from Rd file '%s':"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("  Comparing %s to %s ...", sQuote(outfile), sQuote(savefile))

msgid "Comparing %s to %s ..."
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: message("Converting Rd files to LaTeX ...")

msgid "Converting Rd files to LaTeX ..."
msgstr ""


#: R/news.R: 0
#. R/news.R: stop("Could not extract news from the following text chunks:\n",     paste(sprintf("\nChunk %s:\n%s", format(seq_along(bad)),         bad), collapse = "\n"))

msgid "Could not extract news from the following text chunks:"
msgstr ""


#: R/RdHelpers.R: 0
#. R/RdHelpers.R: gettextf("DESCRIPTION file is for package '%s', not '%s'", desc["Package"],     pkg)

msgid "DESCRIPTION file is for package '%s', not '%s'"
msgstr ""


#: R/news.R: 0
#. R/news.R: stop("DESCRIPTION file not found")

msgid "DESCRIPTION file not found"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: if (res != 0L) "DIFFERED" else "OK"

msgid "DIFFERED"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Data codoc mismatches from Rd file '%s':", nm)

msgid "Data codoc mismatches from Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Data with usage in Rd file '%s' but not in code:",     fname)

msgid "Data with usage in Rd file '%s' but not in code:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Deprecated license: %s", paste(y, collapse = " "))

msgid "Deprecated license: %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Detected vignette source files (%s) with shared names (%s) and therefore risking overwriting each other's output files",     paste(sQuote(docs), collapse = ", "), paste(sQuote(names),         collapse = ", "))

msgid "Detected vignette source files (%s) with shared names (%s) and therefore risking overwriting each other's output files"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Docs: %s", format_args(ffd))
#. R/QC.R: gettextf("Docs: %s", format_args(docObj[["docs"]]))

msgid "Docs: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Documented arguments not in \\usage in Rd file '%s':",     nm)

msgid "Documented arguments not in \\usage in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Duplicated \\argument entries in Rd file '%s':", nm)

msgid "Duplicated \\argument entries in Rd file '%s':"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: message(" ERROR")

msgid "ERROR"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("ERROR: '--merge-multiarch' applies only to a single tarball",     call. = FALSE)

msgid "ERROR: '--merge-multiarch' applies only to a single tarball"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("ERROR: cannot cd to directory %s", sQuote(lib))

msgid "ERROR: cannot cd to directory %s"
msgstr ""


#: R/check.R: 0
#. R/check.R: sprintf("ERROR: cannot create check dir %s", sQuote(pkgoutdir))

msgid "ERROR: cannot create check dir %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("ERROR: no packages specified", call. = FALSE)

msgid "ERROR: no packages specified"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("ERROR: no permission to install to directory ", sQuote(lib),     call. = FALSE)

msgid "ERROR: no permission to install to directory"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("ERROR: this R is version %s, package '%s' requires R %s %s",     current, package, depends$op, depends$version)

msgid "ERROR: this R is version %s, package '%s' requires R %s %s"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("ERROR: this R is version %s, required is R %s %s",     current, depends$op, depends$version)

msgid "ERROR: this R is version %s, required is R %s %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Encoding '%s' is not portable", x$non_portable_encoding)

msgid "Encoding '%s' is not portable"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Engine name %s and package %s do not match", sQuote(name),     sQuote(package))

msgid "Engine name %s and package %s do not match"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Entries must be names of packages optionally followed by '<=' or '>=', white space, and a valid version number in parentheses.")

msgid "Entries must be names of packages optionally followed by '<=' or '>=', white space, and a valid version number in parentheses."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Entries with infeasible comparison operator:")

msgid "Entries with infeasible comparison operator:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Entries with infeasible version number:")

msgid "Entries with infeasible version number:"
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: message("Error in running tools::texi2pdf()")

msgid "Error in running tools::texi2pdf()"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Error: Vignette '%s' is non-ASCII but has no declared encoding",     file)

msgid "Error: Vignette '%s' is non-ASCII but has no declared encoding"
msgstr ""


#: R/build.R: 0
#. R/build.R: gettextf("Error: cannot rename directory to %s", sQuote(intname))

msgid "Error: cannot rename directory to %s"
msgstr ""


#: R/check.R: 0
#. R/check.R: message("Error: no packages were specified")

msgid "Error: no packages were specified"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Error: processing vignette '%s' failed with diagnostics:\n%s",     file, conditionMessage(e))

msgid "Error: processing vignette '%s' failed with diagnostics:\n%s"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("Error: running examples in %s failed", sQuote(Rfile))

msgid "Error: running examples in %s failed"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("Error: running the tests in %s failed", sQuote(f))

msgid "Error: running the tests in %s failed"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Error: tangling vignette '%s' failed with diagnostics:\n%s",     file, conditionMessage(e))

msgid "Error: tangling vignette '%s' failed with diagnostics:\n%s"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: warning("Existing PACKAGES file contained no rows and/or no columns")

msgid "Existing PACKAGES file contained no rows and/or no columns"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: message("FAILED")

msgid "FAILED"
msgstr ""


#: R/assertCondition.R: 0
#. R/assertCondition.R: gettextf("Failed to get %s in evaluating %s", .Wanted, .exprString)

msgid "Failed to get %s in evaluating %s"
msgstr ""


#: R/assertCondition.R: 0
#. R/assertCondition.R: gettextf("Failed to get error in evaluating %s", d.expr)

msgid "Failed to get error in evaluating %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Failed to locate %s output file %s for vignette with name %s and engine %s. The following files exist in working directory %s: %s",     sQuote(by), sQuote(paste0(name, ".pdf")), sQuote(name), sQuote(sprintf("%s::%s",         engine$package, engine$name)), sQuote(normalizePath(dir)),     fmt_file_sizes(output0))

msgid "Failed to locate %s output file %s for vignette with name %s and engine %s. The following files exist in working directory %s: %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Failed to locate %s output file %s or %s for vignette with name %s and engine %s. The following files exist in working directory %s: %s",     sQuote(by), sQuote(paste0(name, ".pdf")), sQuote(paste0(name,         ".html")), sQuote(name), sQuote(sprintf("%s::%s", engine$package,         engine$name)), sQuote(normalizePath(dir)), fmt_file_sizes(output0))

msgid "Failed to locate %s output file %s or %s for vignette with name %s and engine %s. The following files exist in working directory %s: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Fields with non-ASCII tags:")

msgid "Fields with non-ASCII tags:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Fields with non-ASCII values:")

msgid "Fields with non-ASCII values:"
msgstr ""


#: R/QC.R: 0
#: R/sotools.R: 0
#. R/QC.R: gettextf("File %s:", sQuote(f))
#. R/sotools.R: gettextf("File %s:", sQuote(attr(x, "file")))

msgid "File %s:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("File '%s':", fname)

msgid "File '%s':"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("File 'DESCRIPTION' is missing.")

msgid "File 'DESCRIPTION' is missing."
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("Files 'DESCRIPTION' and 'DESCRIPTION.in' are missing.")

msgid "Files 'DESCRIPTION' and 'DESCRIPTION.in' are missing."
msgstr ""


#: R/sotools.R: 0
#. R/sotools.R: gettextf("Found %s, possibly from %s", sQuote(v), paste(sprintf("%s (%s)",     sQuote(u[, "ssname"]), u[, "language"]), collapse = ", "))

msgid "Found %s, possibly from %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Functions or methods with usage in Rd file '%s' but not in code:",     fname)

msgid "Functions or methods with usage in Rd file '%s' but not in code:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Generics 'g' in 'env' %s where '%s' errors: %s\nMay need something like\n\n%s\nin NAMESPACE.",     format(env), "hasMethods(g, env)", paste(sQuote(rErr), collapse = ", "),     paste0("  importFrom(", paste(dq(pkgs), dq(rErr), sep = ", "),         ")\n"))

msgid "Generics 'g' in 'env' %s where '%s' errors: %s\nMay need something like\n\n%s\nin NAMESPACE."
msgstr ""


#: R/assertCondition.R: 0
#. R/assertCondition.R: gettextf("Got %s in evaluating %s; wanted %s", paste(.got, collapse = ", "),     .exprString, .Wanted)

msgid "Got %s in evaluating %s; wanted %s"
msgstr ""


#: R/assertCondition.R: 0
#. R/assertCondition.R: gettextf("Got warning in evaluating %s, but also an error", d.expr)

msgid "Got warning in evaluating %s, but also an error"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettext("Help pages:")

msgid "Help pages:"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("In '%s' vignettes '%s' and '%s' have the same vignette name",     basename(dirname(dir)), orig, dup)

msgid "In '%s' vignettes '%s' and '%s' have the same vignette name"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettext("Invalid DESCRIPTION file")

msgid "Invalid DESCRIPTION file"
msgstr ""


#: R/packages.R: 0
#. R/packages.R: gettextf("Invalid DESCRIPTION file for package %s", sQuote(basename(dirname(p))))
#. R/packages.R: gettextf("Invalid DESCRIPTION file for package %s", sQuote(basename(paths[i])))

msgid "Invalid DESCRIPTION file for package %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Invalid Priority field.")

msgid "Invalid Priority field."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Invalid VignetteBuilder field.")

msgid "Invalid VignetteBuilder field."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Invalid license file pointers: %s", paste(y, collapse = " "))

msgid "Invalid license file pointers: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Invalid package aliases in Rd file '%s':", nm)

msgid "Invalid package aliases in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("License components which are templates and need '+ file LICENSE':")

msgid "License components which are templates and need '+ file LICENSE':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("License components with restrictions not permitted:")

msgid "License components with restrictions not permitted:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("License stub is invalid DCF.")

msgid "License stub is invalid DCF."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("License stub records with missing/empty fields:", paste0("  ",     y))

msgid "License stub records with missing/empty fields:"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("Link %s in package %s could not be located", mono(helpdoc),     mono(pkg))

msgid "Link %s in package %s could not be located"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Located more than one %s output file (by engine %s) for vignette with name %s: %s",     sQuote(by), sQuote(sprintf("%s::%s", engine$package, engine$name)),     sQuote(name), fmt_file_sizes(output))

msgid "Located more than one %s output file (by engine %s) for vignette with name %s: %s"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettextf("Macro file %s should only contain Rd macro definitions and comments",     file)

msgid "Macro file %s should only contain Rd macro definitions and comments"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed Authors@R field:")

msgid "Malformed Authors@R field:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed Depends or Suggests or Imports or Enhances field.")

msgid "Malformed Depends or Suggests or Imports or Enhances field."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed Description field: should contain one or more complete sentences.")

msgid "Malformed Description field: should contain one or more complete sentences."
msgstr ""


#: R/news.R: 0
#. R/news.R: gettextf("Malformed NEWS.Rd file:\nChunk starting\n  %s\ncontains more than one \\itemize.\nUsing the first one.",     substr(sub("^[[:space:]]*", "", .Rd_deparse(x)), 1L, 60L))

msgid "Malformed NEWS.Rd file:\nChunk starting\n  %s\ncontains more than one \\itemize.\nUsing the first one."
msgstr ""


#: R/news.R: 0
#. R/news.R: gettextf("Malformed NEWS.Rd file:\nChunk starting\n  %s\ncontains no \\item.",     substr(sub("^[[:space:]]*", "", .Rd_deparse(x)), 1L, 60L))

msgid "Malformed NEWS.Rd file:\nChunk starting\n  %s\ncontains no \\item."
msgstr ""


#: R/news.R: 0
#. R/news.R: gettextf("Malformed NEWS.Rd file:\nChunk starting\n  %s\ncontains no \\itemize.",     substr(sub("^[[:space:]]*", "", .Rd_deparse(x)), 1L, 60L))

msgid "Malformed NEWS.Rd file:\nChunk starting\n  %s\ncontains no \\itemize."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed Title field: should not end in a period.")

msgid "Malformed Title field: should not end in a period."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed maintainer field.")

msgid "Malformed maintainer field."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed package name")

msgid "Malformed package name"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Malformed package version.")

msgid "Malformed package version."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("  Mismatches in argument default values (first 3):")

msgid "Mismatches in argument default values (first 3):"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("  Mismatches in argument default values:")

msgid "Mismatches in argument default values:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("  Mismatches in argument names (first 3):")

msgid "Mismatches in argument names (first 3):"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("  Mismatches in argument names:")

msgid "Mismatches in argument names:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Missing link(s) in Rd file '%s':", names(xb)[i])

msgid "Missing link(s) in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Missing object imported by a ':::' call: %s", sQuote(xx))

msgid "Missing object imported by a ':::' call: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Missing objects imported by ':::' calls:")

msgid "Missing objects imported by ':::' calls:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Missing or unexported object: %s", sQuote(xx))

msgid "Missing or unexported object: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Missing or unexported objects:")

msgid "Missing or unexported objects:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: message("NB: need Internet access to use CRAN incoming checks")

msgid "NB: need Internet access to use CRAN incoming checks"
msgstr ""


#: R/news.R: 0
#. R/news.R: stop("NEWS file not found")

msgid "NEWS file not found"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: message(" NOTE")

msgid "NOTE"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("NOTE: Skipping installation-time patch %s which seems to be already applied.\n",     purl)

msgid "NOTE: Skipping installation-time patch %s which seems to be already applied."
msgstr ""


#: R/install.R: 0
#. R/install.R: message("NOTE: fixed library identification name ", sQuote(oldid))

msgid "NOTE: fixed library identification name"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("NOTE: fixed library path ", sQuote(old_paths[i]))

msgid "NOTE: fixed library path"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("NOTE: fixed path ", sQuote(old_paths[i]))

msgid "NOTE: fixed path"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("NOTE: fixed rpath ", sQuote(old_paths[i]))
#. R/install.R: message("NOTE: fixed rpath ", sQuote(old_rpath))

msgid "NOTE: fixed rpath"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Namespace in Imports field not imported from: %s",     sQuote(xx))

msgid "Namespace in Imports field not imported from: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Namespaces in Imports field not imported from:")

msgid "Namespaces in Imports field not imported from:"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("No NEWS found for package %s", mono(pkg))

msgid "No NEWS found for package %s"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettextf("No Rd macros in package '%s'.", p)

msgid "No Rd macros in package '%s'."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: message("No dataset created in 'envir'")

msgid "No dataset created in 'envir'"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("No docs found for package %s", mono(pkg))

msgid "No docs found for package %s"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: gettextf("No existing PACKAGES file found at %s", PKGSfile)

msgid "No existing PACKAGES file found at %s"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettext("No files in this directory")

msgid "No files in this directory"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("No help found for package %s", mono(pkg))

msgid "No help found for package %s"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("No help found for topic %s in any package.", mono(topic))

msgid "No help found for topic %s in any package."
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettextf("No help on %s found in RdDB %s", sQuote(key), sQuote(filebase))

msgid "No help on %s found in RdDB %s"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("No new packages or updated package versions detected")

msgid "No new packages or updated package versions detected"
msgstr ""


#: R/news.R: 0
#. R/news.R: stop("No news found in given file using package default format.")

msgid "No news found in given file using package default format."
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("No package index found for package %s", mono(pkg))

msgid "No package index found for package %s"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("No package named %s could be found", mono(pkg))

msgid "No package named %s could be found"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettext("No results found")

msgid "No results found"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Non-portable flags in file '%s':", names(x))

msgid "Non-portable flags in file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Non-portable flags in variable '%s':", names(x))

msgid "Non-portable flags in variable '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Non-standard license specification:")

msgid "Non-standard license specification:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Non-topic package-anchored link(s) in Rd file '%s':",     names(xs)[i])

msgid "Non-topic package-anchored link(s) in Rd file '%s':"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Note: skipping %s", sQuote(file))

msgid "Note: skipping %s"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: message(" OK")
#. R/testing.R: if (res != 0L) "DIFFERED" else "OK"

msgid "OK"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Objects in \\usage without \\alias in Rd file '%s':",     nm)

msgid "Objects in \\usage without \\alias in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Offending entries:")

msgid "Offending entries:"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("Only help files, %s, %s and files under %s and %s in a package can be viewed",     mono("NEWS"), mono("DESCRIPTION"), mono("doc/"), mono("demo/"))

msgid "Only help files, %s, %s and files under %s and %s in a package can be viewed"
msgstr ""


#: R/RdConv2.R: 0
#. R/RdConv2.R: gettextf("Only one Rd section per %s is supported.", "\\Sexpr")

msgid "Only one Rd section per %s is supported."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Only operators '<=' and '>=' are possible.")

msgid "Only operators '<=' and '>=' are possible."
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: warning("PACKAGES files do not include MD5 sums in the win.binary case, so strict checking is impossible. Calling down to write_PACKAGES directly.")

msgid "PACKAGES files do not include MD5 sums in the win.binary case, so strict checking is impossible. Calling down to write_PACKAGES directly."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package detach functions should have one argument with name starting with %s.",     sQuote("lib"))

msgid "Package detach functions should have one argument with name starting with %s."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package detach functions should not call %s.", sQuote("library.dynam.unload"))

msgid "Package detach functions should not call %s."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: stop("Package has no 'Version' field", call. = FALSE)

msgid "Package has no 'Version' field"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package in Depends field not imported from: %s", sQuote(xx))

msgid "Package in Depends field not imported from: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package startup functions should have two arguments with names starting with %s and %s, respectively.",     sQuote("lib"), sQuote("pkg"))

msgid "Package startup functions should have two arguments with names starting with %s and %s, respectively."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package startup functions should not call %s.", sQuote("installed.packages"))

msgid "Package startup functions should not call %s."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package startup functions should not change the search path.")

msgid "Package startup functions should not change the search path."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Package startup functions should use %s to generate messages.",     sQuote("packageStartupMessage"))

msgid "Package startup functions should use %s to generate messages."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Packages in Depends field not imported from:")

msgid "Packages in Depends field not imported from:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Packages with priorities 'base' or 'recommended' or 'defunct-base' must already be known to R.")

msgid "Packages with priorities 'base' or 'recommended' or 'defunct-base' must already be known to R."
msgstr ""


#: R/CRANtools.R: 0
#: R/htmltools.R: 0
#. R/CRANtools.R: sprintf("Processing %s ...", m)
#. R/htmltools.R: sprintf("Processing %s ...", f)
#. R/htmltools.R: sprintf("Processing %s ...", u)

msgid "Processing %s ..."
msgstr ""


#: R/packages.R: 0
#. R/packages.R: message("Processing packages:")

msgid "Processing packages:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Prototyped non-primitives:")

msgid "Prototyped non-primitives:"
msgstr ""


#: R/translations.R: 0
#. R/translations.R: stop("R CMD build failed")

msgid "R CMD build failed"
msgstr ""


#: R/install.R: 0
#. R/install.R: warning("R include directory is empty -- perhaps need to install R-devel.rpm or similar",     call. = FALSE)

msgid "R include directory is empty -- perhaps need to install R-devel.rpm or similar"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettext("Rd files must have a non-empty \\name.")

msgid "Rd files must have a non-empty \\name."
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettext("Rd files must have a non-empty \\title.")

msgid "Rd files must have a non-empty \\title."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Rd files with duplicated alias '%s':", nm)

msgid "Rd files with duplicated alias '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Rd files with duplicated name '%s':", nm)

msgid "Rd files with duplicated name '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Rd files without \\alias:")

msgid "Rd files without \\alias:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Rd files without \\description:")

msgid "Rd files without \\description:"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettextf("Rd macro package '%s' is not installed.", p)

msgid "Rd macro package '%s' is not installed."
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: stop("Rd object required")

msgid "Rd object required"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Record: %d Field(s): %s", pos, vapply(pos, function(p) paste(nms[ind[p,     ]], collapse = ", "), ""))

msgid "Record: %d Field(s): %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("Reverted installation-time patch %s in package installation\n",     p)

msgid "Reverted installation-time patch %s in package installation"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: message("  Running ", sQuote(file))

msgid "Running"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("  Running %s", sQuote(f))

msgid "Running %s"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("Running 'texi2dvi' on '%s' failed.", file)

msgid "Running 'texi2dvi' on '%s' failed."
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("Running specific tests for package %s", sQuote(pkg))

msgid "Running specific tests for package %s"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("Running vignettes for package %s", sQuote(pkg))

msgid "Running vignettes for package %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("S3 methods shown with full name in Rd file '%s':",     nm)

msgid "S3 methods shown with full name in Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("S4 class codoc mismatches from Rd file '%s':", nm)

msgid "S4 class codoc mismatches from Rd file '%s':"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: message("Search path was changed")

msgid "Search path was changed"
msgstr ""


#: R/logging.R: 0
#. R/logging.R: sprintf("See\n  %s\nfor details.", sQuote(Log$filename))

msgid "See\n  %s\nfor details."
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettext("See chapter 'Writing R documentation' in manual 'Writing R Extensions'.")

msgid "See chapter 'Writing R documentation' in manual 'Writing R Extensions'."
msgstr ""


#: R/QC.R: 0
#: R/check.R: 0
#. R/QC.R: gettextf("See section %s in '%s'.", sQuote("Good practice"),     "?.onAttach")
#. R/QC.R: gettextf("See section %s in '%s'.", sQuote("Good practice"),     "?.Last.lib")
#. R/check.R: gettextf("See section %s in '%s'.", sQuote("Good practice"),     "?attach")
#. R/check.R: gettextf("See section %s in '%s'.", sQuote("Good practice"),     "?data")

msgid "See section %s in '%s'."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("See section 'Cross-references' in the 'Writing R Extensions' manual.")

msgid "See section 'Cross-references' in the 'Writing R Extensions' manual."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.")
#. R/QC.R: gettextf("See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.")

msgid "See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Slots for class '%s'", docObj[["name"]])

msgid "Slots for class '%s'"
msgstr ""


#: R/Rd2latex.R: 0
#. R/Rd2latex.R: gettextf("Some input could not be re-encoded to %s", outputEncoding)

msgid "Some input could not be re-encoded to %s"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: warning("Specified fields not present in existing PACKAGES file: ",     paste(setdiff(fields, okfields), collapse = " "))

msgid "Specified fields not present in existing PACKAGES file:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Standardizable: %s", x$is_standardizable)

msgid "Standardizable: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Standardized license specification:")

msgid "Standardized license specification:"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("Testing examples for package %s", sQuote(pkg))

msgid "Testing examples for package %s"
msgstr ""


#: R/bibstyle.R: 0
#. R/bibstyle.R: stop("The default JSS style may not be modified.")

msgid "The default JSS style may not be modified."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: stop("The package 'dir' argument must be of length 1")

msgid "The package 'dir' argument must be of length 1"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("These fields must have ASCII values.")

msgid "These fields must have ASCII values."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("This field must contain one or more packages (and no version requirement).")

msgid "This field must contain one or more packages (and no version requirement)."
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("URL %s was not found", mono(path))

msgid "URL %s was not found"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("Unable to update existing PACKAGES file. Calling write_PACKAGES directly.")

msgid "Unable to update existing PACKAGES file. Calling write_PACKAGES directly."
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Unavailable namespace imported from by a ':::' call: %s",     sQuote(xx))

msgid "Unavailable namespace imported from by a ':::' call: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Unavailable namespaces imported from by ':::' calls:")

msgid "Unavailable namespaces imported from by ':::' calls:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Undocumented %s:", tag)

msgid "Undocumented %s:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Undocumented S4 classes:")

msgid "Undocumented S4 classes:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Undocumented S4 methods:")

msgid "Undocumented S4 methods:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Undocumented arguments in Rd file '%s'", nm)

msgid "Undocumented arguments in Rd file '%s'"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Undocumented code objects:")

msgid "Undocumented code objects:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Undocumented data sets:")

msgid "Undocumented data sets:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Unexported object imported by a ':::' call: %s", sQuote(xxx))

msgid "Unexported object imported by a ':::' call: %s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Unexported objects imported by ':::' calls:")

msgid "Unexported objects imported by ':::' calls:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Unknown encoding")

msgid "Unknown encoding"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("Unknown encoding with non-ASCII data")

msgid "Unknown encoding with non-ASCII data"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: warning("Unknown encoding with non-ASCII data: converting to ASCII")

msgid "Unknown encoding with non-ASCII data: converting to ASCII"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: stop("Unsupported engine name ", sQuote(name))

msgid "Unsupported engine name"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Variables in data frame '%s'", docObj[["name"]])

msgid "Variables in data frame '%s'"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Variables overriding user/site settings:")

msgid "Variables overriding user/site settings:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Variables with usage in Rd file '%s' but not in code:",     fname)

msgid "Variables with usage in Rd file '%s' but not in code:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Version numbers must be sequences of at least two non-negative integers, separated by single '.' or '-'.")

msgid "Version numbers must be sequences of at least two non-negative integers, separated by single '.' or '-'."
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Vignette %s overwrites the following %s output by vignette %s: %s",     sQuote(basename(names(resultsT)[j])), sQuote(name), sQuote(basename(names(resultsT)[i])),     paste(basename(bad), collapse = ", "))

msgid "Vignette %s overwrites the following %s output by vignette %s: %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Vignette '%s' is non-ASCII but has no declared encoding",     name)

msgid "Vignette '%s' is non-ASCII but has no declared encoding"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("Vignette dependencies (%s entries) must be contained in the DESCRIPTION Depends/Suggests/Imports entries.",     "\\VignetteDepends{}")

msgid "Vignette dependencies (%s entries) must be contained in the DESCRIPTION Depends/Suggests/Imports entries."
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Vignette engine %s is not registered", sQuote(name))

msgid "Vignette engine %s is not registered"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Vignette engine %s is not registered by any of the packages %s",     sQuote(name), paste(sQuote(package), collapse = ", "))

msgid "Vignette engine %s is not registered by any of the packages %s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: stop("Vignette engine package not specified", call. = FALSE)

msgid "Vignette engine package not specified"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("Vignette product %s does not have a known filename extension (%s)",     sQuote(file), paste(sQuote(names(type)), collapse = ", "))

msgid "Vignette product %s does not have a known filename extension (%s)"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettext("Vignettes:")

msgid "Vignettes:"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("WARNING: failed to apply patch %s\n", purl)
#. R/install.R: gettextf("WARNING: failed to apply patch %s\n", p)

msgid "WARNING: failed to apply patch %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("WARNING: failed to revert patch ", p, "\n")

msgid "WARNING: failed to revert patch"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("WARNING: installation-time patches will not be applied, could not get the patches index")

msgid "WARNING: installation-time patches will not be applied, could not get the patches index"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: message("WARNING: malformed 'Depends' field in 'DESCRIPTION'")

msgid "WARNING: malformed 'Depends' field in 'DESCRIPTION'"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("WARNING: moving package to final location failed, copying instead")

msgid "WARNING: moving package to final location failed, copying instead"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: message("WARNING: omitting pointless dependence on 'R' without a version requirement")

msgid "WARNING: omitting pointless dependence on 'R' without a version requirement"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("WARNING: shared objects/dynamic libraries with hard-coded temporary installation paths")

msgid "WARNING: shared objects/dynamic libraries with hard-coded temporary installation paths"
msgstr ""


#: R/Rd2pdf.R: 0
#: R/build.R: 0
#: R/check.R: 0
#. R/Rd2pdf.R: message("Warning: unknown option ", sQuote(a))
#. R/build.R: message("Warning: unknown option ", sQuote(a))
#. R/check.R: message("Warning: unknown option ", sQuote(a))

msgid "Warning: unknown option"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("Writing final updated PACKAGES files.")

msgid "Writing final updated PACKAGES files."
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("[dryrun mode] Dryrun complete.")

msgid "[dryrun mode] Dryrun complete."
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("[strict mode] Checking if MD5sums match for existing tarballs")

msgid "[strict mode] Checking if MD5sums match for existing tarballs"
msgstr ""


#: R/Rd2latex.R: 0
#. R/Rd2latex.R: gettext("\\tabular format must be simple text")

msgid "\\tabular format must be simple text"
msgstr ""


#: R/Rd2latex.R: 0
#. R/Rd2latex.R: gettextf("alias:\n%s\nis not one line", sQuote(paste(alias, collapse = "\n")))

msgid "alias:\n%s\nis not one line"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: stop("all packages should have a NAMESPACE")

msgid "all packages should have a NAMESPACE"
msgstr ""


#: R/read.00Index.R: 0
#. R/read.00Index.R: gettextf("argument '%s' must be a character string or connection",     file)

msgid "argument '%s' must be a character string or connection"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("argument 'delim' must specify two characters")

msgid "argument 'delim' must specify two characters"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: stop("argument 'outFile' must be a character string or connection")

msgid "argument 'outFile' must be a character string or connection"
msgstr ""


#: R/QC.R: 0
#: R/Rd.R: 0
#: R/Vignettes.R: 0
#. R/QC.R: stop("argument 'package' must be of length 1")
#. R/Rd.R: stop("argument 'package' must be of length 1")
#. R/Vignettes.R: stop("argument 'package' must be of length 1")

msgid "argument 'package' must be of length 1"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("argument 'x' must be a character vector")

msgid "argument 'x' must be a character vector"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("building a fake installation is disallowed")

msgid "building a fake installation is disallowed"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: warning("cannot check R code installed as image")

msgid "cannot check R code installed as image"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("cannot copy '%s' to '%s'", output, outVignetteDir)

msgid "cannot copy '%s' to '%s'"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("cannot create directory '%s'", buildDir)

msgid "cannot create directory '%s'"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("cannot create temporary directory")

msgid "cannot create temporary directory"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("cannot create unique directory for build")

msgid "cannot create unique directory for build"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: stop("cannot deal with Rd objects with missing/empty names")

msgid "cannot deal with Rd objects with missing/empty names"
msgstr ""


#: R/check.R: 0
#. R/check.R: gettextf("cannot link from %s", from)

msgid "cannot link from %s"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("cannot open directory '%s'", outMetaDir)
#. R/admin.R: gettextf("cannot open directory '%s'", meta_dir)
#. R/admin.R: gettextf("cannot open directory '%s'", outDir)
#. R/admin.R: gettextf("cannot open directory '%s'", outCodeDir)
#. R/admin.R: gettextf("cannot open directory '%s'", outVignetteDir)

msgid "cannot open directory '%s'"
msgstr ""


#: R/index.R: 0
#. R/index.R: gettextf("cannot read index information in file '%s'", INDEX)
#. R/index.R: gettextf("cannot read index information in file '%s'", file.path(demoDir,     "00Index"))

msgid "cannot read index information in file '%s'"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("cannot source package code:\n", conditionMessage(e), call. = FALSE)

msgid "cannot source package code:"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: warning("cannot turn off locale-specific sorting via LC_COLLATE")

msgid "cannot turn off locale-specific sorting via LC_COLLATE"
msgstr ""


#: R/checktools.R: 0
#. R/checktools.R: sprintf("checking %s ...", pfile)

msgid "checking %s ..."
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(basename(savefile)))
#. R/testing.R: gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(basename(prevfile)))
#. R/testing.R: gettextf("  comparing %s to %s ...", sQuote(outfile), sQuote(savefile))

msgid "comparing %s to %s ..."
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("compiling TeX file %s failed with message:\n%s", sQuote(output),     conditionMessage(e))

msgid "compiling TeX file %s failed with message:\n%s"
msgstr ""


#: R/Rconcordance.R: 0
#. R/Rconcordance.R: stop("concordance is not valid")

msgid "concordance is not valid"
msgstr ""


#: R/check.R: 0
#. R/check.R: warning("configuration files are not supported as from R 2.12.0")

msgid "configuration files are not supported as from R 2.12.0"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("contains a blank line", call. = FALSE)

msgid "contains a blank line"
msgstr ""


#: R/Rd2pdf.R: 0
#: R/Vignettes.R: 0
#: R/admin.R: 0
#: R/build.R: 0
#: R/check.R: 0
#: R/install.R: 0
#: R/md5.R: 0
#: R/packages.R: 0
#: R/sha256.R: 0
#. R/Rd2pdf.R: stop("current working directory cannot be ascertained")
#. R/Vignettes.R: stop("current working directory cannot be ascertained")
#. R/admin.R: stop("current working directory cannot be ascertained")
#. R/build.R: stop("current working directory cannot be ascertained")
#. R/check.R: stop("current working directory cannot be ascertained")
#. R/install.R: stop("current working directory cannot be ascertained")
#. R/md5.R: stop("current working directory cannot be ascertained")
#. R/packages.R: stop("current working directory cannot be ascertained")
#. R/sha256.R: stop("current working directory cannot be ascertained")

msgid "current working directory cannot be ascertained"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("directory %s is not writeable ", sQuote(outDir))

msgid "directory %s is not writeable"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("directory '%s' does not contain R code", dir)

msgid "directory '%s' does not contain R code"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("directory '%s' does not contain Rd objects", dir)

msgid "directory '%s' does not contain Rd objects"
msgstr ""


#: R/QC.R: 0
#: R/Rd.R: 0
#: R/Vignettes.R: 0
#: R/admin.R: 0
#: R/index.R: 0
#: R/makeLazyLoad.R: 0
#. R/QC.R: gettextf("directory '%s' does not exist", dir)
#. R/Rd.R: gettextf("directory '%s' does not exist", dir)
#. R/Vignettes.R: gettextf("directory '%s' does not exist", dir)
#. R/admin.R: gettextf("directory '%s' does not exist", dir)
#. R/admin.R: gettextf("directory '%s' does not exist", outDir)
#. R/index.R: gettextf("directory '%s' does not exist", demoDir)
#. R/makeLazyLoad.R: gettextf("directory '%s' does not exist", dir)

msgid "directory '%s' does not exist"
msgstr ""


#: R/dynamicHelp.R: 0
#: R/install.R: 0
#: R/packages.R: 0
#. R/dynamicHelp.R: message(" done")
#. R/install.R: message(" done")
#. R/packages.R: message("done")

msgid "done"
msgstr ""


#: R/checktools.R: 0
#. R/checktools.R: sprintf("downloading %s ... ", rfiles[i])

msgid "downloading %s ..."
msgstr ""


#: R/checktools.R: 0
#. R/checktools.R: message("downloading reverse dependencies ...")

msgid "downloading reverse dependencies ..."
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("\nduplicated files in '%s' field:", collationField)

msgid "duplicated files in '%s' field:"
msgstr ""


#: R/check.R: 0
#. R/check.R: gettextf("elapsed-time limit of %g %s reached for sub-process",     round(tlim/3600, 1L), "hours")
#. R/check.R: gettextf("elapsed-time limit of %g %s reached for sub-process",     round(tlim/60, 1L), "minutes")
#. R/check.R: gettextf("elapsed-time limit of %g %s reached for sub-process",     tlim, "seconds")

msgid "elapsed-time limit of %g %s reached for sub-process"
msgstr ""


#: R/install.R: 0
#. R/install.R: warning("empty 'data' directory", call. = FALSE)

msgid "empty 'data' directory"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("error in inferior call:\n  %s", conditionMessage(val))

msgid "error in inferior call:\n  %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("error reading file '%s'", fd)

msgid "error reading file '%s'"
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: stop("exactly one Rd file must be specified", call. = FALSE)

msgid "exactly one Rd file must be specified"
msgstr ""


#: R/pkg2HTML.R: 0
#. R/pkg2HTML.R: gettextf("expected one package directory, found %d.", length(pkgdir))

msgid "expected one package directory, found %d."
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: warning("failed to start the httpd server", immediate. = TRUE)

msgid "failed to start the httpd server"
msgstr ""


#: R/QC.R: 0
#: R/translations.R: 0
#: R/utils.R: 0
#. R/QC.R: gettextf("file '%s' does not exist", file)
#. R/translations.R: gettextf("file '%s' does not exist", potfile)
#. R/utils.R: gettextf("file '%s' does not exist", x)
#. R/utils.R: gettextf("file '%s' does not exist", dfile)

msgid "file '%s' does not exist"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("file '%s' is not in valid DCF format", dfile)

msgid "file '%s' is not in valid DCF format"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("file '%s' not found", file)

msgid "file '%s' not found"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("\nfiles in '%s' field missing from '%s':", collationField,     codeDir)

msgid "files in '%s' field missing from '%s':"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("\nfiles in '%s' missing from '%s' field:", codeDir,     collationField)

msgid "files in '%s' missing from '%s' field:"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("found T/F in %s", paste(deparse(xfname[[i]]), collapse = ""))

msgid "found T/F in %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("generating debug symbols (%s)", "dSYM")

msgid "generating debug symbols (%s)"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: warning("httpd server disabled by R_DISABLE_HTTPD", immediate. = TRUE)

msgid "httpd server disabled by R_DISABLE_HTTPD"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettext("inferior call failed")

msgid "inferior call failed"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("invalid 'OS.type' \"%s\".  Should not happen", .Platform$OS.type)

msgid "invalid 'OS.type' \"%s\".  Should not happen"
msgstr ""


#: R/sha256.R: 0
#. R/sha256.R: stop("invalid hex string")

msgid "invalid hex string"
msgstr ""


#: R/install.R: 0
#. R/install.R: warning("invalid package ", sQuote(pkg), call. = FALSE)

msgid "invalid package"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("invalid package layout")

msgid "invalid package layout"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("invalid value %s for R_CROSS_BUILD", sQuote(cross))

msgid "invalid value %s for R_CROSS_BUILD"
msgstr ""


#: R/RdConv2.R: 0
#: R/makeLazyLoad.R: 0
#. R/RdConv2.R: gettextf("invalid value for '%s' : %s", opt, oldval)
#. R/makeLazyLoad.R: gettextf("invalid value for '%s' : %s", "compress", "should be FALSE, TRUE, 2 or 3")

msgid "invalid value for '%s' : %s"
msgstr ""


#: R/build.R: 0
#. R/build.R: gettextf("invalid value for '--compact-vignettes', assuming %s",     "\"qpdf\"")

msgid "invalid value for '--compact-vignettes', assuming %s"
msgstr ""


#: R/Rd2HTML.R: 0
#. R/Rd2HTML.R: warning("links not supported for 'standalone = FALSE' when _R_HELP_LINKS_TO_TOPICS_=false")

msgid "links not supported for 'standalone = FALSE' when _R_HELP_LINKS_TO_TOPICS_=false"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: stop("loading failed", call. = FALSE)

msgid "loading failed"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettextf("missing/empty %s field in '%s'", "\\name", description)

msgid "missing/empty %s field in '%s'"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: gettextf("missing/empty \\title field in '%s'", description)

msgid "missing/empty \\title field in '%s'"
msgstr ""


#: R/Rd2ex.R: 0
#. R/Rd2ex.R: warning("more than one \\examples section, using the first")

msgid "more than one \\examples section, using the first"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: stop("namespace must not be already loaded")

msgid "namespace must not be already loaded"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: message("neither code nor data objects found")

msgid "neither code nor data objects found"
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: stop("no 'type' specified", call. = FALSE)

msgid "no 'type' specified"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("no DLL was created")

msgid "no DLL was created"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: stop("no Rd sections specified")

msgid "no Rd sections specified"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("no examples found for package %s", sQuote(pkg))

msgid "no examples found for package %s"
msgstr ""


#: R/Rd2pdf.R: 0
#. R/Rd2pdf.R: message("no inputs")

msgid "no inputs"
msgstr ""


#: R/sotools.R: 0
#. R/sotools.R: message("no native symbols were extracted")

msgid "no native symbols were extracted"
msgstr ""


#: R/checktools.R: 0
#. R/checktools.R: message("no packages to check")

msgid "no packages to check"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: message("no parsed files found")

msgid "no parsed files found"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: stop("no running server to stop")

msgid "no running server to stop"
msgstr ""


#: R/install.R: 0
#. R/install.R: warning("no source files found", call. = FALSE)

msgid "no source files found"
msgstr ""


#: R/citation.R: 0
#. R/citation.R: stop("non-ASCII input in a CITATION file without a declared encoding")

msgid "non-ASCII input in a CITATION file without a declared encoding"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: stop("not a PDF file")

msgid "not a PDF file"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("not using staged install with --libs-only")

msgid "not using staged install with --libs-only"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: stop("only Rd syntax is currently supported")

msgid "only Rd syntax is currently supported"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("package %s %s was found, but %s %s is required by %s",     sQuote(p), current, z$op, target, sQuote(pkgname))

msgid "package %s %s was found, but %s %s is required by %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: gettextf("package %s successfully unpacked and MD5 sums checked",     sQuote(pkg_name))

msgid "package %s successfully unpacked and MD5 sums checked"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettext("package 'methods' is used but not declared")

msgid "package 'methods' is used but not declared"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: warning("package contains no R code")

msgid "package contains no R code"
msgstr ""


#: R/check.R: 0
#. R/check.R: gettextf("package directory %s does not exist", sQuote(pkg))

msgid "package directory %s does not exist"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: sprintf("package name '%s' seems invalid; using directory name '%s' instead",     package_name, dir_name)

msgid "package name '%s' seems invalid; using directory name '%s' instead"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: warning("package seems to be using lazy loading already")

msgid "package seems to be using lazy loading already"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: warning("package seems to be using lazy loading for data already")

msgid "package seems to be using lazy loading for data already"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("parse error in examples from file '%s':\n%s", file,     conditionMessage(e))

msgid "parse error in examples from file '%s':\n%s"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: gettextf("parse error in file '%s':\n%s", file, .massage_file_parse_error(e))
#. R/QC.R: gettextf("parse error in file '%s':\n%s", f, msg)
#. R/QC.R: gettextf("parse error in file '%s':\n%s", summary(files)$description,     .massage_file_parse_error(e))

msgid "parse error in file '%s':\n%s"
msgstr ""


#: R/xgettext.R: 0
#. R/xgettext.R: gettextf("parsing '%s'", f)

msgid "parsing '%s'"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("patch utility is needed for installation-time patching")

msgid "patch utility is needed for installation-time patching"
msgstr ""


#: R/admin.R: 0
#: R/doitools.R: 0
#: R/urltools.R: 0
#: R/utils.R: 0
#. R/admin.R: gettextf("processing %s", sQuote(basename(file)))
#. R/doitools.R: sprintf("processing %s", p)
#. R/urltools.R: sprintf("processing %s", .file_path_relative_to_dir(f, dir))
#. R/urltools.R: sprintf("processing %s", p)
#. R/urltools.R: sprintf("processing %s", i)
#. R/urltools.R: sprintf("processing %s", u)
#. R/utils.R: sprintf("processing %s", p)
#. R/utils.R: sprintf("processing %s", basename(p))
#. R/utils.R: sprintf("processing %s", f)

msgid "processing %s"
msgstr ""


#: R/packages.R: 0
#. R/packages.R: gettextf("reading DESCRIPTION for package %s failed with message:\n  %s",     sQuote(basename(dirname(p))), conditionMessage(temp))
#. R/packages.R: gettextf("reading DESCRIPTION for package %s failed with message:\n  %s",     sQuote(basename(paths[i])), conditionMessage(temp))

msgid "reading DESCRIPTION for package %s failed with message:\n  %s"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("  restoration failed\n")

msgid "restoration failed"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: stop("  ", "results differ from reference results")

msgid "results differ from reference results"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("running %s on vignette '%s' failed with message:\n%s",     engine[["name"]], file, conditionMessage(e))

msgid "running %s on vignette '%s' failed with message:\n%s"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: stop("running 'make' failed")

msgid "running 'make' failed"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("running 'texi2dvi' on '%s' failed", file)

msgid "running 'texi2dvi' on '%s' failed"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: message("running tests of random deviate generation (should no longer ever fail)")

msgid "running tests of random deviate generation (should no longer ever fail)"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: stop("server already running")

msgid "server already running"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: stop("server could not be started on an earlier attempt")

msgid "server could not be started on an earlier attempt"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: stop("source list must have names for all elements")

msgid "source list must have names for all elements"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: stop("source must be an environment or a list")

msgid "source must be an environment or a list"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("staged installation is only possible with locking")

msgid "staged installation is only possible with locking"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: message("starting httpd help server ...", appendLF = FALSE)

msgid "starting httpd help server ..."
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("test '%s' is not available", op)

msgid "test '%s' is not available"
msgstr ""


#: R/testing.R: 0
#. R/testing.R: gettextf("testing '%s' failed", pkgs[i])
#. R/testing.R: gettextf("testing '%s' failed", pkg)

msgid "testing '%s' failed"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: warning("texi2dvi script/program not available, using emulation")

msgid "texi2dvi script/program not available, using emulation"
msgstr ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: stop("this cannot be used for package 'base'")

msgid "this cannot be used for package 'base'"
msgstr ""


#: R/sotools.R: 0
#. R/sotools.R: warning("this requires 'nm' to be on the PATH")

msgid "this requires 'nm' to be on the PATH"
msgstr ""


#: R/sotools.R: 0
#. R/sotools.R: warning("this requires 'objdump.exe' to be on the PATH")

msgid "this requires 'objdump.exe' to be on the PATH"
msgstr ""


#: R/install.R: 0
#. R/install.R: stop("this seems to be a bundle -- and they are defunct")

msgid "this seems to be a bundle -- and they are defunct"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("unable to copy INDEX to '%s'", file.path(outDir, "INDEX"))

msgid "unable to copy INDEX to '%s'"
msgstr ""


#: R/QC.R: 0
#: R/packages.R: 0
#: R/utils.R: 0
#. R/QC.R: stop("unable to create ", file)
#. R/packages.R: stop("unable to create ", td)
#. R/utils.R: stop("unable to create ", con)

msgid "unable to create"
msgstr ""


#: R/admin.R: 0
#. R/admin.R: gettextf("unable to create '%s'", outFile)

msgid "unable to create '%s'"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("unable to create temp directory %s", sQuote(tmpd))

msgid "unable to create temp directory %s"
msgstr ""


#: R/pkg2HTML.R: 0
#. R/pkg2HTML.R: gettextf("unable to create temporary directory %s", sQuote(destdir))
#. R/pkg2HTML.R: gettextf("unable to create temporary directory %s", sQuote(tmpDir))

msgid "unable to create temporary directory %s"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: gettextf("unable to find any package tarballs in %s", dir)

msgid "unable to find any package tarballs in %s"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("unable to run %s on '%s'", latex, file)

msgid "unable to run %s on '%s'"
msgstr ""


#: R/utils.R: 0
#. R/utils.R: gettextf("unable to run '%s' on '%s'", makeindex, idxfile)

msgid "unable to run '%s' on '%s'"
msgstr ""


#: R/QC.R: 0
#: R/admin.R: 0
#: R/utils.R: 0
#. R/QC.R: stop("unable to write code files")
#. R/admin.R: stop("unable to write code files")
#. R/utils.R: stop("unable to write code files")

msgid "unable to write code files"
msgstr ""


#: R/recode.R: 0
#. R/recode.R: stop("unimplemented encoding")

msgid "unimplemented encoding"
msgstr ""


#: R/toHTML.R: 0
#. R/toHTML.R: warning("unknown header specification")

msgid "unknown header specification"
msgstr ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: gettextf("unsupported URL %s", mono(path))

msgid "unsupported URL %s"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: message("update_PACKAGES complete.")

msgid "update_PACKAGES complete."
msgstr ""


#: R/install.R: 0
#. R/install.R: message("using C compiler: ", sQuote(cc_ver[1L]))

msgid "using C compiler:"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("using C++", use_cxxstd)

msgid "using C++"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("using C++ compiler: ", sQuote(cxx_ver[1L]))

msgid "using C++ compiler:"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("using Fortran compiler: ", sQuote(fc_ver[1L]))

msgid "using Fortran compiler:"
msgstr ""


#: R/install.R: 0
#. R/install.R: message("using SDK: ", sQuote(sdk))

msgid "using SDK:"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("vignette builder '%s' not found", pkg)

msgid "vignette builder '%s' not found"
msgstr ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: gettextf("vignette filename '%s' does not match any of the '%s' filename patterns",     file, paste(engine$package, engine$name, sep = "::"))

msgid "vignette filename '%s' does not match any of the '%s' filename patterns"
msgstr ""


#: R/checktools.R: 0
#. R/checktools.R: stop("wrong class")

msgid "wrong class"
msgstr ""


#: R/sha256.R: 0
#. R/sha256.R: stop("x must be a single string")

msgid "x must be a single string"
msgstr ""


#: R/Rd.R: 0
#. R/Rd.R: stop("you must specify 'dir' or 'files'")

msgid "you must specify 'dir' or 'files'"
msgstr ""


#: R/QC.R: 0
#: R/Rd.R: 0
#: R/Vignettes.R: 0
#: R/makeLazyLoad.R: 0
#. R/QC.R: stop("you must specify 'package' or 'dir'")
#. R/Rd.R: stop("you must specify 'package' or 'dir'")
#. R/Vignettes.R: stop("you must specify 'package' or 'dir'")
#. R/makeLazyLoad.R: stop("you must specify 'package' or 'dir'")

msgid "you must specify 'package' or 'dir'"
msgstr ""


#: R/QC.R: 0
#. R/QC.R: stop("you must specify 'package', 'dir' or 'file'")

msgid "you must specify 'package', 'dir' or 'file'"
msgstr ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(sum(retdat$IsNew), "%d entry added or updated", "%d entries added or updated",     domain = "R-tools")

msgid        "%d entry added or updated"
msgid_plural "%d entries added or updated"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(sum(!retdat$IsNew), "%d entry retained unchanged.",     "%d entries retained unchanged.", domain = "R-tools")

msgid        "%d entry retained unchanged."
msgid_plural "%d entries retained unchanged."
msgstr[0]    ""
msgstr[1]    ""


#: R/testing.R: 0
#. R/testing.R: ngettext(sum(res), "%d of the package tests failed", "%d of the package tests failed",     domain = "R-tools")

msgid        "%d of the package tests failed"
msgid_plural "%d of the package tests failed"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(length(toonew), "%d tarball matching existing entries are newer than PACKAGES file and must be reprocessed.",     "%d tarball(s) matching existing entries are newer than PACKAGES file and must be reprocessed.",     domain = "R-tools")

msgid        "%d tarball matching existing entries are newer than PACKAGES file and must be reprocessed."
msgid_plural "%d tarball(s) matching existing entries are newer than PACKAGES file and must be reprocessed."
msgstr[0]    ""
msgstr[1]    ""


#: R/build.R: 0
#. R/build.R: ngettext(sum(!copied), "%s file\n%s\n  ignored as vignettes have been rebuilt.\n  Run R CMD build with --no-build-vignettes to prevent rebuilding.",     "%s files\n%s\n  ignored as vignettes have been rebuilt.\n  Run R CMD build with --no-build-vignettes to prevent rebuilding.",     domain = "R-tools")

msgid        "%s file\n%s\n  ignored as vignettes have been rebuilt.\n  Run R CMD build with --no-build-vignettes to prevent rebuilding."
msgid_plural "%s files\n%s\n  ignored as vignettes have been rebuilt.\n  Run R CMD build with --no-build-vignettes to prevent rebuilding."
msgstr[0]    ""
msgstr[1]    ""


#: R/toHTML.R: 0
#. R/toHTML.R: ngettext(len, "Corresponding BibTeX entry:", "Corresponding BibTeX entries:")

msgid        "Corresponding BibTeX entry:"
msgid_plural "Corresponding BibTeX entries:"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(length(notokinds), "Detected %d MD5sum mismatch between existing PACKAGES file and tarballs",     "Detected %d MD5sum mismatches between existing PACKAGES file and tarballs",     domain = "R-tools")

msgid        "Detected %d MD5sum mismatch between existing PACKAGES file and tarballs"
msgid_plural "Detected %d MD5sum mismatches between existing PACKAGES file and tarballs"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(nrow(retdat), "Final updated PACKAGES db contains %d entry",     "Final updated PACKAGES db contains %d entries", domain = "R-tools")

msgid        "Final updated PACKAGES db contains %d entry"
msgid_plural "Final updated PACKAGES db contains %d entries"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(numnew, "Found %d package version to process.", "Found %d package versions to process.",     domain = "R-tools")

msgid        "Found %d package version to process."
msgid_plural "Found %d package versions to process."
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_S4methods), "Found a .Internal call in methods for the following S4 generic:",     "Found .Internal calls in methods for the following S4 generics:")

msgid        "Found a .Internal call in methods for the following S4 generic:"
msgid_plural "Found .Internal calls in methods for the following S4 generics:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_refs), "Found a .Internal call in methods for the following reference class:",     "Found .Internal calls in methods for the following reference classes:")

msgid        "Found a .Internal call in methods for the following reference class:"
msgid_plural "Found .Internal calls in methods for the following reference classes:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_closures), "Found a .Internal call in the following function:",     "Found .Internal calls in the following functions:")

msgid        "Found a .Internal call in the following function:"
msgid_plural "Found .Internal calls in the following functions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_S4methods), "Found an obsolete/platform-specific call in methods for the following S4 generic:",     "Found an obsolete/platform-specific call in methods for the following S4 generics:")

msgid        "Found an obsolete/platform-specific call in methods for the following S4 generic:"
msgid_plural "Found an obsolete/platform-specific call in methods for the following S4 generics:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_refs), "Found an obsolete/platform-specific call in methods for the following reference class:",     "Found an obsolete/platform-specific call in methods for the following reference classes:")

msgid        "Found an obsolete/platform-specific call in methods for the following reference class:"
msgid_plural "Found an obsolete/platform-specific call in methods for the following reference classes:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_closures), "Found an obsolete/platform-specific call in the following function:",     "Found an obsolete/platform-specific call in the following functions:")

msgid        "Found an obsolete/platform-specific call in the following function:"
msgid_plural "Found an obsolete/platform-specific call in the following functions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_examples), "Found possibly global 'T' or 'F' in the examples of the following Rd file:",     "Found possibly global 'T' or 'F' in the examples of the following Rd files:")

msgid        "Found possibly global 'T' or 'F' in the examples of the following Rd file:"
msgid_plural "Found possibly global 'T' or 'F' in the examples of the following Rd files:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_closures), "Found possibly global 'T' or 'F' in the following function:",     "Found possibly global 'T' or 'F' in the following functions:")

msgid        "Found possibly global 'T' or 'F' in the following function:"
msgid_plural "Found possibly global 'T' or 'F' in the following functions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$defunct), "Found the defunct/removed function:",     "Found the defunct/removed functions:")

msgid        "Found the defunct/removed function:"
msgid_plural "Found the defunct/removed functions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$deprecated), "Found the deprecated function:",     "Found the deprecated functions:")

msgid        "Found the deprecated function:"
msgid_plural "Found the deprecated functions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$devices), "Found the platform-specific device:",     "Found the platform-specific devices:")

msgid        "Found the platform-specific device:"
msgid_plural "Found the platform-specific devices:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(sum(!ok), "Generic without any methods in %s: %s", "Generics without any methods in %s: %s")

msgid        "Generic without any methods in %s: %s"
msgid_plural "Generics without any methods in %s: %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/dynamicHelp.R: 0
#. R/dynamicHelp.R: ngettext(length(paths), "Help on topic '%s' was found in the following package:",     "Help on topic '%s' was found in the following packages:")

msgid        "Help on topic '%s' was found in the following package:"
msgid_plural "Help on topic '%s' was found in the following packages:"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(n, "Note: found %d marked Latin-1 string", "Note: found %d marked Latin-1 strings")

msgid        "Note: found %d marked Latin-1 string"
msgid_plural "Note: found %d marked Latin-1 strings"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(n, "Note: found %d marked UTF-8 string", "Note: found %d marked UTF-8 strings")

msgid        "Note: found %d marked UTF-8 string"
msgid_plural "Note: found %d marked UTF-8 strings"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(n, "Note: found %d string marked as \"bytes\"", "Note: found %d strings marked as \"bytes\"")

msgid        "Note: found %d string marked as \"bytes\""
msgid_plural "Note: found %d strings marked as \"bytes\""
msgstr[0]    ""
msgstr[1]    ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: ngettext(length(package), "Package %s does not have a registered vignette engine",     "None of packages %s have registered vignette engines")

msgid        "Package %s does not have a registered vignette engine"
msgid_plural "None of packages %s have registered vignette engines"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(y), "Package unavailable to check Rd xrefs: %s",     "Packages unavailable to check Rd xrefs: %s")

msgid        "Package unavailable to check Rd xrefs: %s"
msgid_plural "Packages unavailable to check Rd xrefs: %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(x$bad_closures), "Possibly missing '()' after 'return' in the following function:",     "Possibly missing '()' after 'return' in the following functions:")

msgid        "Possibly missing '()' after 'return' in the following function:"
msgid_plural "Possibly missing '()' after 'return' in the following functions:"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(nrow(newpkgdf), "Processed %d entry from package tarballs.",     "Processed %d entries from package tarballs.", domain = "R-tools")

msgid        "Processed %d entry from package tarballs."
msgid_plural "Processed %d entries from package tarballs."
msgstr[0]    ""
msgstr[1]    ""


#: R/check.R: 0
#. R/check.R: ngettext(length(fail), "Required field missing or empty:", "Required fields missing or empty:")

msgid        "Required field missing or empty:"
msgid_plural "Required fields missing or empty:"
msgstr[0]    ""
msgstr[1]    ""


#: R/Vignettes.R: 0
#. R/Vignettes.R: ngettext(length(fails), "SUMMARY: processing the following file failed:",     "SUMMARY: processing the following files failed:")

msgid        "SUMMARY: processing the following file failed:"
msgid_plural "SUMMARY: processing the following files failed:"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(nrow(retdat), "Tarballs found for %d of %d existing PACKAGES entry.",     "Tarballs found for %d of %d existing PACKAGES entries.",     domain = "R-tools")

msgid        "Tarballs found for %d of %d existing PACKAGES entry."
msgid_plural "Tarballs found for %d of %d existing PACKAGES entries."
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(y), "Undeclared package %s in Rd xrefs", "Undeclared packages %s in Rd xrefs")

msgid        "Undeclared package %s in Rd xrefs"
msgid_plural "Undeclared packages %s in Rd xrefs"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(length(y), "Unknown package %s in Rd xrefs", "Unknown packages %s in Rd xrefs")

msgid        "Unknown package %s in Rd xrefs"
msgid_plural "Unknown packages %s in Rd xrefs"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(nrow(retdat), "Updating existing repository [strict mode: OFF]\nDetected PACKAGES file with %d entry at %s",     "Updating existing repository [strict mode: OFF]\nDetected PACKAGES file with %d entries at %s",     domain = "R-tools")

msgid        "Updating existing repository [strict mode: OFF]\nDetected PACKAGES file with %d entry at %s"
msgid_plural "Updating existing repository [strict mode: OFF]\nDetected PACKAGES file with %d entries at %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/update_packages.R: 0
#. R/update_packages.R: ngettext(nrow(retdat), "Updating existing repository [strict mode: ON]\nDetected PACKAGES file with %d entry at %s",     "Updating existing repository [strict mode: ON]\nDetected PACKAGES file with %d entries at %s",     domain = "R-tools")

msgid        "Updating existing repository [strict mode: ON]\nDetected PACKAGES file with %d entry at %s"
msgid_plural "Updating existing repository [strict mode: ON]\nDetected PACKAGES file with %d entries at %s"
msgstr[0]    ""
msgstr[1]    ""


#: R/QC.R: 0
#. R/QC.R: ngettext(len, "Warning in file %s:", "Warnings in file %s:")

msgid        "Warning in file %s:"
msgid_plural "Warnings in file %s:"
msgstr[0]    ""
msgstr[1]    ""


#: R/Rd.R: 0
#. R/Rd.R: ngettext(sum(idx), "missing/empty \\name field in Rd file\n%s",     "missing/empty \\name field in Rd files\n%s")

msgid        "missing/empty \\name field in Rd file\n%s"
msgid_plural "missing/empty \\name field in Rd files\n%s"
msgstr[0]    ""
msgstr[1]    ""


#: R/makeLazyLoad.R: 0
#. R/makeLazyLoad.R: ngettext(sum(dup), "object %s is created by more than one data call",     "objects %s are created by more than one data call")

msgid        "object %s is created by more than one data call"
msgid_plural "objects %s are created by more than one data call"
msgstr[0]    ""
msgstr[1]    ""


#: R/admin.R: 0
#. R/admin.R: ngettext(length(bad2), "unable to re-encode %s line %s", "unable to re-encode %s lines %s")

msgid        "unable to re-encode %s line %s"
msgid_plural "unable to re-encode %s lines %s"
msgstr[0]    ""
msgstr[1]    ""
