msgid ""
msgstr ""
"Project-Id-Version: R 4.6.0\n"
"Report-Msgid-Bugs-To: bugs.r-project.org\n"
"POT-Creation-Date: 2025-06-09 16:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"


#: R/clusterApply.R: 0
#. R/clusterApply.R: stop("'X' must have named dimnames")

msgid "'X' must have named dimnames"
msgstr ""


#: R/unix/mcfork.R: 0
#. R/unix/mcfork.R: stop("'child' must be a valid child process")

msgid "'child' must be a valid child process"
msgstr ""


#: R/unix/mcfork.R: 0
#. R/unix/mcfork.R: stop("'children' must be a list of processes or a single process")

msgid "'children' must be a list of processes or a single process"
msgstr ""


#: R/windows/mcdummies.R: 0
#. R/windows/mcdummies.R: stop("'mc.cores' > 1 is not supported on Windows")

msgid "'mc.cores' > 1 is not supported on Windows"
msgstr ""


#: R/unix/mclapply.R: 0
#: R/unix/pvec.R: 0
#: R/windows/mcdummies.R: 0
#. R/unix/mclapply.R: stop("'mc.cores' must be >= 1")
#. R/unix/pvec.R: stop("'mc.cores' must be >= 1")
#. R/windows/mcdummies.R: stop("'mc.cores' must be >= 1")

msgid "'mc.cores' must be >= 1"
msgstr ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: warning("'mc.preschedule' must be false if 'affinity.list' is used")

msgid "'mc.preschedule' must be false if 'affinity.list' is used"
msgstr ""


#: R/unix/forkCluster.R: 0
#. R/unix/forkCluster.R: stop("'nnodes' must be >= 1")

msgid "'nnodes' must be >= 1"
msgstr ""


#: R/unix/mcfork.R: 0
#. R/unix/mcfork.R: gettextf("'process' must be of class %s", dQuote("process"))

msgid "'process' must be of class %s"
msgstr ""


#: R/unix/pvec.R: 0
#: R/windows/mcdummies.R: 0
#. R/unix/pvec.R: stop("'v' must be a vector")
#. R/windows/mcdummies.R: stop("'v' must be a vector")

msgid "'v' must be a vector"
msgstr ""


#: R/unix/mcfork.R: 0
#. R/unix/mcfork.R: stop("'what' must be a character or raw vector")

msgid "'what' must be a character or raw vector"
msgstr ""


#: R/unix/forkCluster.R: 0
#. R/unix/forkCluster.R: stop("Cluster setup failed.")

msgid "Cluster setup failed."
msgstr ""


#: R/snowSOCK.R: 0
#. R/snowSOCK.R: stop("Connection setup failed or timed out.")

msgid "Connection setup failed or timed out."
msgstr ""


#: R/snowSOCK.R: 0
#. R/snowSOCK.R: stop("PORT must be specified")

msgid "PORT must be specified"
msgstr ""


#: R/unix/mcmapply.R: 0
#. R/unix/mcmapply.R: stop("Zero-length inputs cannot be mixed with those of non-zero length")

msgid "Zero-length inputs cannot be mixed with those of non-zero length"
msgstr ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: stop("affinity.list and X must have the same length")

msgid "affinity.list and X must have the same length"
msgstr ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: warning("all scheduled cores encountered errors in user code")

msgid "all scheduled cores encountered errors in user code"
msgstr ""


#: R/clusterApply.R: 0
#. R/clusterApply.R: stop("dim(X) must have a positive length")

msgid "dim(X) must have a positive length"
msgstr ""


#: R/windows/forkCluster.R: 0
#. R/windows/forkCluster.R: stop("fork clusters are not supported on Windows")

msgid "fork clusters are not supported on Windows"
msgstr ""


#: R/unix/mcfork.R: 0
#. R/unix/mcfork.R: stop("invalid 'child' argument")

msgid "invalid 'child' argument"
msgstr ""


#: R/unix/mcparallel.R: 0
#. R/unix/mcparallel.R: stop("invalid 'jobs' argument")

msgid "invalid 'jobs' argument"
msgstr ""


#: R/RngStream.R: 0
#. R/RngStream.R: gettextf("invalid value of %s", "'seed'")

msgid "invalid value of %s"
msgstr ""


#: R/clusterApply.R: 0
#. R/clusterApply.R: stop("need at least one argument")

msgid "need at least one argument"
msgstr ""


#: R/snow.R: 0
#. R/snow.R: stop("no cluster 'cl' supplied and none is registered")

msgid "no cluster 'cl' supplied and none is registered"
msgstr ""


#: R/snowSOCK.R: 0
#. R/snowSOCK.R: gettextf("node of a socket cluster on host %s with pid %d", sQuote(x[["host"]]),     pid)

msgid "node of a socket cluster on host %s with pid %d"
msgstr ""


#: R/snow.R: 0
#. R/snow.R: stop("not a valid cluster")

msgid "not a valid cluster"
msgstr ""


#: R/clusterApply.R: 0
#. R/clusterApply.R: stop("not all elements of 'MARGIN' are names of dimensions")

msgid "not all elements of 'MARGIN' are names of dimensions"
msgstr ""


#: R/snowSOCK.R: 0
#. R/snowSOCK.R: stop("numeric 'names' must be >= 1")

msgid "numeric 'names' must be >= 1"
msgstr ""


#: R/snow.R: 0
#. R/snow.R: sprintf("replacing registration for cluster type '%s'", type)

msgid "replacing registration for cluster type '%s'"
msgstr ""


#: R/unix/pvec.R: 0
#. R/unix/pvec.R: warning("some results may be missing, folded or caused an error")

msgid "some results may be missing, folded or caused an error"
msgstr ""


#: R/snow.R: 0
#. R/snow.R: sprintf("unknown cluster type: '%s'", type)

msgid "unknown cluster type: '%s'"
msgstr ""


#: R/clusterApply.R: 0
#. R/clusterApply.R: stop("zero-length inputs cannot be mixed with those of non-zero length")

msgid "zero-length inputs cannot be mixed with those of non-zero length"
msgstr ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: ngettext(has.errors, "%d function call resulted in an error",     "%d function calls resulted in an error", domain = "R-parallel")

msgid        "%d function call resulted in an error"
msgid_plural "%d function calls resulted in an error"
msgstr[0]    ""
msgstr[1]    ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: ngettext(nores, "%d parallel function call did not deliver a result",     "%d parallel function calls did not deliver results", domain = "R-parallel")

msgid        "%d parallel function call did not deliver a result"
msgid_plural "%d parallel function calls did not deliver results"
msgstr[0]    ""
msgstr[1]    ""


#: R/unix/mcparallel.R: 0
#. R/unix/mcparallel.R: ngettext(nores, "%d parallel job did not deliver a result", "%d parallel jobs did not deliver results")

msgid        "%d parallel job did not deliver a result"
msgid_plural "%d parallel jobs did not deliver results"
msgstr[0]    ""
msgstr[1]    ""


#: R/snowSOCK.R: 0
#. R/snowSOCK.R: ngettext(failed, "Cluster setup failed. %d worker of %d failed to connect.",     "Cluster setup failed. %d of %d workers failed to connect.")

msgid        "Cluster setup failed. %d worker of %d failed to connect."
msgid_plural "Cluster setup failed. %d of %d workers failed to connect."
msgstr[0]    ""
msgstr[1]    ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: ngettext(nores, "scheduled core %s did not deliver a result, all values of the job will be affected",     "scheduled cores %s did not deliver results, all values of the jobs will be affected")

msgid        "scheduled core %s did not deliver a result, all values of the job will be affected"
msgid_plural "scheduled cores %s did not deliver results, all values of the jobs will be affected"
msgstr[0]    ""
msgstr[1]    ""


#: R/unix/mclapply.R: 0
#. R/unix/mclapply.R: ngettext(length(has.errors), "scheduled core %s encountered error in user code, all values of the job will be affected",     "scheduled cores %s encountered errors in user code, all values of the jobs will be affected")

msgid        "scheduled core %s encountered error in user code, all values of the job will be affected"
msgid_plural "scheduled cores %s encountered errors in user code, all values of the jobs will be affected"
msgstr[0]    ""
msgstr[1]    ""


#: R/snowSOCK.R: 0
#. R/snowSOCK.R: ngettext(length(hosts), "socket cluster with %d nodes on host %s",     "socket cluster with %d nodes on hosts %s")

msgid        "socket cluster with %d nodes on host %s"
msgid_plural "socket cluster with %d nodes on hosts %s"
msgstr[0]    ""
msgstr[1]    ""
