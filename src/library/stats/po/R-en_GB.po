msgid ""
msgstr ""
"Project-Id-Version: R 4.4.0\n"
"Report-Msgid-Bugs-To: bugs.r-project.org\n"
"POT-Creation-Date: 2025-04-01 16:29\n"
"PO-Revision-Date: 2024-03-19 12:53+0000\n"
"Last-Translator: Michael Chirico <michaelchirico4@gmail.com>\n"
"Language-Team: none\n"
"Language: en_GB\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 4.16.4\n"

#. R/xtabs.R: gettextf("%s applies only to two-way tables", "xtabs(*, sparse=TRUE)")
#: R/xtabs.R:0
msgid "%s applies only to two-way tables"
msgstr "%s applies only to two-way tables"

#. R/family.R: gettextf("%s link not recognised", sQuote(link))
#: R/family.R:0
msgid "%s link not recognised"
msgstr "%s link not recognised"

#. R/stl.R: gettextf("%s must be 0 or 1", degname)
#: R/stl.R:0
msgid "%s must be 0 or 1"
msgstr "%s must be 0 or 1"

#. R/contrast.R: gettextf("%s needs package 'Matrix' correctly installed", "contr*(.., sparse=TRUE)")
#. R/contrast.R: gettextf("%s needs package 'Matrix' correctly installed", "contr*(.., sparse=TRUE)")
#. R/xtabs.R: gettextf("%s needs package 'Matrix' correctly installed", "xtabs(*, sparse=TRUE)")
#: R/contrast.R:0 R/xtabs.R:0
msgid "%s needs package 'Matrix' correctly installed"
msgstr "%s needs package 'Matrix' correctly installed"

#. R/lm.R: gettextf("%s: NAs produced for non-estimable cases", msg1)
#: R/lm.R:0
msgid "%s: NAs produced for non-estimable cases"
msgstr "%s: NAs produced for non-estimable cases"

#. R/lm.R: gettextf("%s; attr(*, \"non-estim\") has doubtful cases", msg1)
#: R/lm.R:0
msgid "%s; attr(*, \"non-estim\") has doubtful cases"
msgstr "%s; attr(*, \"non-estim\") has doubtful cases"

#. R/lm.R: gettextf("%s; consider predict(., rankdeficient=\"NA\")", msg1)
#: R/lm.R:0
msgid "%s; consider predict(., rankdeficient=\"NA\")"
msgstr "%s; consider predict(., rankdeficient=\"NA\")"

#. R/nlsFunc.R: gettextf("'%s' cannot be of mode '%s'", deparse1(substitute(object)),     mode(object))
#: R/nlsFunc.R:0
msgid "'%s' cannot be of mode '%s'"
msgstr "'%s' cannot be of mode '%s'"

#. R/models.R: gettextf("'%s' must be a character string", "response")
#. R/reshape.R: gettextf("'%s' must be a character string", "sep")
#: R/models.R:0 R/reshape.R:0
msgid "'%s' must be a character string"
msgstr "'%s' must be a character string"

#. R/power.R: gettextf("'%s' must be numeric in [0, 1]", deparse1(substitute(x)))
#: R/power.R:0
msgid "'%s' must be numeric in [0, 1]"
msgstr "'%s' must be numeric in [0, 1]"

#. R/addmargins.R: stop("'A' must be an array or table")
#: R/addmargins.R:0
msgid "'A' must be an array or table"
msgstr "'A' must be an array or table"

#. R/dendrogram.R: stop("'ColSideColors' must be a character vector of length ncol(x)")
#: R/dendrogram.R:0
msgid "'ColSideColors' must be a character vector of length ncol(x)"
msgstr "'ColSideColors' must be a character vector of length ncol(x)"

#. R/anova.R: stop("'P.values' is TRUE, but 'has.Pvalue' is not")
#: R/anova.R:0
msgid "'P.values' is TRUE, but 'has.Pvalue' is not"
msgstr "'P.values' is TRUE, but 'has.Pvalue' is not"

#. R/dendrogram.R: stop("'RowSideColors' must be a character vector of length nrow(x)")
#: R/dendrogram.R:0
msgid "'RowSideColors' must be a character vector of length nrow(x)"
msgstr "'RowSideColors' must be a character vector of length nrow(x)"

#. R/poisson.test.R: stop("'T' must be nonnegative")
#: R/poisson.test.R:0
msgid "'T' must be nonnegative"
msgstr "'T' must be nonnegative"

#. R/cor.R: stop("'V' is not a square numeric matrix")
#: R/cor.R:0
msgid "'V' is not a square numeric matrix"
msgstr "'V' is not a square numeric matrix"

#. R/dendrogram.R: stop("'X' is not a dendrogram")
#: R/dendrogram.R:0
msgid "'X' is not a dendrogram"
msgstr "'X' is not a dendrogram"

#. R/lsfit.R: warning("'X' matrix was collinear")
#: R/lsfit.R:0
msgid "'X' matrix was collinear"
msgstr "'X' matrix was collinear"

#. R/ARMAtheory.R: stop("'acf' must be of length two or more")
#: R/ARMAtheory.R:0
msgid "'acf' must be of length two or more"
msgstr "'acf' must be of length two or more"

#. R/smspline.R: warning("'all.knots' is TRUE; 'nknots' specification is disregarded")
#: R/smspline.R:0
msgid "'all.knots' is TRUE; 'nknots' specification is disregarded"
msgstr "'all.knots' is TRUE; 'nknots' specification is disregarded"

#. R/smspline.R: warning("'all.knots' is vector of knots; 'nknots' specification is disregarded")
#: R/smspline.R:0
msgid "'all.knots' is vector of knots; 'nknots' specification is disregarded"
msgstr "'all.knots' is vector of knots; 'nknots' specification is disregarded"

#. R/HoltWinters.R: stop("'alpha', 'beta' and 'gamma' must be within the unit interval")
#: R/HoltWinters.R:0
msgid "'alpha', 'beta' and 'gamma' must be within the unit interval"
msgstr "'alpha', 'beta' and 'gamma' must be within the unit interval"

#. R/nls.R: stop("'anova' is only defined for sequences of \"nls\" objects")
#: R/nls.R:0
msgid "'anova' is only defined for sequences of \"nls\" objects"
msgstr "'anova' is only defined for sequences of \"nls\" objects"

#. R/anova.R: stop("'anova' object must have colnames")
#: R/anova.R:0
msgid "'anova' object must have colnames"
msgstr "'anova' object must have colnames"

#. R/approx.R: stop("'approx' requires n >= 1")
#: R/approx.R:0
msgid "'approx' requires n >= 1"
msgstr "'approx' requires n >= 1"

#. R/ts.R: stop("'ar' part of model is not stationary")
#: R/ts.R:0
msgid "'ar' part of model is not stationary"
msgstr "'ar' part of model is not stationary"

#. R/density.R: stop("'bw' is not positive.")
#: R/density.R:0
msgid "'bw' is not positive."
msgstr "'bw' is not positive."

#. R/aggregate.R: stop("'by' must be a list")
#: R/aggregate.R:0
msgid "'by' must be a list"
msgstr "'by' must be a list"

#. R/kmeans.R: stop("'centers' must be a number or a matrix")
#: R/kmeans.R:0
msgid "'centers' must be a number or a matrix"
msgstr "'centers' must be a number or a matrix"

#. R/filter.R: stop("'circular' must be logical and not NA")
#: R/filter.R:0
msgid "'circular' must be logical and not NA"
msgstr "'circular' must be logical and not NA"

#. R/kernel.R: stop("'coef' does not have the correct length")
#: R/kernel.R:0
msgid "'coef' does not have the correct length"
msgstr "'coef' does not have the correct length"

#. R/kernel.R: stop("'coef' must be a vector")
#: R/kernel.R:0
msgid "'coef' must be a vector"
msgstr "'coef' must be a vector"

#. R/aov.R: stop("'coef' must define a contrast, i.e., sum to 0")
#. R/aov.R: stop("'coef' must define a contrast, i.e., sum to 0")
#: R/aov.R:0
msgid "'coef' must define a contrast, i.e., sum to 0"
msgstr "'coef' must define a contrast, i.e., sum to 0"

#. R/aov.R: stop("'coef' must have same length as 'contrast.obj'")
#. R/aov.R: stop("'coef' must have same length as 'contrast.obj'")
#: R/aov.R:0
msgid "'coef' must have same length as 'contrast.obj'"
msgstr "'coef' must have same length as 'contrast.obj'"

#. R/ftable.R: stop("'col.vars' missing or incorrect")
#: R/ftable.R:0
msgid "'col.vars' missing or incorrect"
msgstr "'col.vars' missing or incorrect"

#. R/qqplot.R: stop("'conf.level' is not a probability")
#: R/qqplot.R:0
msgid "'conf.level' is not a probability"
msgstr "'conf.level' is not a probability"

#. R/ansari.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/binom.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/cor.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/fisher.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/mantelhaen.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/prop.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/t.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/var.test.R: stop("'conf.level' must be a single number between 0 and 1")
#. R/wilcox.test.R: stop("'conf.level' must be a single number between 0 and 1")
#: R/ansari.test.R:0 R/binom.test.R:0 R/cor.test.R:0 R/fisher.test.R:0
#: R/mantelhaen.test.R:0 R/prop.test.R:0 R/t.test.R:0 R/var.test.R:0
#: R/wilcox.test.R:0
msgid "'conf.level' must be a single number between 0 and 1"
msgstr "'conf.level' must be a single number between 0 and 1"

#. R/models.R: stop("'contrasts.arg' argument must be named")
#: R/models.R:0
msgid "'contrasts.arg' argument must be named"
msgstr "'contrasts.arg' argument must be named"

#. R/nlminb.R: stop("'control' argument must be a named list")
#. R/nls.R: stop("'control' argument must be a named list")
#: R/nlminb.R:0 R/nls.R:0
msgid "'control' argument must be a named list"
msgstr "'control' argument must be a named list"

#. R/factanal.R: stop("'covmat' is not a valid covariance list")
#. R/princomp.R: stop("'covmat' is not a valid covariance list")
#: R/factanal.R:0 R/princomp.R:0
msgid "'covmat' is not a valid covariance list"
msgstr "'covmat' is not a valid covariance list"

#. R/factanal.R: stop("'covmat' is of unknown type")
#. R/princomp.R: stop("'covmat' is of unknown type")
#: R/factanal.R:0 R/princomp.R:0
msgid "'covmat' is of unknown type"
msgstr "'covmat' is of unknown type"

#. R/model.tables.R: stop("'cterms' argument must match terms in model object")
#: R/model.tables.R:0
msgid "'cterms' argument must match terms in model object"
msgstr "'cterms' argument must match terms in model object"

#. R/symnum.R: gettext("'cutpoints' must be unique in 0 < cuts < 1, but are = ")
#: R/symnum.R:0
msgid "'cutpoints' must be unique in 0 < cuts < 1, but are ="
msgstr "'cutpoints' must be unique in 0 < cuts < 1, but are ="

#. R/symnum.R: gettext("'cutpoints' must be unique, but are = ")
#: R/symnum.R:0
msgid "'cutpoints' must be unique, but are ="
msgstr "'cutpoints' must be unique, but are ="

#. R/smspline.R: stop("'cv' must not be NA when 'df' is specified")
#: R/smspline.R:0
msgid "'cv' must not be NA when 'df' is specified"
msgstr "'cv' must not be NA when 'df' is specified"

#. R/models.R: stop("'data' must be a data.frame, environment, or list")
#. R/models.R: stop("'data' must be a data.frame, environment, or list")
#: R/models.R:0
msgid "'data' must be a data.frame, environment, or list"
msgstr "'data' must be a data.frame, environment, or list"

#. R/models.R: stop("'data' must be a data.frame, not a matrix or an array")
#. R/models.R: stop("'data' must be a data.frame, not a matrix or an array")
#: R/models.R:0
msgid "'data' must be a data.frame, not a matrix or an array"
msgstr "'data' must be a data.frame, not a matrix or an array"

#. R/nls.R: stop("'data' must be a list or an environment")
#: R/nls.R:0
msgid "'data' must be a list or an environment"
msgstr "'data' must be a list or an environment"

#. R/loess.R: stop("'degree' must be 0, 1 or 2")
#: R/loess.R:0
msgid "'degree' must be 0, 1 or 2"
msgstr "'degree' must be 0, 1 or 2"

#. R/contr.poly.R: stop("'degree' must be at least 1")
#: R/contr.poly.R:0
msgid "'degree' must be at least 1"
msgstr "'degree' must be at least 1"

#. R/contr.poly.R: stop("'degree' must be less than number of unique points")
#. R/contr.poly.R: stop("'degree' must be less than number of unique points")
#: R/contr.poly.R:0
msgid "'degree' must be less than number of unique points"
msgstr "'degree' must be less than number of unique points"

#. R/splinefun.R: stop("'deriv' must be between 0 and 3")
#. R/splinefun.R: stop("'deriv' must be between 0 and 3")
#: R/splinefun.R:0
msgid "'deriv' must be between 0 and 3"
msgstr "'deriv' must be between 0 and 3"

#. R/ts.R: stop("'end' must be a whole number of cycles after 'start'")
#: R/ts.R:0
msgid "'end' must be a whole number of cycles after 'start'"
msgstr "'end' must be a whole number of cycles after 'start'"

#. R/ts.R: warning("'end' value not changed")
#: R/ts.R:0
msgid "'end' value not changed"
msgstr "'end' value not changed"

#. R/glm.R: stop("'family' argument seems not to be a valid family object",     call. = FALSE)
#: R/glm.R:0
msgid "'family' argument seems not to be a valid family object"
msgstr "'family' argument seems not to be a valid family object"

#. R/glm.R: stop("'family' not recognized")
#: R/glm.R:0
msgid "'family' not recognized"
msgstr "'family' not recognized"

#. R/ftable.R: stop("'file' must be a character string or connection")
#: R/ftable.R:0
msgid "'file' must be a character string or connection"
msgstr "'file' must be a character string or connection"

#. R/filter.R: stop("'filter' is longer than time series")
#: R/filter.R:0
msgid "'filter' is longer than time series"
msgstr "'filter' is longer than time series"

#. R/ftable.R: stop("'formula' has '.' in both left and right hand sides")
#: R/ftable.R:0
msgid "'formula' has '.' in both left and right hand sides"
msgstr "'formula' has '.' in both left and right hand sides"

#. R/quade.test.R: stop("'formula' missing")
#: R/quade.test.R:0
msgid "'formula' missing"
msgstr "'formula' missing"

#. R/ansari.test.R: stop("'formula' missing or incorrect")
#. R/bartlett.test.R: stop("'formula' missing or incorrect")
#. R/fligner.test.R: stop("'formula' missing or incorrect")
#. R/ftable.R: stop("'formula' missing or incorrect")
#. R/kruskal.test.R: stop("'formula' missing or incorrect")
#. R/ks.test.R: stop("'formula' missing or incorrect")
#. R/ks.test.R: stop("'formula' missing or incorrect")
#. R/mood.test.R: stop("'formula' missing or incorrect")
#. R/oneway.test.R: stop("'formula' missing or incorrect")
#. R/t.test.R: stop("'formula' missing or incorrect")
#. R/t.test.R: stop("'formula' missing or incorrect")
#. R/var.test.R: stop("'formula' missing or incorrect")
#. R/wilcox.test.R: stop("'formula' missing or incorrect")
#. R/wilcox.test.R: stop("'formula' missing or incorrect")
#. R/xtabs.R: stop("'formula' missing or incorrect")
#: R/ansari.test.R:0 R/bartlett.test.R:0 R/fligner.test.R:0 R/ftable.R:0
#: R/kruskal.test.R:0 R/ks.test.R:0 R/mood.test.R:0 R/oneway.test.R:0
#: R/t.test.R:0 R/var.test.R:0 R/wilcox.test.R:0 R/xtabs.R:0
msgid "'formula' missing or incorrect"
msgstr "'formula' missing or incorrect"

#. R/cor.test.R: stop("'formula' missing or invalid")
#: R/cor.test.R:0
msgid "'formula' missing or invalid"
msgstr "'formula' missing or invalid"

#. R/ftable.R: stop("'formula' must have both left and right hand sides")
#: R/ftable.R:0
msgid "'formula' must have both left and right hand sides"
msgstr "'formula' must have both left and right hand sides"

#. R/bartlett.test.R: stop("'formula' should be of the form response ~ group")
#. R/fligner.test.R: stop("'formula' should be of the form response ~ group")
#. R/kruskal.test.R: stop("'formula' should be of the form response ~ group")
#: R/bartlett.test.R:0 R/fligner.test.R:0 R/kruskal.test.R:0
msgid "'formula' should be of the form response ~ group"
msgstr "'formula' should be of the form response ~ group"

#. R/ts.R: stop("'frequency' and 'deltat' are both not NULL and are inconsistent")
#: R/ts.R:0
msgid "'frequency' and 'deltat' are both not NULL and are inconsistent"
msgstr "'frequency' and 'deltat' are both not NULL and are inconsistent"

#. R/ts.R: warning("'frequency' not changed")
#: R/ts.R:0
msgid "'frequency' not changed"
msgstr "'frequency' not changed"

#. R/dendrogram.R: gettextf("'height' must be at least %g, the maximal height of its components",     h.max)
#: R/dendrogram.R:0
msgid "'height' must be at least %g, the maximal height of its components"
msgstr "'height' must be at least %g, the maximal height of its components"

#. R/fisher.test.R: warning("'hybrid' is ignored for a 2 x 2 table")
#: R/fisher.test.R:0
msgid "'hybrid' is ignored for a 2 x 2 table"
msgstr "'hybrid' is ignored for a 2 x 2 table"

#. R/plot.lm.R: gettextf("'id.n' must be in {1,..,%d}", n)
#: R/plot.lm.R:0
msgid "'id.n' must be in {1,..,%d}"
msgstr "'id.n' must be in {1,..,%d}"

#. R/reshape.R: stop("'idvar' must uniquely identify records")
#: R/reshape.R:0
msgid "'idvar' must uniquely identify records"
msgstr "'idvar' must uniquely identify records"

#. R/arima.R: stop("'init' is of the wrong length")
#. R/arma0.R: stop("'init' is of the wrong length")
#: R/arima.R:0 R/arma0.R:0
msgid "'init' is of the wrong length"
msgstr "'init' is of the wrong length"

#. R/nlm.R: stop("'interval' must be a vector of length 2")
#: R/nlm.R:0
msgid "'interval' must be a vector of length 2"
msgstr "'interval' must be a vector of length 2"

#. R/kmeans.R: stop("'iter.max' must be positive")
#: R/kmeans.R:0
msgid "'iter.max' must be positive"
msgstr "'iter.max' must be positive"

#. R/identify.hclust.R: stop("'k' and 'h' must be a scalar")
#: R/identify.hclust.R:0
msgid "'k' and 'h' must be a scalar"
msgstr "'k' and 'h' must be a scalar"

#. R/runmed.R: gettextf("'k' is bigger than 'n'!  Changing 'k' to %d", k <- as.integer(1 +     2 * ((n - 1)%/%2)))
#: R/runmed.R:0
msgid "'k' is bigger than 'n'!  Changing 'k' to %d"
msgstr "'k' is bigger than 'n'!  Changing 'k' to %d"

#. R/kernel.R: stop("'k' is not a kernel")
#. R/kernel.R: stop("'k' is not a kernel")
#: R/kernel.R:0
msgid "'k' is not a kernel"
msgstr "'k' is not a kernel"

#. R/lag.R: warning("'k' is not an integer")
#: R/lag.R:0
msgid "'k' is not an integer"
msgstr "'k' is not an integer"

#. R/cmdscale.R: stop("'k' must be in {1, 2, ..  n - 1}")
#: R/cmdscale.R:0
msgid "'k' must be in {1, 2, ..  n - 1}"
msgstr "'k' must be in {1, 2, ..  n - 1}"

#. R/runmed.R: gettextf("'k' must be odd!  Changing 'k' to %d", k <- as.integer(1 +     2 * (k%/%2)))
#: R/runmed.R:0
msgid "'k' must be odd!  Changing 'k' to %d"
msgstr "'k' must be odd!  Changing 'k' to %d"

#. R/runmed.R: stop("'k' must be positive")
#: R/runmed.R:0
msgid "'k' must be positive"
msgstr "'k' must be positive"

#. R/kernel.R: stop("'kernapply' is not available for object 'x'")
#: R/kernel.R:0
msgid "'kernapply' is not available for object 'x'"
msgstr "'kernapply' is not available for object 'x'"

#. R/acf.R: stop("'lag.max' must be at least 0")
#: R/acf.R:0
msgid "'lag.max' must be at least 0"
msgstr "'lag.max' must be at least 0"

#. R/acf.R: stop("'lag.max' must be at least 1")
#: R/acf.R:0
msgid "'lag.max' must be at least 1"
msgstr "'lag.max' must be at least 1"

#. R/reshape.R: stop("'lengths(varying)' must all match 'length(times)'")
#: R/reshape.R:0
msgid "'lengths(varying)' must all match 'length(times)'"
msgstr "'lengths(varying)' must all match 'length(times)'"

#. R/logLik.R: stop("'logLik.lm' does not support multiple responses")
#: R/logLik.R:0
msgid "'logLik.lm' does not support multiple responses"
msgstr "'logLik.lm' does not support multiple responses"

#. R/mad.R: stop("'low' and 'high' cannot be both TRUE")
#: R/mad.R:0
msgid "'low' and 'high' cannot be both TRUE"
msgstr "'low' and 'high' cannot be both TRUE"

#. R/optim.R: stop("'lower' and 'upper' must be finite values")
#: R/optim.R:0
msgid "'lower' and 'upper' must be finite values"
msgstr "'lower' and 'upper' must be finite values"

#. R/kernel.R: stop("'m' is less than 1")
#. R/kernel.R: stop("'m' is less than 1")
#: R/kernel.R:0
msgid "'m' is less than 1"
msgstr "'m' is less than 1"

#. R/kernel.R: stop("'m' must be numeric with non-negative integers")
#: R/kernel.R:0
msgid "'m' must be numeric with non-negative integers"
msgstr "'m' must be numeric with non-negative integers"

#. R/termplot.R: stop("'main' must be TRUE, FALSE, NULL or character (vector).")
#. R/termplot.R: stop("'main' must be TRUE, FALSE, NULL or character (vector).")
#: R/termplot.R:0
msgid "'main' must be TRUE, FALSE, NULL or character (vector)."
msgstr "'main' must be TRUE, FALSE, NULL or character (vector)."

#. R/loglin.R: stop("'margin' must contain names or numbers corresponding to 'table'")
#: R/loglin.R:0
msgid "'margin' must contain names or numbers corresponding to 'table'"
msgstr "'margin' must contain names or numbers corresponding to 'table'"

#. R/dendrogram.R: stop("'margins' must be a numeric vector of length 2")
#: R/dendrogram.R:0
msgid "'margins' must be a numeric vector of length 2"
msgstr "'margins' must be a numeric vector of length 2"

#. R/mlm.R: stop("'mlm' objects with weights are not supported")
#: R/mlm.R:0
msgid "'mlm' objects with weights are not supported"
msgstr "'mlm' objects with weights are not supported"

#. R/ts.R: stop("'model$order' must be of length 3")
#: R/ts.R:0
msgid "'model$order' must be of length 3"
msgstr "'model$order' must be of length 3"

#. R/ts.R: stop("'model' must be list")
#: R/ts.R:0
msgid "'model' must be list"
msgstr "'model' must be list"

#. R/model.tables.R: stop("'model.tables' is not implemented for multiple responses")
#: R/model.tables.R:0
msgid "'model.tables' is not implemented for multiple responses"
msgstr "'model.tables' is not implemented for multiple responses"

#. R/t.test.R: stop("'mu' must be a single number")
#. R/wilcox.test.R: stop("'mu' must be a single number")
#: R/t.test.R:0 R/wilcox.test.R:0
msgid "'mu' must be a single number"
msgstr "'mu' must be a single number"

#. R/fisher.test.R: stop("'mult' must be integer >= 2, typically = 30")
#: R/fisher.test.R:0
msgid "'mult' must be integer >= 2, typically = 30"
msgstr "'mult' must be integer >= 2, typically = 30"

#. R/binom.test.R: stop("'n' must be a positive integer >= 'x'")
#: R/binom.test.R:0
msgid "'n' must be a positive integer >= 'x'"
msgstr "'n' must be a positive integer >= 'x'"

#. R/ts.R: stop("'n' must be strictly positive")
#: R/ts.R:0
msgid "'n' must be strictly positive"
msgstr "'n' must be strictly positive"

#. R/ar.R: stop("'n.ahead' must be at least 1")
#: R/ar.R:0
msgid "'n.ahead' must be at least 1"
msgstr "'n.ahead' must be at least 1"

#. R/prcomp.R: stop("'newdata' does not have named columns matching one or more of the original columns")
#. R/princomp-add.R: stop("'newdata' does not have named columns matching one or more of the original columns")
#: R/prcomp.R:0 R/princomp-add.R:0
msgid "'newdata' does not have named columns matching one or more of the original columns"
msgstr "'newdata' does not have named columns matching one or more of the original columns"

#. R/prcomp.R: stop("'newdata' does not have the correct number of columns")
#. R/princomp-add.R: stop("'newdata' does not have the correct number of columns")
#: R/prcomp.R:0 R/princomp-add.R:0
msgid "'newdata' does not have the correct number of columns"
msgstr "'newdata' does not have the correct number of columns"

#. R/prcomp.R: stop("'newdata' must be a matrix or data frame")
#. R/princomp-add.R: stop("'newdata' must be a matrix or data frame")
#: R/prcomp.R:0 R/princomp-add.R:0
msgid "'newdata' must be a matrix or data frame"
msgstr "'newdata' must be a matrix or data frame"

#. R/smspline.R: stop("'nknots' must be at least 1")
#: R/smspline.R:0
msgid "'nknots' must be at least 1"
msgstr "'nknots' must be at least 1"

#. R/smspline.R: stop("'nknots' must be numeric (in {1,..,n})")
#: R/smspline.R:0
msgid "'nknots' must be numeric (in {1,..,n})"
msgstr "'nknots' must be numeric (in {1,..,n})"

#. R/ppr.R: stop("'nterms' is missing with no default")
#: R/ppr.R:0
msgid "'nterms' is missing with no default"
msgstr "'nterms' is missing with no default"

#. R/aov.R: stop("'object' does not include an error 'qr' component")
#: R/aov.R:0
msgid "'object' does not include an error 'qr' component"
msgstr "'object' does not include an error 'qr' component"

#. R/lm.R: stop("'object' has no 'effects' component")
#: R/lm.R:0
msgid "'object' has no 'effects' component"
msgstr "'object' has no 'effects' component"

#. R/models.R: stop("'offset' must be numeric")
#: R/models.R:0
msgid "'offset' must be numeric"
msgstr "'offset' must be numeric"

#. R/fisher.test.R: stop("'or' must be a single number between 0 and Inf")
#: R/fisher.test.R:0
msgid "'or' must be a single number between 0 and Inf"
msgstr "'or' must be a single number between 0 and Inf"

#. R/arima.R: stop("'order' must be a non-negative numeric vector of length 3")
#. R/arma0.R: stop("'order' must be a non-negative numeric vector of length 3")
#: R/arima.R:0 R/arma0.R:0
msgid "'order' must be a non-negative numeric vector of length 3"
msgstr "'order' must be a non-negative numeric vector of length 3"

#. R/dendrogram.R: stop("'order.dendrogram' requires a dendrogram")
#: R/dendrogram.R:0
msgid "'order.dendrogram' requires a dendrogram"
msgstr "'order.dendrogram' requires a dendrogram"

#. R/ar.R: stop("'order.max' must be < 'n.obs'")
#: R/ar.R:0
msgid "'order.max' must be < 'n.obs'"
msgstr "'order.max' must be < 'n.obs'"

#. R/ar.R: stop("'order.max' must be < 'n.used'")
#. R/ar.R: stop("'order.max' must be < 'n.used'")
#. R/ar.R: stop("'order.max' must be < 'n.used'")
#: R/ar.R:0
msgid "'order.max' must be < 'n.used'"
msgstr "'order.max' must be < 'n.used'"

#. R/ar.R: stop("'order.max' must be >= 0")
#. R/ar.R: stop("'order.max' must be >= 0")
#: R/ar.R:0
msgid "'order.max' must be >= 0"
msgstr "'order.max' must be >= 0"

#. R/ar.R: stop("'order.max' must be >= 1")
#. R/ar.R: stop("'order.max' must be >= 1")
#. R/ar.R: stop("'order.max' must be >= 1")
#: R/ar.R:0
msgid "'order.max' must be >= 1"
msgstr "'order.max' must be >= 1"

#. R/binom.test.R: stop("'p' must be a single number between 0 and 1")
#: R/binom.test.R:0
msgid "'p' must be a single number between 0 and 1"
msgstr "'p' must be a single number between 0 and 1"

#. R/spectrum.R: stop("'p' must be between 0 and 0.5")
#: R/spectrum.R:0
msgid "'p' must be between 0 and 0.5"
msgstr "'p' must be between 0 and 0.5"

#. R/prop.test.R: stop("'p' must have the same length as 'x' and 'n'")
#: R/prop.test.R:0
msgid "'p' must have the same length as 'x' and 'n'"
msgstr "'p' must have the same length as 'x' and 'n'"

#. R/nls-profile.R: stop("'params' has wrong length")
#: R/nls-profile.R:0
msgid "'params' has wrong length"
msgstr "'params' has wrong length"

#. R/stepfun.R: stop("'plot.stepfun' called with wrong type of argument 'x'")
#: R/stepfun.R:0
msgid "'plot.stepfun' called with wrong type of argument 'x'"
msgstr "'plot.stepfun' called with wrong type of argument 'x'"

#. R/ppr.R: stop("'ppr' applies only to numerical variables")
#: R/ppr.R:0
msgid "'ppr' applies only to numerical variables"
msgstr "'ppr' applies only to numerical variables"

#. R/princomp.R: stop("'princomp' can only be used with more units than variables")
#: R/princomp.R:0
msgid "'princomp' can only be used with more units than variables"
msgstr "'princomp' can only be used with more units than variables"

#. R/nlm.R: stop("'print.level' must be in {0,1,2}")
#: R/nlm.R:0
msgid "'print.level' must be in {0,1,2}"
msgstr "'print.level' must be in {0,1,2}"

#. R/distn.R: stop("'prob' and 'mu' both specified")
#. R/distn.R: stop("'prob' and 'mu' both specified")
#. R/distn.R: stop("'prob' and 'mu' both specified")
#. R/distn.R: stop("'prob' and 'mu' both specified")
#: R/distn.R:0
msgid "'prob' and 'mu' both specified"
msgstr "'prob' and 'mu' both specified"

#. R/quantile.R: stop("'probs' outside [0,1]")
#: R/quantile.R:0
msgid "'probs' outside [0,1]"
msgstr "'probs' outside [0,1]"

#. R/proj.R: stop("'proj' is not implemented for multiple responses")
#. R/proj.R: stop("'proj' is not implemented for multiple responses")
#: R/proj.R:0
msgid "'proj' is not implemented for multiple responses"
msgstr "'proj' is not implemented for multiple responses"

#. R/kernel.R: stop("'r' is less than 0")
#: R/kernel.R:0
msgid "'r' is less than 0"
msgstr "'r' is less than 0"

#. R/kernel.R: stop("'r' is less than 1")
#: R/kernel.R:0
msgid "'r' is less than 1"
msgstr "'r' is less than 1"

#. R/poisson.test.R: stop("'r' must be a single positive number")
#: R/poisson.test.R:0
msgid "'r' must be a single positive number"
msgstr "'r' must be a single positive number"

#. R/var.test.R: stop("'ratio' must be a single positive number")
#: R/var.test.R:0
msgid "'ratio' must be a single positive number"
msgstr "'ratio' must be a single positive number"

#. R/relevel.R: stop("'ref' must be an existing level")
#: R/relevel.R:0
msgid "'ref' must be an existing level"
msgstr "'ref' must be an existing level"

#. R/relevel.R: stop("'ref' must be of length one")
#: R/relevel.R:0
msgid "'ref' must be of length one"
msgstr "'ref' must be of length one"

#. R/relevel.R: stop("'relevel' only for (unordered) factors")
#: R/relevel.R:0
msgid "'relevel' only for (unordered) factors"
msgstr "'relevel' only for (unordered) factors"

#. R/relevel.R: stop("'relevel' only for unordered factors")
#: R/relevel.R:0
msgid "'relevel' only for unordered factors"
msgstr "'relevel' only for unordered factors"

#. R/dendrogram.R: stop("'reorder.dendrogram' requires a dendrogram")
#: R/dendrogram.R:0
msgid "'reorder.dendrogram' requires a dendrogram"
msgstr "'reorder.dendrogram' requires a dendrogram"

#. R/ftable.R: stop("'row.var.names' missing")
#: R/ftable.R:0
msgid "'row.var.names' missing"
msgstr "'row.var.names' missing"

#. R/acf.R: stop("'sampleT' and 'nser' must be integer")
#: R/acf.R:0
msgid "'sampleT' and 'nser' must be integer"
msgstr "'sampleT' and 'nser' must be integer"

#. R/biplot.R: warning("'scale' is outside [0, 1]")
#. R/biplot.R: warning("'scale' is outside [0, 1]")
#: R/biplot.R:0
msgid "'scale' is outside [0, 1]"
msgstr "'scale' is outside [0, 1]"

#. R/contr.poly.R: stop("'scores' argument is of the wrong length")
#: R/contr.poly.R:0
msgid "'scores' argument is of the wrong length"
msgstr "'scores' argument is of the wrong length"

#. R/contr.poly.R: stop("'scores' must all be different numbers")
#: R/contr.poly.R:0
msgid "'scores' must all be different numbers"
msgstr "'scores' must all be different numbers"

#. R/ar.R: warning("'se.fit' not yet implemented for multivariate models")
#: R/ar.R:0
msgid "'se.fit' not yet implemented for multivariate models"
msgstr "'se.fit' not yet implemented for multivariate models"

#. R/arima.R: stop("'seasonal$order' must be a non-negative numeric vector of length 3")
#. R/arma0.R: stop("'seasonal$order' must be a non-negative numeric vector of length 3")
#: R/arima.R:0 R/arma0.R:0
msgid "'seasonal$order' must be a non-negative numeric vector of length 3"
msgstr "'seasonal$order' must be a non-negative numeric vector of length 3"

#. R/arima.R: stop("'seasonal' is neither a list with component 'order' nor a numeric vector of length 3")
#. R/arma0.R: stop("'seasonal' is neither a list with component 'order' nor a numeric vector of length 3")
#: R/arima.R:0 R/arma0.R:0
#, fuzzy
msgid "'seasonal' is neither a list with component 'order' nor a numeric vector of length 3"
msgstr "'seasonal' must be a list with component 'order'"

#. R/arima.R: stop("'seasonal' must be a list with component 'order'")
#. R/arma0.R: stop("'seasonal' must be a list with component 'order'")
#: R/arima.R:0 R/arma0.R:0
msgid "'seasonal' must be a list with component 'order'"
msgstr "'seasonal' must be a list with component 'order'"

#. R/smspline.R: stop("'span' must be between 0 and 1.")
#: R/smspline.R:0
msgid "'span' must be between 0 and 1."
msgstr "'span' must be between 0 and 1."

#. R/smspline.R: stop("'spar' must be of length 1")
#: R/smspline.R:0
msgid "'spar' must be of length 1"
msgstr "'spar' must be of length 1"

#. R/spline.R: stop("'spline' requires n >= 1")
#: R/spline.R:0
msgid "'spline' requires n >= 1"
msgstr "'spline' requires n >= 1"

#. R/ts.R: stop("'start' > 'end'")
#: R/ts.R:0
msgid "'start' > 'end'"
msgstr "'start' > 'end'"

#. R/loglin.R: stop("'start' and 'table' must be same length")
#: R/loglin.R:0
msgid "'start' and 'table' must be same length"
msgstr "'start' and 'table' must be same length"

#. R/ts.R: stop("'start' cannot be after 'end'")
#. R/ts.R: stop("'start' cannot be after 'end'")
#: R/ts.R:0
msgid "'start' cannot be after 'end'"
msgstr "'start' cannot be after 'end'"

#. R/ts.R: warning("'start' value not changed")
#: R/ts.R:0
msgid "'start' value not changed"
msgstr "'start' value not changed"

#. R/models.R: stop("'termlabels' must be a character vector")
#: R/models.R:0
#, fuzzy
msgid "'termlabels' must be a character vector"
msgstr "'termlabels' must be a character vector of length at least one"

#. R/models.R: gettextf("'termobj' must be a object of class %s", dQuote("terms"))
#: R/models.R:0
msgid "'termobj' must be a object of class %s"
msgstr "'termobj' must be a object of class %s"

#. R/approx.R: stop("'ties' is not \"ordered\", a function, or list(<string>, <function>)")
#: R/approx.R:0
msgid "'ties' is not \"ordered\", a function, or list(<string>, <function>)"
msgstr "'ties' is not \"ordered\", a function, or list(<string>, <function>)"

#. R/smspline.R: stop("'tol' must be strictly positive and finite")
#: R/smspline.R:0
msgid "'tol' must be strictly positive and finite"
msgstr "'tol' must be strictly positive and finite"

#. R/optim.R: stop("'trace != 0' needs 'REPORT >= 1'")
#: R/optim.R:0
msgid "'trace != 0' needs 'REPORT >= 1'"
msgstr "'trace != 0' needs 'REPORT >= 1'"

#. R/ts.R: stop("'ts' object must have one or more observations")
#: R/ts.R:0
msgid "'ts' object must have one or more observations"
msgstr "'ts' object must have one or more observations"

#. R/quantile.R: stop("'type' must be 1 or 3 for ordered factors")
#: R/quantile.R:0
msgid "'type' must be 1 or 3 for ordered factors"
msgstr "'type' must be 1 or 3 for ordered factors"

#. R/quantile.R: stop("'type' must be an integer in 1..9")
#: R/quantile.R:0
#, fuzzy
msgid "'type' must be an integer in 1..9"
msgstr "'y' must be one longer than 'x'"

#. R/family.R: gettextf("'variance' \"%s\" is invalid: possible values are \"mu(1-mu)\", \"mu\", \"mu^2\", \"mu^3\" and \"constant\"",     vtemp)
#: R/family.R:0
msgid "'variance' \"%s\" is invalid: possible values are \"mu(1-mu)\", \"mu\", \"mu^2\", \"mu^3\" and \"constant\""
msgstr "'variance' \"%s\" is invalid: possible values are \"mu(1-mu)\", \"mu\", \"mu^2\", \"mu^3\" and \"constant\""

#. R/reshape.R: stop("'varying' arguments must be the same length")
#: R/reshape.R:0
msgid "'varying' arguments must be the same length"
msgstr "'varying' arguments must be the same length"

#. R/nls-profile.R: stop("'varying' has wrong length")
#: R/nls-profile.R:0
msgid "'varying' has wrong length"
msgstr "'varying' has wrong length"

#. R/nls-profile.R: stop("'varying' must be in seq_along(pars)")
#. R/nls-profile.R: stop("'varying' must be in seq_along(pars)")
#: R/nls-profile.R:0
msgid "'varying' must be in seq_along(pars)"
msgstr "'varying' must be in seq_along(pars)"

#. R/nls-profile.R: stop("'varying' must be logical, integer or character")
#: R/nls-profile.R:0
msgid "'varying' must be logical, integer or character"
msgstr "'varying' must be logical, integer or character"

#. R/reshape.R: stop("'varying' must be nonempty list or vector")
#: R/reshape.R:0
msgid "'varying' must be nonempty list or vector"
msgstr "'varying' must be nonempty list or vector"

#. R/lm.R: stop("'weights' as formula should be one-sided")
#: R/lm.R:0
msgid "'weights' as formula should be one-sided"
msgstr "'weights' as formula should be one-sided"

#. R/density.R: stop("'weights' must all be finite")
#: R/density.R:0
msgid "'weights' must all be finite"
msgstr "'weights' must all be finite"

#. R/glm.R: stop("'weights' must be a numeric vector")
#. R/lm.R: stop("'weights' must be a numeric vector")
#: R/glm.R:0 R/lm.R:0
msgid "'weights' must be a numeric vector"
msgstr "'weights' must be a numeric vector"

#. R/density.R: stop("'weights' must not be negative")
#: R/density.R:0
msgid "'weights' must not be negative"
msgstr "'weights' must not be negative"

#. R/plot.lm.R: stop("'which' must be in 1:6")
#: R/plot.lm.R:0
msgid "'which' must be in 1:6"
msgstr "'which' must be in 1:6"

#. R/TukeyHSD.R: stop("'which' specified no factors")
#: R/TukeyHSD.R:0
msgid "'which' specified no factors"
msgstr "'which' specified no factors"

#. R/TukeyHSD.R: warning("'which' specified some non-factors which will be dropped")
#: R/TukeyHSD.R:0
msgid "'which' specified some non-factors which will be dropped"
msgstr "'which' specified some non-factors which will be dropped"

#. R/poisson.test.R: stop("'x' and 'T' have incompatible length")
#: R/poisson.test.R:0
msgid "'x' and 'T' have incompatible length"
msgstr "'x' and 'T' have incompatible length"

#. R/bartlett.test.R: stop("'x' and 'g' must have the same length")
#. R/fligner.test.R: stop("'x' and 'g' must have the same length")
#. R/kruskal.test.R: stop("'x' and 'g' must have the same length")
#: R/bartlett.test.R:0 R/fligner.test.R:0 R/kruskal.test.R:0
msgid "'x' and 'g' must have the same length"
msgstr "'x' and 'g' must have the same length"

#. R/pairwise.R: stop("'x' and 'n' must have the same length")
#. R/prop.test.R: stop("'x' and 'n' must have the same length")
#: R/pairwise.R:0 R/prop.test.R:0
msgid "'x' and 'n' must have the same length"
msgstr "'x' and 'n' must have the same length"

#. R/chisq.test.R: stop("'x' and 'p' must have the same number of elements")
#: R/chisq.test.R:0
msgid "'x' and 'p' must have the same number of elements"
msgstr "'x' and 'p' must have the same number of elements"

#. R/weighted.mean.R: stop("'x' and 'w' must have the same length")
#: R/weighted.mean.R:0
msgid "'x' and 'w' must have the same length"
msgstr "'x' and 'w' must have the same length"

#. R/density.R: stop("'x' and 'weights' have unequal length")
#: R/density.R:0
msgid "'x' and 'weights' have unequal length"
msgstr "'x' and 'weights' have unequal length"

#. R/chisq.test.R: stop("'x' and 'y' must have at least 2 levels")
#. R/fisher.test.R: stop("'x' and 'y' must have at least 2 levels")
#. R/mantelhaen.test.R: stop("'x' and 'y' must have at least 2 levels")
#: R/chisq.test.R:0 R/fisher.test.R:0 R/mantelhaen.test.R:0
msgid "'x' and 'y' must have at least 2 levels"
msgstr "'x' and 'y' must have at least 2 levels"

#. R/chisq.test.R: stop("'x' and 'y' must have the same length")
#. R/cor.test.R: stop("'x' and 'y' must have the same length")
#. R/fisher.test.R: stop("'x' and 'y' must have the same length")
#. R/mcnemar.test.R: stop("'x' and 'y' must have the same length")
#. R/wilcox.test.R: stop("'x' and 'y' must have the same length")
#: R/chisq.test.R:0 R/cor.test.R:0 R/fisher.test.R:0 R/mcnemar.test.R:0
#: R/wilcox.test.R:0
msgid "'x' and 'y' must have the same length"
msgstr "'x' and 'y' must have the same length"

#. R/mcnemar.test.R: stop("'x' and 'y' must have the same number of levels (minimum 2)")
#: R/mcnemar.test.R:0
msgid "'x' and 'y' must have the same number of levels (minimum 2)"
msgstr "'x' and 'y' must have the same number of levels (minimum 2)"

#. R/density.R: stop("'x' contains missing values")
#: R/density.R:0
msgid "'x' contains missing values"
msgstr "'x' contains missing values"

#. R/fisher.test.R: gettextf("'x' has been rounded to integer: %s", ax)
#: R/fisher.test.R:0
msgid "'x' has been rounded to integer: %s"
msgstr "'x' has been rounded to integer: %s"

#. R/fisher.test.R: stop("'x' has entries too large to be integer")
#: R/fisher.test.R:0
msgid "'x' has entries too large to be integer"
msgstr "'x' has entries too large to be integer"

#. R/cancor.R: stop("'x' has rank 0")
#: R/cancor.R:0
msgid "'x' has rank 0"
msgstr "'x' has rank 0"

#. R/kruskal.test.R: warning("'x' is a list, so ignoring argument 'g'")
#: R/kruskal.test.R:0
msgid "'x' is a list, so ignoring argument 'g'"
msgstr "'x' is a list, so ignoring argument 'g'"

#. R/cor.R: stop("'x' is empty")
#: R/cor.R:0
msgid "'x' is empty"
msgstr "'x' is empty"

#. R/kernel.R: stop("'x' is not a kernel")
#: R/kernel.R:0
msgid "'x' is not a kernel"
msgstr "'x' is not a kernel"

#. R/diffinv.R: stop("'x' is not a vector")
#. R/diffinv.R: stop("'x' is not a vector")
#. R/diffinv.R: stop("'x' is not a vector")
#. R/kernel.R: stop("'x' is not a vector")
#: R/diffinv.R:0 R/kernel.R:0
msgid "'x' is not a vector"
msgstr "'x' is not a vector"

#. R/diffinv.R: stop("'x' is not a vector or matrix")
#. R/embed.R: stop("'x' is not a vector or matrix")
#: R/diffinv.R:0 R/embed.R:0
msgid "'x' is not a vector or matrix"
msgstr "'x' is not a vector or matrix"

#. R/kernel.R: stop("'x' is shorter than kernel 'k'")
#: R/kernel.R:0
msgid "'x' is shorter than kernel 'k'"
msgstr "'x' is shorter than kernel 'k'"

#. R/chisq.test.R: stop("'x' must at least have 2 elements")
#: R/chisq.test.R:0
msgid "'x' must at least have 2 elements"
msgstr "'x' must at least have 2 elements"

#. R/splinefun.R: stop("'x' must be *strictly* increasing (non - NA)")
#: R/splinefun.R:0
msgid "'x' must be *strictly* increasing (non - NA)"
msgstr "'x' must be *strictly* increasing (non - NA)"

#. R/mantelhaen.test.R: stop("'x' must be a 3-dimensional array")
#: R/mantelhaen.test.R:0
msgid "'x' must be a 3-dimensional array"
msgstr "'x' must be a 3-dimensional array"

#. R/bartlett.test.R: stop("'x' must be a list with at least 2 elements")
#. R/fligner.test.R: stop("'x' must be a list with at least 2 elements")
#. R/kruskal.test.R: stop("'x' must be a list with at least 2 elements")
#: R/bartlett.test.R:0 R/fligner.test.R:0 R/kruskal.test.R:0
msgid "'x' must be a list with at least 2 elements"
msgstr "'x' must be a list with at least 2 elements"

#. R/lm.R: stop("'x' must be a matrix")
#. R/lm.R: stop("'x' must be a matrix")
#: R/lm.R:0
msgid "'x' must be a matrix"
msgstr "'x' must be a matrix"

#. R/cov.wt.R: stop("'x' must be a matrix or a data frame")
#: R/cov.wt.R:0
msgid "'x' must be a matrix or a data frame"
msgstr "'x' must be a matrix or a data frame"

#. R/dendrogram.R: stop("'x' must be a numeric matrix")
#: R/dendrogram.R:0
msgid "'x' must be a numeric matrix"
msgstr "'x' must be a numeric matrix"

#. R/cor.test.R: stop("'x' must be a numeric vector")
#: R/cor.test.R:0
msgid "'x' must be a numeric vector"
msgstr "'x' must be a numeric vector"

#. R/spectrum.R: stop("'x' must be a time series or an ar() fit")
#: R/spectrum.R:0
msgid "'x' must be a time series or an ar() fit"
msgstr "'x' must be a time series or an ar() fit"

#. R/ftable.R: stop("'x' must be an \"ftable\" object")
#. R/ftable.R: stop("'x' must be an \"ftable\" object")
#. R/ftable.R: stop("'x' must be an \"ftable\" object")
#: R/ftable.R:0
msgid "'x' must be an \"ftable\" object"
msgstr "'x' must be an \"ftable\" object"

#. R/symnum.R: gettextf("'x' must be between %s and %s", format(minc), format(maxc))
#: R/symnum.R:0
msgid "'x' must be between %s and %s"
msgstr "'x' must be between %s and %s"

#. R/symnum.R: gettext("'x' must be between -1 and 1")
#: R/symnum.R:0
msgid "'x' must be between -1 and 1"
msgstr "'x' must be between -1 and 1"

#. R/smspline.R: stop("'x' must be between 0 and 1 for periodic smooth")
#: R/smspline.R:0
msgid "'x' must be between 0 and 1 for periodic smooth"
msgstr "'x' must be between 0 and 1 for periodic smooth"

#. R/anova.R: stop("'x' must be coefficient matrix/data frame")
#: R/anova.R:0
msgid "'x' must be coefficient matrix/data frame"
msgstr "'x' must be coefficient matrix/data frame"

#. R/poisson.test.R: stop("'x' must be finite, nonnegative, and integer")
#: R/poisson.test.R:0
msgid "'x' must be finite, nonnegative, and integer"
msgstr "'x' must be finite, nonnegative, and integer"

#. R/distn.R: stop("'x' must be non-negative")
#: R/distn.R:0
msgid "'x' must be non-negative"
msgstr "'x' must be non-negative"

#. R/binom.test.R: stop("'x' must be nonnegative and integer")
#: R/binom.test.R:0
msgid "'x' must be nonnegative and integer"
msgstr "'x' must be nonnegative and integer"

#. R/StructTS.R: stop("'x' must be numeric")
#. R/acf.R: stop("'x' must be numeric")
#. R/acf.R: stop("'x' must be numeric")
#. R/ar.R: stop("'x' must be numeric")
#. R/ar.R: stop("'x' must be numeric")
#. R/ar.R: stop("'x' must be numeric")
#. R/arima.R: stop("'x' must be numeric")
#. R/arma0.R: stop("'x' must be numeric")
#. R/cor.R: stop("'x' must be numeric")
#. R/wilcox.test.R: stop("'x' must be numeric")
#: R/StructTS.R:0 R/acf.R:0 R/ar.R:0 R/arima.R:0 R/arma0.R:0 R/cor.R:0
#: R/wilcox.test.R:0
msgid "'x' must be numeric"
msgstr "'x' must be numeric"

#. R/mcnemar.test.R: stop("'x' must be square with at least two rows and columns")
#: R/mcnemar.test.R:0
msgid "'x' must be square with at least two rows and columns"
msgstr "'x' must be square with at least two rows and columns"

#. R/cov.wt.R: stop("'x' must contain finite values only")
#: R/cov.wt.R:0
msgid "'x' must contain finite values only"
msgstr "'x' must contain finite values only"

#. R/ecdf.R: stop("'x' must have 1 or more non-missing values")
#: R/ecdf.R:0
msgid "'x' must have 1 or more non-missing values"
msgstr "'x' must have 1 or more non-missing values"

#. R/pairwise.R: stop("'x' must have 2 columns")
#. R/prop.test.R: stop("'x' must have 2 columns")
#: R/pairwise.R:0 R/prop.test.R:0
msgid "'x' must have 2 columns"
msgstr "'x' must have 2 columns"

#. R/dendrogram.R: stop("'x' must have at least 2 rows and 2 columns")
#: R/dendrogram.R:0
msgid "'x' must have at least 2 rows and 2 columns"
msgstr "'x' must have at least 2 rows and 2 columns"

#. R/fisher.test.R: stop("'x' must have at least 2 rows and columns")
#: R/fisher.test.R:0
msgid "'x' must have at least 2 rows and columns"
msgstr "'x' must have at least 2 rows and columns"

#. R/stepfun.R: stop("'x' must have length >= 1")
#: R/stepfun.R:0
msgid "'x' must have length >= 1"
msgstr "'x' must have length >= 1"

#. R/mantelhaen.test.R: stop("'x', 'y', and 'z' must have the same length")
#: R/mantelhaen.test.R:0
msgid "'x', 'y', and 'z' must have the same length"
msgstr "'x', 'y', and 'z' must have the same length"

#. R/diffinv.R: stop("'xi' does not have the right length")
#: R/diffinv.R:0
msgid "'xi' does not have the right length"
msgstr "'xi' does not have the right length"

#. R/arima.R: stop("'xreg' and 'newxreg' have different numbers of columns")
#. R/arma0.R: stop("'xreg' and 'newxreg' have different numbers of columns")
#: R/arima.R:0 R/arma0.R:0
msgid "'xreg' and 'newxreg' have different numbers of columns"
msgstr "'xreg' and 'newxreg' have different numbers of columns"

#. R/arma0.R: stop("'xreg' is collinear")
#: R/arma0.R:0
msgid "'xreg' is collinear"
msgstr "'xreg' is collinear"

#. R/ts.R: stop("'xy.labels' must be logical or character")
#: R/ts.R:0
msgid "'xy.labels' must be logical or character"
msgstr "'xy.labels' must be logical or character"

#. R/cancor.R: stop("'y' has rank 0")
#: R/cancor.R:0
msgid "'y' has rank 0"
msgstr "'y' has rank 0"

#. R/t.test.R: stop("'y' is missing for paired test")
#. R/wilcox.test.R: stop("'y' is missing for paired test")
#: R/t.test.R:0 R/wilcox.test.R:0
msgid "'y' is missing for paired test"
msgstr "'y' is missing for paired test"

#. R/cor.test.R: stop("'y' must be a numeric vector")
#: R/cor.test.R:0
msgid "'y' must be a numeric vector"
msgstr "'y' must be a numeric vector"

#. R/spline.R: stop("'y' must be increasing or decreasing")
#. R/splinefun.R: stop("'y' must be increasing or decreasing")
#: R/spline.R:0 R/splinefun.R:0
msgid "'y' must be increasing or decreasing"
msgstr "'y' must be increasing or decreasing"

#. R/cor.R: stop("'y' must be numeric")
#. R/wilcox.test.R: stop("'y' must be numeric")
#: R/cor.R:0 R/wilcox.test.R:0
msgid "'y' must be numeric"
msgstr "'y' must be numeric"

#. R/ks.test.R: stop("'y' must be numeric or a function or a string naming a valid function")
#: R/ks.test.R:0
msgid "'y' must be numeric or a function or a string naming a valid function"
msgstr "'y' must be numeric or a function or a string naming a valid function"

#. R/smspline.R: stop("'y' must be numeric vector")
#: R/smspline.R:0
msgid "'y' must be numeric vector"
msgstr "'y' must be numeric vector"

#. R/stepfun.R: stop("'y' must be one longer than 'x'")
#: R/stepfun.R:0
msgid "'y' must be one longer than 'x'"
msgstr "'y' must be one longer than 'x'"

#. R/friedman.test.R: stop("'y', 'groups' and 'blocks' must have the same length")
#. R/quade.test.R: stop("'y', 'groups' and 'blocks' must have the same length")
#: R/friedman.test.R:0 R/quade.test.R:0
msgid "'y', 'groups' and 'blocks' must have the same length"
msgstr "'y', 'groups' and 'blocks' must have the same length"

#. R/quantile.R: stop("(unordered) factors are not allowed")
#: R/quantile.R:0
msgid "(unordered) factors are not allowed"
msgstr "(unordered) factors are not allowed"

#. R/lm.R: stop("0 (non-NA) cases")
#. R/lm.R: stop("0 (non-NA) cases")
#: R/lm.R:0
msgid "0 (non-NA) cases"
msgstr "0 (non-NA) cases"

#. R/glm.R: stop("0s in V(mu)")
#: R/glm.R:0
msgid "0s in V(mu)"
msgstr "0s in V(mu)"

#. R/add.R: stop("AIC is -infinity for this model, so 'step' cannot proceed")
#: R/add.R:0
msgid "AIC is -infinity for this model, so 'step' cannot proceed"
msgstr "AIC is -infinity for this model, so 'step' cannot proceed"

#. R/add.R: stop("AIC is not defined for this model, so 'step' cannot proceed")
#: R/add.R:0
msgid "AIC is not defined for this model, so 'step' cannot proceed"
msgstr "AIC is not defined for this model, so 'step' cannot proceed"

#. R/lm.R: warning("ANOVA F-tests on an essentially perfect fit are unreliable")
#: R/lm.R:0
msgid "ANOVA F-tests on an essentially perfect fit are unreliable"
msgstr "ANOVA F-tests on an essentially perfect fit are unreliable"

#. R/lm.R: warning("Assuming constant prediction variance even though model fit is weighted\n")
#: R/lm.R:0
msgid "Assuming constant prediction variance even though model fit is weighted"
msgstr "Assuming constant prediction variance even though model fit is weighted"

#. R/constrOptim.R: gettext("Barrier algorithm ran out of iterations and did not converge")
#: R/constrOptim.R:0
msgid "Barrier algorithm ran out of iterations and did not converge"
msgstr "Barrier algorithm ran out of iterations and did not converge"

#. R/cor.test.R: warning("Cannot compute exact p-value with ties")
#. R/cor.test.R: warning("Cannot compute exact p-value with ties")
#: R/cor.test.R:0
msgid "Cannot compute exact p-value with ties"
msgstr "Cannot compute exact p-value with ties"

#. R/chisq.test.R: warning("Chi-squared approximation may be incorrect")
#. R/prop.test.R: warning("Chi-squared approximation may be incorrect")
#: R/chisq.test.R:0 R/prop.test.R:0
msgid "Chi-squared approximation may be incorrect"
msgstr "Chi-squared approximation may be incorrect"

#. R/dendrogram.R: stop("Colv = \"Rowv\" but nrow(x) != ncol(x)")
#: R/dendrogram.R:0
msgid "Colv = \"Rowv\" but nrow(x) != ncol(x)"
msgstr "Colv = \"Rowv\" but nrow(x) != ncol(x)"

#. R/hclust.R: gettextf("\n Consider providing an as.hclust.%s() method", oldClass(x)[1L])
#: R/hclust.R:0
msgid "Consider providing an as.hclust.%s() method"
msgstr "Consider providing an as.hclust.%s() method"

#. R/model.tables.R: message("Design is unbalanced - use se.contrast() for se's")
#: R/model.tables.R:0
msgid "Design is unbalanced - use se.contrast() for se's"
msgstr "Design is unbalanced - use se.contrast() for se's"

#. R/aov.R: warning("Error() model is singular")
#: R/aov.R:0
msgid "Error() model is singular"
msgstr "Error() model is singular"

#. R/add.R: gettextf("F test assumes 'quasi%s' family", fam)
#: R/add.R:0
msgid "F test assumes 'quasi%s' family"
msgstr "F test assumes 'quasi%s' family"

#. R/add.R: gettextf("F test assumes quasi%s family", fam)
#: R/add.R:0
msgid "F test assumes quasi%s family"
msgstr "F test assumes quasi%s family"

#. R/arima.R: warning("MA part of model is not invertible")
#. R/arma0.R: warning("MA part of model is not invertible")
#: R/arima.R:0 R/arma0.R:0
msgid "MA part of model is not invertible"
msgstr "MA part of model is not invertible"

#. R/ar.R: stop("MLE only implemented for univariate series")
#: R/ar.R:0
msgid "MLE only implemented for univariate series"
msgstr "MLE only implemented for univariate series"

#. R/smspline.R: stop("NA lev[]; probably smoothing parameter 'spar' way too large!")
#: R/smspline.R:0
msgid "NA lev[]; probably smoothing parameter 'spar' way too large!"
msgstr "NA lev[]; probably smoothing parameter 'spar' way too large!"

#. R/cmdscale.R: stop("NA values not allowed in 'd'")
#: R/cmdscale.R:0
msgid "NA values not allowed in 'd'"
msgstr "NA values not allowed in 'd'"

#. R/friedman.test.R: stop("NA's are not allowed in 'groups' or 'blocks'")
#. R/quade.test.R: stop("NA's are not allowed in 'groups' or 'blocks'")
#: R/friedman.test.R:0 R/quade.test.R:0
msgid "NA's are not allowed in 'groups' or 'blocks'"
msgstr "NA's are not allowed in 'groups' or 'blocks'"

#. R/mantelhaen.test.R: stop("NAs are not allowed")
#: R/mantelhaen.test.R:0
msgid "NAs are not allowed"
msgstr "NAs are not allowed"

#. R/arima.R: gettextf("NAs in '%s'", "phi")
#. R/arima.R: gettextf("NAs in '%s'", "theta")
#: R/arima.R:0
msgid "NAs in '%s'"
msgstr "NAs in '%s'"

#. R/acf.R: stop("NAs in 'x'")
#. R/ar.R: stop("NAs in 'x'")
#. R/ar.R: stop("NAs in 'x'")
#. R/ar.R: stop("NAs in 'x'")
#. R/ar.R: stop("NAs in 'x'")
#: R/acf.R:0 R/ar.R:0
msgid "NAs in 'x'"
msgstr "NAs in 'x'"

#. R/ar.R: stop("NAs in 'x' must be the same row-wise")
#. R/ar.R: stop("NAs in 'x' must be the same row-wise")
#: R/ar.R:0
msgid "NAs in 'x' must be the same row-wise"
msgstr "NAs in 'x' must be the same row-wise"

#. R/glm.R: stop("NAs in V(mu)")
#: R/glm.R:0
msgid "NAs in V(mu)"
msgstr "NAs in V(mu)"

#. R/glm.R: stop("NAs in d(mu)/d(eta)")
#: R/glm.R:0
msgid "NAs in d(mu)/d(eta)"
msgstr "NAs in d(mu)/d(eta)"

#. R/arma0.R: warning("NAs present: setting 'delta' to -1")
#: R/arma0.R:0
msgid "NAs present: setting 'delta' to -1"
msgstr "NAs present: setting 'delta' to -1"

#. R/power.R: warning("No p1 in [0, p2] can be found to achieve the desired power")
#: R/power.R:0
msgid "No p1 in [0, p2] can be found to achieve the desired power"
msgstr "No p1 in [0, p2] can be found to achieve the desired power"

#. R/power.R: warning("No p2 in [p1, 1] can be found to achieve the desired power")
#: R/power.R:0
msgid "No p2 in [p1, 1] can be found to achieve the desired power"
msgstr "No p2 in [p1, 1] can be found to achieve the desired power"

#. R/power.R: warning("No significance level [0, 1] can be found to achieve the desired power")
#: R/power.R:0
msgid "No significance level [0, 1] can be found to achieve the desired power"
msgstr "No significance level [0, 1] can be found to achieve the desired power"

#. R/smspline.R: stop("Numeric 'all.knots' must be strictly increasing")
#: R/smspline.R:0
msgid "Numeric 'all.knots' must be strictly increasing"
msgstr "Numeric 'all.knots' must be strictly increasing"

#. R/constrOptim.R: gettextf("Objective function decreased at outer iteration %d",     i)
#: R/constrOptim.R:0
msgid "Objective function decreased at outer iteration %d"
msgstr "Objective function decreased at outer iteration %d"

#. R/constrOptim.R: gettextf("Objective function increased at outer iteration %d",     i)
#: R/constrOptim.R:0
msgid "Objective function increased at outer iteration %d"
msgstr "Objective function increased at outer iteration %d"

#. R/prcomp.R: stop("PCA applies only to numerical variables")
#. R/princomp.R: stop("PCA applies only to numerical variables")
#. R/princomp.R: stop("PCA applies only to numerical variables")
#: R/prcomp.R:0 R/princomp.R:0
msgid "PCA applies only to numerical variables"
msgstr "PCA applies only to numerical variables"

#. R/acf.R: gettextf("Page [%d,%d]: i =%s; j =%s", I, J, paste(iind, collapse = ","),     paste(jind, collapse = ","))
#: R/acf.R:0
msgid "Page [%d,%d]: i =%s; j =%s"
msgstr "Page [%d,%d]: i =%s; j =%s"

#. R/ks.test.R: gettextf("Parameter(s) %s ignored", paste(names(args), collapse = ", "))
#: R/ks.test.R:0
#, fuzzy
msgid "Parameter(s) %s ignored"
msgstr "Parameter(s)"

#. R/glm-profile.R: gettext("\nParameter: ", domain = "R-stats")
#: R/glm-profile.R:0
msgid "Parameter:"
msgstr "Parameter:"

#. R/kmeans.R: gettextf("Quick-TRANSfer stage steps exceeded maximum (= %d)",     isteps.Qtran)
#: R/kmeans.R:0
msgid "Quick-TRANSfer stage steps exceeded maximum (= %d)"
msgstr "Quick-TRANSfer stage steps exceeded maximum (= %d)"

#. R/aov.R: message("Refitting model to allow projection")
#: R/aov.R:0
msgid "Refitting model to allow projection"
msgstr "Refitting model to allow projection"

#. R/confint.R: gettextf("Reprofiling for %s  statistic. Waiting...", test)
#: R/confint.R:0
#, fuzzy
msgid "Reprofiling for %s  statistic. Waiting..."
msgstr "statistic. Waiting..."

#. R/wilcox.test.R: warning("Requested conf.level not achievable")
#: R/wilcox.test.R:0
msgid "Requested conf.level not achievable"
msgstr "Requested conf.level not achievable"

#. R/model.tables.R: gettextf("SEs for type '%s' are not yet implemented", type)
#. R/model.tables.R: gettextf("SEs for type '%s' are not yet implemented", type)
#: R/model.tables.R:0
msgid "SEs for type '%s' are not yet implemented"
msgstr "SEs for type '%s' are not yet implemented"

#. R/density.R: warning("Selecting bandwidth *not* using 'weights'")
#: R/density.R:0
msgid "Selecting bandwidth *not* using 'weights'"
msgstr "Selecting bandwidth *not* using 'weights'"

#. R/model.tables.R: message("Standard error information not returned as design is unbalanced. \nStandard errors can be obtained through 'se.contrast'.")
#: R/model.tables.R:0
msgid ""
"Standard error information not returned as design is unbalanced. \n"
"Standard errors can be obtained through 'se.contrast'."
msgstr ""
"Standard error information not returned as design is unbalanced. \n"
"Standard errors can be obtained through 'se.contrast'."

#. R/hclust.R: message("The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\"")
#: R/hclust.R:0
msgid "The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\""
msgstr "The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\""

#. R/models.R: sprintf("Unparseable 'response' \"%s\"; use is deprecated.  Use as.name(.) or `..`!",     response)
#: R/models.R:0
msgid "Unparseable 'response' \"%s\"; use is deprecated.  Use as.name(.) or `..`!"
msgstr "Unparseable 'response' \"%s\"; use is deprecated.  Use as.name(.) or `..`!"

#. R/confint.R: message("Waiting for profiling to be done...")
#. R/confint.R: message("Waiting for profiling to be done...")
#: R/confint.R:0
msgid "Waiting for profiling to be done..."
msgstr "Waiting for profiling to be done..."

#. R/mlm.R: stop("X does not define a subspace of M")
#. R/mlm.R: stop("X does not define a subspace of M")
#. R/mlm.R: stop("X does not define a subspace of M")
#. R/mlm.R: stop("X does not define a subspace of M")
#: R/mlm.R:0
msgid "X does not define a subspace of M"
msgstr "X does not define a subspace of M"

#. R/integrate.R: stop("a limit is NA or NaN")
#: R/integrate.R:0
msgid "a limit is NA or NaN"
msgstr "a limit is NA or NaN"

#. R/oneway.test.R: stop("a two-sided formula is required")
#: R/oneway.test.R:0
msgid "a two-sided formula is required"
msgstr "a two-sided formula is required"

#. R/shapiro.test.R: stop("all 'x' values are identical")
#: R/shapiro.test.R:0
msgid "all 'x' values are identical"
msgstr "all 'x' values are identical"

#. R/zzModels.R: stop("all 'x' values must be non-negative to fit the Weibull growth model")
#: R/zzModels.R:0
msgid "all 'x' values must be non-negative to fit the Weibull growth model"
msgstr "all 'x' values must be non-negative to fit the Weibull growth model"

#. R/identify.hclust.R: gettextf("all elements of 'which' must be between 1 and %d",     k)
#: R/identify.hclust.R:0
msgid "all elements of 'which' must be between 1 and %d"
msgstr "all elements of 'which' must be between 1 and %d"

#. R/chisq.test.R: stop("all entries of 'x' must be nonnegative and finite")
#. R/fisher.test.R: stop("all entries of 'x' must be nonnegative and finite")
#. R/mcnemar.test.R: stop("all entries of 'x' must be nonnegative and finite")
#: R/chisq.test.R:0 R/fisher.test.R:0 R/mcnemar.test.R:0
msgid "all entries of 'x' must be nonnegative and finite"
msgstr "all entries of 'x' must be nonnegative and finite"

#. R/fligner.test.R: stop("all groups must contain data")
#. R/kruskal.test.R: stop("all groups must contain data")
#: R/fligner.test.R:0 R/kruskal.test.R:0
msgid "all groups must contain data"
msgstr "all groups must contain data"

#. R/bartlett.test.R: stop("all observations are in the same group")
#. R/fligner.test.R: stop("all observations are in the same group")
#. R/kruskal.test.R: stop("all observations are in the same group")
#: R/bartlett.test.R:0 R/fligner.test.R:0 R/kruskal.test.R:0
msgid "all observations are in the same group"
msgstr "all observations are in the same group"

#. R/StructTS.R: stop("all parameters were fixed")
#. R/arma0.R: stop("all parameters were fixed")
#: R/StructTS.R:0 R/arma0.R:0
msgid "all parameters were fixed"
msgstr "all parameters were fixed"

#. R/na.ts.R: stop("all times contain an NA")
#. R/ts.R: stop("all times contain an NA")
#: R/na.ts.R:0 R/ts.R:0
msgid "all times contain an NA"
msgstr "all times contain an NA"

#. R/smspline.R: stop("all weights should be non-negative")
#: R/smspline.R:0
msgid "all weights should be non-negative"
msgstr "all weights should be non-negative"

#. R/fisher.test.R: stop("alternative must be \"two.sided\", \"less\" or \"greater\"")
#: R/fisher.test.R:0
msgid "alternative must be \"two.sided\", \"less\" or \"greater\""
msgstr "alternative must be \"two.sided\", \"less\" or \"greater\""

#. R/hclust.R: stop("ambiguous clustering method", paste("", method))
#: R/hclust.R:0
msgid "ambiguous clustering method"
msgstr "ambiguous clustering method"

#. R/dist.R: stop("ambiguous distance method")
#: R/dist.R:0
msgid "ambiguous distance method"
msgstr "ambiguous distance method"

#. R/nls.R: stop("anova is only defined for sequences of \"nls\" objects")
#: R/nls.R:0
msgid "anova is only defined for sequences of \"nls\" objects"
msgstr "anova is only defined for sequences of \"nls\" objects"

#. R/nls.R: warning("argument 'na.action' will be ignored")
#: R/nls.R:0
msgid "argument 'na.action' will be ignored"
msgstr "argument 'na.action' will be ignored"

#. R/selfStart.R: stop("argument 'object' has an impossible length")
#: R/selfStart.R:0
msgid "argument 'object' has an impossible length"
msgstr "argument 'object' has an impossible length"

#. R/ks.test.R: stop("argument 'p' must be numeric")
#: R/ks.test.R:0
msgid "argument 'p' must be numeric"
msgstr "argument 'p' must be numeric"

#. R/ks.test.R: stop("argument 'q' must be numeric")
#: R/ks.test.R:0
msgid "argument 'q' must be numeric"
msgstr "argument 'q' must be numeric"

#. R/filter.R: stop("argument 'sides' must be 1 or 2")
#: R/filter.R:0
msgid "argument 'sides' must be 1 or 2"
msgstr "argument 'sides' must be 1 or 2"

#. R/ks.test.R: stop("argument 'sizes' must be a vector of length 2")
#. R/ks.test.R: stop("argument 'sizes' must be a vector of length 2")
#: R/ks.test.R:0
msgid "argument 'sizes' must be a vector of length 2"
msgstr "argument 'sizes' must be a vector of length 2"

#. R/nls.R: warning("argument 'subset' will be ignored")
#: R/nls.R:0
msgid "argument 'subset' will be ignored"
msgstr "argument 'subset' will be ignored"

#. R/hclust.R: gettextf("argument 'x' cannot be coerced to class %s", dQuote("hclust"))
#: R/hclust.R:0
msgid "argument 'x' cannot be coerced to class %s"
msgstr "argument 'x' cannot be coerced to class %s"

#. R/aggregate.R: stop("argument 'x' is  missing -- it has been renamed from 'formula'")
#: R/aggregate.R:0
msgid "argument 'x' is  missing -- it has been renamed from 'formula'"
msgstr "argument 'x' is  missing -- it has been renamed from 'formula'"

#. R/aggregate.R: stop("argument 'x' must be a formula")
#: R/aggregate.R:0
msgid "argument 'x' must be a formula"
msgstr "argument 'x' must be a formula"

#. R/density.R: stop("argument 'x' must be numeric")
#: R/density.R:0
msgid "argument 'x' must be numeric"
msgstr "argument 'x' must be numeric"

#. R/proj.R: stop("argument does not include a 'qr' component")
#: R/proj.R:0
msgid "argument does not include a 'qr' component"
msgstr "argument does not include a 'qr' component"

#. R/proj.R: stop("argument does not include an 'effects' component")
#: R/proj.R:0
msgid "argument does not include an 'effects' component"
msgstr "argument does not include an 'effects' component"

#. R/r2dtable.R: stop("arguments 'r' and 'c' must have the same sums")
#: R/r2dtable.R:0
msgid "arguments 'r' and 'c' must have the same sums"
msgstr "arguments 'r' and 'c' must have the same sums"

#. R/aggregate.R: stop("arguments must have same length")
#: R/aggregate.R:0
msgid "arguments must have same length"
msgstr "arguments must have same length"

#. R/contr.poly.R: stop("arguments must have the same length")
#: R/contr.poly.R:0
msgid "arguments must have the same length"
msgstr "arguments must have the same length"

#. R/lm.R: warning("assuming prediction variance inversely proportional to weights used for fitting\n")
#: R/lm.R:0
msgid "assuming prediction variance inversely proportional to weights used for fitting"
msgstr "assuming prediction variance inversely proportional to weights used for fitting"

#. R/chisq.test.R: stop("at least one entry of 'x' must be positive")
#: R/chisq.test.R:0
msgid "at least one entry of 'x' must be positive"
msgstr "at least one entry of 'x' must be positive"

#. R/smooth.R: stop("attempt to smooth NA values")
#: R/smooth.R:0
msgid "attempt to smooth NA values"
msgstr "attempt to smooth NA values"

#. R/smooth.R: stop("attempt to smooth non-numeric values")
#: R/smooth.R:0
msgid "attempt to smooth non-numeric values"
msgstr "attempt to smooth non-numeric values"

#. R/add.R: warning("attempting model selection on an essentially perfect fit is nonsense",     call. = FALSE)
#: R/add.R:0
msgid "attempting model selection on an essentially perfect fit is nonsense"
msgstr "attempting model selection on an essentially perfect fit is nonsense"

#. R/ts.R: stop("bad value for 'end'")
#: R/ts.R:0
msgid "bad value for 'end'"
msgstr "bad value for 'end'"

#. R/diffinv.R: stop("bad value for 'lag' or 'differences'")
#. R/ts.R: stop("bad value for 'lag' or 'differences'")
#: R/diffinv.R:0 R/ts.R:0
msgid "bad value for 'lag' or 'differences'"
msgstr "bad value for 'lag' or 'differences'"

#. R/ts.R: stop("bad value for 'start'")
#: R/ts.R:0
msgid "bad value for 'start'"
msgstr "bad value for 'start'"

#. R/runmed.R: stop("bandwidth 'k' must be >= 1 and odd!")
#: R/runmed.R:0
msgid "bandwidth 'k' must be >= 1 and odd!"
msgstr "bandwidth 'k' must be >= 1 and odd!"

#. R/contrast.R: stop("baseline group number out of range")
#: R/contrast.R:0
msgid "baseline group number out of range"
msgstr "baseline group number out of range"

#. R/biplot.R: stop("biplots are not defined for complex PCA")
#: R/biplot.R:0
msgid "biplots are not defined for complex PCA"
msgstr "biplots are not defined for complex PCA"

#. R/loess.R: warning("both 'span' and 'enp.target' specified: 'span' will be used")
#: R/loess.R:0
msgid "both 'span' and 'enp.target' specified: 'span' will be used"
msgstr "both 'span' and 'enp.target' specified: 'span' will be used"

#. R/princomp.R: warning("both 'x' and 'covmat' were supplied: 'x' will be ignored")
#: R/princomp.R:0
msgid "both 'x' and 'covmat' were supplied: 'x' will be ignored"
msgstr "both 'x' and 'covmat' were supplied: 'x' will be ignored"

#. R/cor.R: stop("both 'x' and 'y' must be non-empty")
#: R/cor.R:0
msgid "both 'x' and 'y' must be non-empty"
msgstr "both 'x' and 'y' must be non-empty"

#. R/optim.R: warning("bounds can only be used with method L-BFGS-B (or Brent)")
#: R/optim.R:0
msgid "bounds can only be used with method L-BFGS-B (or Brent)"
msgstr "bounds can only be used with method L-BFGS-B (or Brent)"

#. R/ts.R: stop("burn-in 'n.start' must be as long as 'ar + ma'")
#: R/ts.R:0
msgid "burn-in 'n.start' must be as long as 'ar + ma'"
msgstr "burn-in 'n.start' must be as long as 'ar + ma'"

#. R/lm.R: warning("calling anova.lm(<fake-lm-object>) ...")
#: R/lm.R:0
msgid "calling anova.lm(<fake-lm-object>) ..."
msgstr "calling anova.lm(<fake-lm-object>) ..."

#. R/lm.R: warning("calling predict.lm(<fake-lm-object>) ...")
#: R/lm.R:0
msgid "calling predict.lm(<fake-lm-object>) ..."
msgstr "calling predict.lm(<fake-lm-object>) ..."

#. R/lm.R: warning("calling summary.lm(<fake-lm-object>) ...")
#: R/lm.R:0
msgid "calling summary.lm(<fake-lm-object>) ..."
msgstr "calling summary.lm(<fake-lm-object>) ..."

#. R/acf.R: warning("can use ci.type=\"ma\" only if first lag is 0")
#: R/acf.R:0
msgid "can use ci.type=\"ma\" only if first lag is 0"
msgstr "can use ci.type=\"ma\" only if first lag is 0"

#. R/nls.R: stop("cannot calculate REML log-likelihood for \"nls\" objects")
#: R/nls.R:0
msgid "cannot calculate REML log-likelihood for \"nls\" objects"
msgstr "cannot calculate REML log-likelihood for \"nls\" objects"

#. R/aggregate.R: gettextf("cannot change frequency from %g to %g", ofrequency,     nfrequency)
#: R/aggregate.R:0
msgid "cannot change frequency from %g to %g"
msgstr "cannot change frequency from %g to %g"

#. R/ansari.test.R: warning("cannot compute asymptotic confidence set or estimator")
#: R/ansari.test.R:0
msgid "cannot compute asymptotic confidence set or estimator"
msgstr "cannot compute asymptotic confidence set or estimator"

#. R/wilcox.test.R: warning("cannot compute confidence interval when all observations are tied",     call. = FALSE)
#: R/wilcox.test.R:0
msgid "cannot compute confidence interval when all observations are tied"
msgstr "cannot compute confidence interval when all observations are tied"

#. R/wilcox.test.R: warning("cannot compute confidence interval when all observations are zero or tied",     call. = FALSE)
#: R/wilcox.test.R:0
msgid "cannot compute confidence interval when all observations are zero or tied"
msgstr "cannot compute confidence interval when all observations are zero or tied"

#. R/ansari.test.R: warning("cannot compute confidence set, returning NA")
#: R/ansari.test.R:0
msgid "cannot compute confidence set, returning NA"
msgstr "cannot compute confidence set, returning NA"

#. R/ansari.test.R: warning("cannot compute estimate, returning NA")
#: R/ansari.test.R:0
msgid "cannot compute estimate, returning NA"
msgstr "cannot compute estimate, returning NA"

#. R/wilcox.test.R: warning("cannot compute exact confidence interval with ties")
#: R/wilcox.test.R:0
msgid "cannot compute exact confidence interval with ties"
msgstr "cannot compute exact confidence interval with ties"

#. R/wilcox.test.R: warning("cannot compute exact confidence interval with zeroes")
#: R/wilcox.test.R:0
msgid "cannot compute exact confidence interval with zeroes"
msgstr "cannot compute exact confidence interval with zeroes"

#. R/ansari.test.R: warning("cannot compute exact confidence intervals with ties")
#. R/wilcox.test.R: warning("cannot compute exact confidence intervals with ties")
#: R/ansari.test.R:0 R/wilcox.test.R:0
msgid "cannot compute exact confidence intervals with ties"
msgstr "cannot compute exact confidence intervals with ties"

#. R/ansari.test.R: warning("cannot compute exact p-value with ties")
#. R/wilcox.test.R: warning("cannot compute exact p-value with ties")
#. R/wilcox.test.R: warning("cannot compute exact p-value with ties")
#: R/ansari.test.R:0 R/wilcox.test.R:0
msgid "cannot compute exact p-value with ties"
msgstr "cannot compute exact p-value with ties"

#. R/wilcox.test.R: warning("cannot compute exact p-value with zeroes")
#: R/wilcox.test.R:0
msgid "cannot compute exact p-value with zeroes"
msgstr "cannot compute exact p-value with zeroes"

#. R/chisq.test.R: warning("cannot compute simulated p-value with zero marginals")
#: R/chisq.test.R:0
msgid "cannot compute simulated p-value with zero marginals"
msgstr "cannot compute simulated p-value with zero marginals"

#. R/models.R: stop("cannot create a formula from a zero-column data frame")
#: R/models.R:0
msgid "cannot create a formula from a zero-column data frame"
msgstr "cannot create a formula from a zero-column data frame"

#. R/family.R: stop("cannot find valid starting values: please specify some")
#. R/glm.R: stop("cannot find valid starting values: please specify some",     call. = FALSE)
#: R/family.R:0 R/glm.R:0
msgid "cannot find valid starting values: please specify some"
msgstr "cannot find valid starting values: please specify some"

#. R/zzModels.R: stop("cannot fit an asymptotic regression model to these data")
#: R/zzModels.R:0
msgid "cannot fit an asymptotic regression model to these data"
msgstr "cannot fit an asymptotic regression model to these data"

#. R/HoltWinters.R: stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")
#: R/HoltWinters.R:0
msgid "cannot fit models without level ('alpha' must not be 0 or FALSE)"
msgstr "cannot fit models without level ('alpha' must not be 0 or FALSE)"

#. R/cor.R: stop("cannot handle 'pairwise.complete.obs'")
#: R/cor.R:0
msgid "cannot handle 'pairwise.complete.obs'"
msgstr "cannot handle 'pairwise.complete.obs'"

#. R/ts.R: stop("cannot plot more than 10 series as \"multiple\"")
#: R/ts.R:0
msgid "cannot plot more than 10 series as \"multiple\""
msgstr "cannot plot more than 10 series as \"multiple\""

#. R/nls-profile.R: stop("cannot recognize parameter name")
#: R/nls-profile.R:0
msgid "cannot recognize parameter name"
msgstr "cannot recognize parameter name"

#. R/prcomp.R: stop("cannot rescale a constant/zero column to unit variance")
#: R/prcomp.R:0
msgid "cannot rescale a constant/zero column to unit variance"
msgstr "cannot rescale a constant/zero column to unit variance"

#. R/family.R: stop("cannot simulate from non-integer prior.weights")
#: R/family.R:0
msgid "cannot simulate from non-integer prior.weights"
msgstr "cannot simulate from non-integer prior.weights"

#. R/princomp.R: stop("cannot use 'cor = TRUE' with a constant variable")
#: R/princomp.R:0
msgid "cannot use 'cor = TRUE' with a constant variable"
msgstr "cannot use 'cor = TRUE' with a constant variable"

#. R/t.test.R: stop("cannot use 'paired' in formula method")
#. R/wilcox.test.R: stop("cannot use 'paired' in formula method")
#: R/t.test.R:0 R/wilcox.test.R:0
msgid "cannot use 'paired' in formula method"
msgstr "cannot use 'paired' in formula method"

#. R/ftable.R: stop("cannot use dots in formula with given data")
#: R/ftable.R:0
msgid "cannot use dots in formula with given data"
msgstr "cannot use dots in formula with given data"

#. R/smspline.R: stop("cannot use more inner knots than unique 'x' values")
#: R/smspline.R:0
msgid "cannot use more inner knots than unique 'x' values"
msgstr "cannot use more inner knots than unique 'x' values"

#. R/kernel.R: stop("coefficients do not add to 1")
#: R/kernel.R:0
msgid "coefficients do not add to 1"
msgstr "coefficients do not add to 1"

#. R/approx.R: warning("collapsing to unique 'x' values")
#: R/approx.R:0
msgid "collapsing to unique 'x' values"
msgstr "collapsing to unique 'x' values"

#. R/dendrogram.R: stop("column dendrogram ordering gave index of wrong length")
#: R/dendrogram.R:0
msgid "column dendrogram ordering gave index of wrong length"
msgstr "column dendrogram ordering gave index of wrong length"

#. R/aov.R: stop("columns of 'contrast.obj' must define a contrast (sum to zero)")
#: R/aov.R:0
msgid "columns of 'contrast.obj' must define a contrast (sum to zero)"
msgstr "columns of 'contrast.obj' must define a contrast (sum to zero)"

#. R/aov.R: stop("columns of 'contrast.obj' must define a contrast(sum to zero)")
#: R/aov.R:0
msgid "columns of 'contrast.obj' must define a contrast(sum to zero)"
msgstr "columns of 'contrast.obj' must define a contrast(sum to zero)"

#. R/ks.test.R: warning("computation of exact probability failed, returning Monte Carlo approximation")
#: R/ks.test.R:0
msgid "computation of exact probability failed, returning Monte Carlo approximation"
msgstr "computation of exact probability failed, returning Monte Carlo approximation"

#. R/contrast.R: stop("contrasts apply only to factors")
#. R/contrast.R: stop("contrasts apply only to factors")
#: R/contrast.R:0
msgid "contrasts apply only to factors"
msgstr "contrasts apply only to factors"

#. R/contrast.R: stop("contrasts can be applied only to factors with 2 or more levels")
#: R/contrast.R:0
msgid "contrasts can be applied only to factors with 2 or more levels"
msgstr "contrasts can be applied only to factors with 2 or more levels"

#. R/models.R: gettextf("contrasts dropped from factor %s", nm)
#: R/models.R:0
msgid "contrasts dropped from factor %s"
msgstr "contrasts dropped from factor %s"

#. R/models.R: gettextf("contrasts dropped from factor %s due to missing levels",     nm)
#: R/models.R:0
msgid "contrasts dropped from factor %s due to missing levels"
msgstr "contrasts dropped from factor %s due to missing levels"

#. R/contr.poly.R: gettextf("contrasts not defined for %d degrees of freedom", n -     1)
#. R/contrast.R: gettextf("contrasts not defined for %d degrees of freedom", n -     1L)
#: R/contr.poly.R:0 R/contrast.R:0
msgid "contrasts not defined for %d degrees of freedom"
msgstr "contrasts not defined for %d degrees of freedom"

#. R/nlm.R: stop("convergence problem in zero finding: ", conditionMessage(val))
#: R/nlm.R:0
msgid "convergence problem in zero finding:"
msgstr "convergence problem in zero finding:"

#. R/arma0.R: warning("converting non-invertible initial MA values")
#: R/arma0.R:0
msgid "converting non-invertible initial MA values"
msgstr "converting non-invertible initial MA values"

#. R/princomp.R: stop("covariance matrix is not non-negative definite")
#: R/princomp.R:0
msgid "covariance matrix is not non-negative definite"
msgstr "covariance matrix is not non-negative definite"

#. R/spectrum.R: stop("coverage probability out of range [0,1)")
#: R/spectrum.R:0
msgid "coverage probability out of range [0,1)"
msgstr "coverage probability out of range [0,1)"

#. R/smspline.R: warning("cross-validation with non-unique 'x' values seems doubtful")
#: R/smspline.R:0
msgid "cross-validation with non-unique 'x' values seems doubtful"
msgstr "cross-validation with non-unique 'x' values seems doubtful"

#. R/t.test.R: stop("data are essentially constant")
#. R/t.test.R: stop("data are essentially constant")
#: R/t.test.R:0
msgid "data are essentially constant"
msgstr "data are essentially constant"

#. R/HoltWinters.R: stop("data must be non-zero for multiplicative Holt-Winters")
#: R/HoltWinters.R:0
msgid "data must be non-zero for multiplicative Holt-Winters"
msgstr "data must be non-zero for multiplicative Holt-Winters"

#. R/dendrogram.R: gettextf("dendrogram entries must be 1,2,..,%d (in any order), to be coercible to \"hclust\"",     n)
#: R/dendrogram.R:0
msgid "dendrogram entries must be 1,2,..,%d (in any order), to be coercible to \"hclust\""
msgstr "dendrogram entries must be 1,2,..,%d (in any order), to be coercible to \"hclust\""

#. R/dendrogram.R: stop("dendrogram node with non-positive #{branches}")
#: R/dendrogram.R:0
msgid "dendrogram node with non-positive #{branches}"
msgstr "dendrogram node with non-positive #{branches}"

#. R/dendrogram.R: stop("dendrogram non-leaf node with non-positive #{branches}")
#: R/dendrogram.R:0
msgid "dendrogram non-leaf node with non-positive #{branches}"
msgstr "dendrogram non-leaf node with non-positive #{branches}"

#. R/model.tables.R: stop("design is unbalanced so cannot proceed")
#: R/model.tables.R:0
msgid "design is unbalanced so cannot proceed"
msgstr "design is unbalanced so cannot proceed"

#. R/smspline.R: stop("df.offset must be numeric and >= 0")
#: R/smspline.R:0
#, fuzzy
msgid "df.offset must be numeric and >= 0"
msgstr "'offset' must be numeric"

#. R/cor.R: warning("diag(V) had non-positive or NA entries; the non-finite result may be dubious")
#: R/cor.R:0
#, fuzzy
msgid "diag(V) had non-positive or NA entries; the non-finite result may be dubious"
msgstr "diag(.) had 0 or NA entries; non-finite result is doubtful"

#. R/nlm.R: if (doX) "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0" else "f() values at end points not of opposite sign"
#: R/nlm.R:0
msgid "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0"
msgstr "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0"

#. R/cancor.R: stop("dimension 0 in 'x' or 'y'")
#: R/cancor.R:0
msgid "dimension 0 in 'x' or 'y'"
msgstr "dimension 0 in 'x' or 'y'"

#. R/cmdscale.R: stop("distances must be result of 'dist' or a square matrix")
#: R/cmdscale.R:0
msgid "distances must be result of 'dist' or a square matrix"
msgstr "distances must be result of 'dist' or a square matrix"

#. R/mantelhaen.test.R: stop("each dimension in table must be >= 2")
#: R/mantelhaen.test.R:0
msgid "each dimension in table must be >= 2"
msgstr "each dimension in table must be >= 2"

#. R/aov.R: gettextf("each element of '%s' must be logical", substitute(contrasts.list))
#. R/aov.R: gettextf("each element of '%s' must be logical", substitute(contrasts.obj))
#: R/aov.R:0
msgid "each element of '%s' must be logical"
msgstr "each element of '%s' must be logical"

#. R/model.tables.R: stop("eff.aovlist: non-orthogonal contrasts would give an incorrect answer")
#: R/model.tables.R:0
msgid "eff.aovlist: non-orthogonal contrasts would give an incorrect answer"
msgstr "eff.aovlist: non-orthogonal contrasts would give an incorrect answer"

#. R/cmdscale.R: warning("eig=TRUE is disregarded when list.=FALSE")
#: R/cmdscale.R:0
msgid "eig=TRUE is disregarded when list.=FALSE"
msgstr "eig=TRUE is disregarded when list.=FALSE"

#. R/cutree.R: stop("either 'k' or 'h' must be specified")
#: R/cutree.R:0
msgid "either 'k' or 'h' must be specified"
msgstr "either 'k' or 'h' must be specified"

#. R/cutree.R: gettextf("elements of 'k' must be between 1 and %d", n)
#: R/cutree.R:0
msgid "elements of 'k' must be between 1 and %d"
msgstr "elements of 'k' must be between 1 and %d"

#. R/prop.test.R: stop("elements of 'n' must be positive")
#: R/prop.test.R:0
msgid "elements of 'n' must be positive"
msgstr "elements of 'n' must be positive"

#. R/prop.test.R: stop("elements of 'p' must be in (0,1)")
#: R/prop.test.R:0
msgid "elements of 'p' must be in (0,1)"
msgstr "elements of 'p' must be in (0,1)"

#. R/prop.test.R: stop("elements of 'x' must be nonnegative")
#: R/prop.test.R:0
msgid "elements of 'x' must be nonnegative"
msgstr "elements of 'x' must be nonnegative"

#. R/prop.test.R: stop("elements of 'x' must not be greater than those of 'n'")
#: R/prop.test.R:0
msgid "elements of 'x' must not be greater than those of 'n'"
msgstr "elements of 'x' must not be greater than those of 'n'"

#. R/kmeans.R: stop("empty cluster: try a better set of initial centers", call. = FALSE)
#. R/kmeans.R: warning("empty cluster: try a better set of initial centers",     call. = FALSE)
#. R/kmeans.R: warning("empty cluster: try a better set of initial centers",     call. = FALSE)
#: R/kmeans.R:0
msgid "empty cluster: try a better set of initial centers"
msgstr "empty cluster: try a better set of initial centres"

#. R/ARMAtheory.R: stop("empty model supplied")
#: R/ARMAtheory.R:0
msgid "empty model supplied"
msgstr "empty model supplied"

#. R/lm.R: warning("essentially perfect fit: summary may be unreliable")
#: R/lm.R:0
msgid "essentially perfect fit: summary may be unreliable"
msgstr "essentially perfect fit: summary may be unreliable"

#. R/power.anova.test.R: stop("exactly one of 'groups', 'n', 'between.var', 'within.var', 'power', and 'sig.level' must be NULL")
#: R/power.anova.test.R:0
msgid "exactly one of 'groups', 'n', 'between.var', 'within.var', 'power', and 'sig.level' must be NULL"
msgstr "exactly one of 'groups', 'n', 'between.var', 'within.var', 'power', and 'sig.level' must be NULL"

#. R/power.R: stop("exactly one of 'n', 'delta', 'sd', 'power', and 'sig.level' must be NULL")
#: R/power.R:0
msgid "exactly one of 'n', 'delta', 'sd', 'power', and 'sig.level' must be NULL"
msgstr "exactly one of 'n', 'delta', 'sd', 'power', and 'sig.level' must be NULL"

#. R/power.R: stop("exactly one of 'n', 'p1', 'p2', 'power', and 'sig.level' must be NULL")
#: R/power.R:0
msgid "exactly one of 'n', 'p1', 'p2', 'power', and 'sig.level' must be NULL"
msgstr "exactly one of 'n', 'p1', 'p2', 'power', and 'sig.level' must be NULL"

#. R/ts.R: warning("extending time series when replacing values", call. = FALSE)
#: R/ts.R:0
msgid "extending time series when replacing values"
msgstr "extending time series when replacing values"

#. R/logLik.R: warning("extra arguments discarded")
#: R/logLik.R:0
msgid "extra arguments discarded"
msgstr "extra arguments discarded"

#. R/nlm.R: if (doX) "did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0" else "f() values at end points not of opposite sign"
#: R/nlm.R:0
msgid "f() values at end points not of opposite sign"
msgstr "f() values at end points not of opposite sign"

#. R/nlm.R: stop("f.lower = f(lower) is NA")
#: R/nlm.R:0
msgid "f.lower = f(lower) is NA"
msgstr "f.lower = f(lower) is NA"

#. R/nlm.R: stop("f.upper = f(upper) is NA")
#: R/nlm.R:0
msgid "f.upper = f(upper) is NA"
msgstr "f.upper = f(upper) is NA"

#. R/factanal.R: stop("factor analysis applies only to numerical variables")
#. R/factanal.R: stop("factor analysis applies only to numerical variables")
#: R/factanal.R:0
msgid "factor analysis applies only to numerical variables"
msgstr "factor analysis applies only to numerical variables"

#. R/factanal.R: stop("factor analysis requires at least three variables")
#: R/factanal.R:0
msgid "factor analysis requires at least three variables"
msgstr "factor analysis requires at least three variables"

#. R/reshape.R: stop("failed to guess time-varying variables from their names")
#: R/reshape.R:0
msgid "failed to guess time-varying variables from their names"
msgstr "failed to guess time-varying variables from their names"

#. R/lm.R: gettextf("family '%s' not implemented", fam)
#: R/lm.R:0
msgid "family '%s' not implemented"
msgstr "family '%s' not implemented"

#. R/loess.R: stop("first argument must be a \"loess\" object")
#: R/loess.R:0
msgid "first argument must be a \"loess\" object"
msgstr "first argument must be a \"loess\" object"

#. R/glm.R: warning("fitting to calculate the null deviance did not converge -- increase 'maxit'?")
#: R/glm.R:0
msgid "fitting to calculate the null deviance did not converge -- increase 'maxit'?"
msgstr "fitting to calculate the null deviance did not converge -- increase 'maxit'?"

#. R/family.R: gettextf("for the '%s' family, y must be a vector of 0 and 1's\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures",     FAMILY)
#: R/family.R:0
msgid ""
"for the '%s' family, y must be a vector of 0 and 1's\n"
"or a 2 column matrix where col 1 is no. successes and col 2 is no. failures"
msgstr ""
"for the '%s' family, y must be a vector of 0 and 1's\n"
"or a 2 column matrix where col 1 is no. successes and col 2 is no. failures"

#. R/nlsFunc.R: gettextf("formula '%s' must be of the form '~expr'", deparse1(object))
#: R/nlsFunc.R:0
msgid "formula '%s' must be of the form '~expr'"
msgstr "formula '%s' must be of the form '~expr'"

#. R/aggregate.R: stop("formula 'x' must have both left and right hand sides")
#: R/aggregate.R:0
msgid "formula 'x' must have both left and right hand sides"
msgstr "formula 'x' must have both left and right hand sides"

#. R/friedman.test.R: stop("formula missing")
#: R/friedman.test.R:0
msgid "formula missing"
msgstr "formula missing"

#. R/StructTS.R: stop("frequency must be a positive integer >= 2 for BSM")
#: R/StructTS.R:0
msgid "frequency must be a positive integer >= 2 for BSM"
msgstr "frequency must be a positive integer >= 2 for BSM"

#. R/glm.R: warning("glm.fit: algorithm did not converge", call. = FALSE)
#: R/glm.R:0
msgid "glm.fit: algorithm did not converge"
msgstr "glm.fit: algorithm did not converge"

#. R/glm.R: warning("glm.fit: algorithm stopped at boundary value", call. = FALSE)
#: R/glm.R:0
msgid "glm.fit: algorithm stopped at boundary value"
msgstr "glm.fit: algorithm stopped at boundary value"

#. R/glm.R: warning("glm.fit: fitted probabilities numerically 0 or 1 occurred",     call. = FALSE)
#: R/glm.R:0
msgid "glm.fit: fitted probabilities numerically 0 or 1 occurred"
msgstr "glm.fit: fitted probabilities numerically 0 or 1 occurred"

#. R/glm.R: warning("glm.fit: fitted rates numerically 0 occurred", call. = FALSE)
#: R/glm.R:0
msgid "glm.fit: fitted rates numerically 0 occurred"
msgstr "glm.fit: fitted rates numerically 0 occurred"

#. R/ansari.test.R: stop("grouping factor must have exactly 2 levels")
#. R/ks.test.R: stop("grouping factor must have exactly 2 levels")
#. R/mood.test.R: stop("grouping factor must have exactly 2 levels")
#. R/t.test.R: stop("grouping factor must have exactly 2 levels")
#. R/var.test.R: stop("grouping factor must have exactly 2 levels")
#. R/wilcox.test.R: stop("grouping factor must have exactly 2 levels")
#: R/ansari.test.R:0 R/ks.test.R:0 R/mood.test.R:0 R/t.test.R:0 R/var.test.R:0
#: R/wilcox.test.R:0
msgid "grouping factor must have exactly 2 levels"
msgstr "grouping factor must have exactly 2 levels"

#. R/plot.lm.R: gettextf("hat values (leverages) are all = %s\n and there are no factor predictors; no plot no. 5",     format(mean(r.hat)))
#: R/plot.lm.R:0
msgid ""
"hat values (leverages) are all = %s\n"
" and there are no factor predictors; no plot no. 5"
msgstr ""
"hat values (leverages) are all = %s\n"
" and there are no factor predictors; no plot no. 5"

#. R/fisher.test.R: stop("if 'x' is not a matrix, 'y' must be given")
#. R/mcnemar.test.R: stop("if 'x' is not a matrix, 'y' must be given")
#: R/fisher.test.R:0 R/mcnemar.test.R:0
msgid "if 'x' is not a matrix, 'y' must be given"
msgstr "if 'x' is not a matrix, 'y' must be given"

#. R/mantelhaen.test.R: stop("if 'x' is not an array, 'y' must be given")
#: R/mantelhaen.test.R:0
msgid "if 'x' is not an array, 'y' must be given"
msgstr "if 'x' is not an array, 'y' must be given"

#. R/mantelhaen.test.R: stop("if 'x' is not an array, 'z' must be given")
#: R/mantelhaen.test.R:0
msgid "if 'x' is not an array, 'z' must be given"
msgstr "if 'x' is not an array, 'z' must be given"

#. R/arima.R: stop("if not a list, 'seasonal' must be a non-negative numeric vector of length 3")
#. R/arma0.R: stop("if not a list, 'seasonal' must be a non-negative numeric vector of length 3")
#: R/arima.R:0 R/arma0.R:0
#, fuzzy
msgid "if not a list, 'seasonal' must be a non-negative numeric vector of length 3"
msgstr "'seasonal$order' must be a non-negative numeric vector of length 3"

#. R/family.R: warning("ignoring prior weights")
#: R/family.R:0
msgid "ignoring prior weights"
msgstr "ignoring prior weights"

#. R/lm.R: stop("incompatible dimensions")
#. R/lm.R: stop("incompatible dimensions")
#: R/lm.R:0
msgid "incompatible dimensions"
msgstr "incompatible dimensions"

#. R/ts.R: stop("inconsistent specification of 'ar' order")
#: R/ts.R:0
msgid "inconsistent specification of 'ar' order"
msgstr "inconsistent specification of 'ar' order"

#. R/ts.R: stop("inconsistent specification of 'ma' order")
#: R/ts.R:0
msgid "inconsistent specification of 'ma' order"
msgstr "inconsistent specification of 'ma' order"

#. R/diffinv.R: stop("incorrect dimensions for 'xi'")
#: R/diffinv.R:0
msgid "incorrect dimensions for 'xi'"
msgstr "incorrect dimensions for 'xi'"

#. R/binom.test.R: stop("incorrect length of 'x'")
#: R/binom.test.R:0
msgid "incorrect length of 'x'"
msgstr "incorrect length of 'x'"

#. R/ftable.R: stop("incorrect specification for 'col.vars'")
#. R/ftable.R: stop("incorrect specification for 'col.vars'")
#: R/ftable.R:0
msgid "incorrect specification for 'col.vars'"
msgstr "incorrect specification for 'col.vars'"

#. R/friedman.test.R: stop("incorrect specification for 'formula'")
#. R/quade.test.R: stop("incorrect specification for 'formula'")
#: R/friedman.test.R:0 R/quade.test.R:0
msgid "incorrect specification for 'formula'"
msgstr "incorrect specification for 'formula'"

#. R/ftable.R: stop("incorrect specification for 'row.vars'")
#. R/ftable.R: stop("incorrect specification for 'row.vars'")
#: R/ftable.R:0
msgid "incorrect specification for 'row.vars'"
msgstr "incorrect specification for 'row.vars'"

#. R/ftable.R: stop("incorrect variable names in lhs of formula")
#: R/ftable.R:0
msgid "incorrect variable names in lhs of formula"
msgstr "incorrect variable names in lhs of formula"

#. R/ftable.R: stop("incorrect variable names in rhs of formula")
#: R/ftable.R:0
msgid "incorrect variable names in rhs of formula"
msgstr "incorrect variable names in rhs of formula"

#. R/bandwidths.R: gettextf("increasing bw.SJ() search interval (%d) to [%.4g,%.4g]",     itry, lower, upper)
#: R/bandwidths.R:0
msgid "increasing bw.SJ() search interval (%d) to [%.4g,%.4g]"
msgstr "increasing bw.SJ() search interval (%d) to [%.4g,%.4g]"

#. R/kmeans.R: stop("initial centers are not distinct")
#: R/kmeans.R:0
msgid "initial centers are not distinct"
msgstr "initial centres are not distinct"

#. R/constrOptim.R: stop("initial value is not in the interior of the feasible region")
#: R/constrOptim.R:0
msgid "initial value is not in the interior of the feasible region"
msgstr "initial value is not in the interior of the feasible region"

#. R/glm.R: stop("inner loop 1; cannot correct step size", call. = FALSE)
#: R/glm.R:0
msgid "inner loop 1; cannot correct step size"
msgstr "inner loop 1; cannot correct step size"

#. R/glm.R: stop("inner loop 2; cannot correct step size", call. = FALSE)
#: R/glm.R:0
msgid "inner loop 2; cannot correct step size"
msgstr "inner loop 2; cannot correct step size"

#. R/ftable.R: stop("interactions are not allowed")
#. R/xtabs.R: stop("interactions are not allowed")
#: R/ftable.R:0 R/xtabs.R:0
msgid "interactions are not allowed"
msgstr "interactions are not allowed"

#. R/nls.R: stop("invalid  'attr(rhs, \"gradient\")'")
#: R/nls.R:0
msgid "invalid  'attr(rhs, \"gradient\")'"
msgstr "invalid  'attr(rhs, \"gradient\")'"

#. R/arima.R: stop("invalid 'SSinit'")
#: R/arima.R:0
msgid "invalid 'SSinit'"
msgstr "invalid 'SSinit'"

#. R/symnum.R: stop("invalid 'abbr.colnames'")
#: R/symnum.R:0
msgid "invalid 'abbr.colnames'"
msgstr "invalid 'abbr.colnames'"

#. R/loess.R: stop("invalid 'control' argument")
#: R/loess.R:0
msgid "invalid 'control' argument"
msgstr "invalid 'control' argument"

#. R/smspline.R: stop("invalid 'control.spar'")
#: R/smspline.R:0
msgid "invalid 'control.spar'"
msgstr "invalid 'control.spar'"

#. R/models.R: stop("invalid 'data' argument")
#: R/models.R:0
msgid "invalid 'data' argument"
msgstr "invalid 'data' argument"

#. R/smooth.R: stop("invalid 'endrule' argument")
#: R/smooth.R:0
msgid "invalid 'endrule' argument"
msgstr "invalid 'endrule' argument"

#. R/nlm.R: stop("invalid 'extendInt'; please report")
#: R/nlm.R:0
msgid "invalid 'extendInt'; please report"
msgstr "invalid 'extendInt'; please report"

#. R/smspline.R: stop("invalid 'keep.stuff'")
#: R/smspline.R:0
msgid "invalid 'keep.stuff'"
msgstr "invalid 'keep.stuff'"

#. R/lm.R: stop("invalid 'lm' object:  no 'terms' component")
#: R/lm.R:0
msgid "invalid 'lm' object:  no 'terms' component"
msgstr "invalid 'lm' object:  no 'terms' component"

#. R/glm.R: stop("invalid 'method' argument")
#: R/glm.R:0
msgid "invalid 'method' argument"
msgstr "invalid 'method' argument"

#. R/bandwidths.R: stop("invalid 'nb'")
#. R/bandwidths.R: stop("invalid 'nb'")
#. R/bandwidths.R: stop("invalid 'nb'")
#: R/bandwidths.R:0
msgid "invalid 'nb'"
msgstr "invalid 'nb'"

#. R/cutree.R: stop("invalid 'tree' ('merge' component)")
#: R/cutree.R:0
msgid "invalid 'tree' ('merge' component)"
msgstr "invalid 'tree' ('merge' component)"

#. R/cor.R: stop("invalid 'use' argument")
#. R/cor.R: stop("invalid 'use' argument")
#. R/cor.R: stop("invalid 'use' argument")
#: R/cor.R:0
msgid "invalid 'use' argument"
msgstr "invalid 'use' argument"

#. R/bandwidths.R: stop("invalid 'x'")
#. R/bandwidths.R: stop("invalid 'x'")
#. R/bandwidths.R: stop("invalid 'x'")
#. R/chisq.test.R: stop("invalid 'x'")
#. R/loess.R: stop("invalid 'x'")
#: R/bandwidths.R:0 R/chisq.test.R:0 R/loess.R:0
msgid "invalid 'x'"
msgstr "invalid 'x'"

#. R/loess.R: stop("invalid 'y'")
#: R/loess.R:0
msgid "invalid 'y'"
msgstr "invalid 'y'"

#. R/dendrogram.R: stop("invalid (length 0) node in dendrogram")
#: R/dendrogram.R:0
msgid "invalid (length 0) node in dendrogram"
msgstr "invalid (length 0) node in dendrogram"

#. R/loess.R: stop("invalid NCOL(X)")
#: R/loess.R:0
msgid "invalid NCOL(X)"
msgstr "invalid NCOL(X)"

#. R/loess.R: stop("invalid NROW(X)")
#: R/loess.R:0
msgid "invalid NROW(X)"
msgstr "invalid NROW(X)"

#. R/r2dtable.R: stop("invalid argument 'c'")
#: R/r2dtable.R:0
msgid "invalid argument 'c'"
msgstr "invalid argument 'c'"

#. R/loess.R: stop("invalid argument 'cell'")
#: R/loess.R:0
msgid "invalid argument 'cell'"
msgstr "invalid argument 'cell'"

#. R/loess.R: stop("invalid argument 'degree'")
#: R/loess.R:0
msgid "invalid argument 'degree'"
msgstr "invalid argument 'degree'"

#. R/family.R: stop("invalid argument 'lambda'")
#: R/family.R:0
msgid "invalid argument 'lambda'"
msgstr "invalid argument 'lambda'"

#. R/r2dtable.R: stop("invalid argument 'n'")
#: R/r2dtable.R:0
msgid "invalid argument 'n'"
msgstr "invalid argument 'n'"

#. R/nafns.R: stop("invalid argument 'omit'")
#: R/nafns.R:0
msgid "invalid argument 'omit'"
msgstr "invalid argument 'omit'"

#. R/r2dtable.R: stop("invalid argument 'r'")
#: R/r2dtable.R:0
msgid "invalid argument 'r'"
msgstr "invalid argument 'r'"

#. R/loess.R: stop("invalid argument 'span'")
#: R/loess.R:0
msgid "invalid argument 'span'"
msgstr "invalid argument 'span'"

#. R/nls-profile.R: stop("invalid argument to 'getProfile'")
#: R/nls-profile.R:0
msgid "invalid argument to 'getProfile'"
msgstr "invalid argument to 'getProfile'"

#. R/ks.test.R: stop("invalid arguments")
#: R/ks.test.R:0
msgid "invalid arguments"
msgstr "invalid arguments"

#. R/hclust.R: stop("invalid clustering method", paste("", method))
#: R/hclust.R:0
msgid "invalid clustering method"
msgstr "invalid clustering method"

#. R/hclust.R: stop("invalid dissimilarities")
#: R/hclust.R:0
msgid "invalid dissimilarities"
msgstr "invalid dissimilarities"

#. R/dist.R: stop("invalid distance method")
#: R/dist.R:0
msgid "invalid distance method"
msgstr "invalid distance method"

#. R/glm.R: stop("invalid fitted means in empty model", call. = FALSE)
#: R/glm.R:0
msgid "invalid fitted means in empty model"
msgstr "invalid fitted means in empty model"

#. R/cor.test.R: stop("invalid formula")
#. R/models.R: stop("invalid formula")
#: R/cor.test.R:0 R/models.R:0
msgid "invalid formula"
msgstr "invalid formula"

#. R/models.R: gettextf("invalid formula %s", deparse2(x))
#: R/models.R:0
msgid "invalid formula %s"
msgstr "invalid formula %s"

#. R/models.R: gettextf("invalid formula %s: assignment is deprecated", deparse2(x))
#: R/models.R:0
msgid "invalid formula %s: assignment is deprecated"
msgstr "invalid formula %s: assignment is deprecated"

#. R/models.R: gettextf("invalid formula %s: extraneous call to `%s` is deprecated",     deparse2(x), as.character(c.))
#: R/models.R:0
msgid "invalid formula %s: extraneous call to `%s` is deprecated"
msgstr "invalid formula %s: extraneous call to `%s` is deprecated"

#. R/models.R: gettextf("invalid formula %s: not a call", deparse2(x))
#: R/models.R:0
msgid "invalid formula %s: not a call"
msgstr "invalid formula %s: not a call"

#. R/deriv.R: stop("invalid formula in deriv")
#. R/deriv.R: stop("invalid formula in deriv")
#: R/deriv.R:0
msgid "invalid formula in deriv"
msgstr "invalid formula in deriv"

#. R/models.R: gettextf("invalid formula: %s", deparse2(x))
#: R/models.R:0
msgid "invalid formula: %s"
msgstr "invalid formula: %s"

#. R/approx.R: stop("invalid interpolation method")
#. R/approx.R: stop("invalid interpolation method")
#. R/spline.R: stop("invalid interpolation method")
#: R/approx.R:0 R/spline.R:0
msgid "invalid interpolation method"
msgstr "invalid interpolation method"

#. R/hclust.R: stop("invalid length of members")
#: R/hclust.R:0
msgid "invalid length of members"
msgstr "invalid length of members"

#. R/HoltWinters.R: stop("invalid length(x)")
#. R/approx.R: stop("invalid length(x)")
#. R/approx.R: stop("invalid length(x)")
#. R/bandwidths.R: stop("invalid length(x)")
#. R/bandwidths.R: stop("invalid length(x)")
#. R/bandwidths.R: stop("invalid length(x)")
#. R/stl.R: stop("invalid length(x)")
#: R/HoltWinters.R:0 R/approx.R:0 R/bandwidths.R:0 R/stl.R:0
msgid "invalid length(x)"
msgstr "invalid length(x)"

#. R/glm.R: stop("invalid linear predictor values in empty model", call. = FALSE)
#: R/glm.R:0
msgid "invalid linear predictor values in empty model"
msgstr "invalid linear predictor values in empty model"

#. R/lm.influence.R: stop("invalid model QR matrix")
#: R/lm.influence.R:0
msgid "invalid model QR matrix"
msgstr "invalid model QR matrix"

#. R/kmeans.R: stop("invalid ncol(x)")
#: R/kmeans.R:0
msgid "invalid ncol(x)"
msgstr "invalid ncol(x)"

#. R/kmeans.R: stop("invalid nrow(x)")
#: R/kmeans.R:0
msgid "invalid nrow(x)"
msgstr "invalid nrow(x)"

#. R/smspline.R: stop("invalid number of points")
#: R/smspline.R:0
msgid "invalid number of points"
msgstr "invalid number of points"

#. R/integrate.R: stop("invalid parameter values")
#: R/integrate.R:0
msgid "invalid parameter values"
msgstr "invalid parameter values"

#. R/models.R: stop("invalid response type")
#: R/models.R:0
msgid "invalid response type"
msgstr "invalid response type"

#. R/cmdscale.R: gettextf("invalid value of %s", "'n'")
#. R/density.R: gettextf("invalid value of %s", "length(x)")
#. R/diffinv.R: gettextf("invalid value of %s", "length(x)")
#. R/filter.R: gettextf("invalid value of %s", "NROW(x)")
#. R/filter.R: gettextf("invalid value of %s", "length(filter)")
#. R/kmeans.R: gettextf("invalid value of %s", "'k'")
#. R/runmed.R: gettextf("invalid value of %s", "length(x)")
#. R/runmed.R: gettextf("invalid value of %s", "'k'")
#. R/spline.R: gettextf("invalid value of %s", "length(x)")
#. R/splinefun.R: gettextf("invalid value of %s", "length(x)")
#: R/cmdscale.R:0 R/density.R:0 R/diffinv.R:0 R/filter.R:0 R/kmeans.R:0
#: R/runmed.R:0 R/spline.R:0 R/splinefun.R:0
msgid "invalid value of %s"
msgstr "invalid value of %s"

#. R/loess.R: gettext("iterTrace = %d is not obeyed since iterations = %d")
#: R/loess.R:0
msgid "iterTrace = %d is not obeyed since iterations = %d"
msgstr "iterTrace = %d is not obeyed since iterations = %d"

#. R/identify.hclust.R: gettextf("k must be between 2 and %d", length(tree$height))
#: R/identify.hclust.R:0
msgid "k must be between 2 and %d"
msgstr "k must be between 2 and %d"

#. R/fft.R: stop("length mismatch in convolution")
#: R/fft.R:0
msgid "length mismatch in convolution"
msgstr "length mismatch in convolution"

#. R/cov.wt.R: stop("length of 'center' must equal the number of columns in 'x'")
#: R/cov.wt.R:0
msgid "length of 'center' must equal the number of columns in 'x'"
msgstr "length of 'center' must equal the number of columns in 'x'"

#. R/filter.R: stop("length of 'init' must equal length of 'filter'")
#: R/filter.R:0
msgid "length of 'init' must equal length of 'filter'"
msgstr "length of 'init' must equal length of 'filter'"

#. R/spectrum.R: stop("length of 'p' must be 1 or equal the number of columns of 'x'")
#: R/spectrum.R:0
msgid "length of 'p' must be 1 or equal the number of columns of 'x'"
msgstr "length of 'p' must be 1 or equal the number of columns of 'x'"

#. R/glm.R: gettextf("length of 'start' should equal %d and correspond to initial coefs for %s",     nvars, paste(deparse(xnames), collapse = ", "))
#: R/glm.R:0
msgid "length of 'start' should equal %d and correspond to initial coefs for %s"
msgstr "length of 'start' should equal %d and correspond to initial coefs for %s"

#. R/reshape.R: stop("length of 'v.names' does not evenly divide length of 'varying'")
#: R/reshape.R:0
msgid "length of 'v.names' does not evenly divide length of 'varying'"
msgstr "length of 'v.names' does not evenly divide length of 'varying'"

#. R/reshape.R: stop("length of 'varying' must be the product of length of 'v.names' and length of 'times'")
#: R/reshape.R:0
msgid "length of 'varying' must be the product of length of 'v.names' and length of 'times'"
msgstr "length of 'varying' must be the product of length of 'v.names' and length of 'times'"

#. R/cov.wt.R: stop("length of 'wt' must equal the number of rows in 'x'")
#: R/cov.wt.R:0
msgid "length of 'wt' must equal the number of rows in 'x'"
msgstr "length of 'wt' must equal the number of rows in 'x'"

#. R/addmargins.R: gettextf("length of FUN, %d,\n does not match the length of the margins, %d",     length(FUN), n.sid)
#: R/addmargins.R:0
msgid ""
"length of FUN, %d,\n"
" does not match the length of the margins, %d"
msgstr ""
"length of FUN, %d,\n"
" does not match the length of the margins, %d"

#. R/biplot.R: stop("length of choices must be 2")
#. R/biplot.R: stop("length of choices must be 2")
#: R/biplot.R:0
msgid "length of choices must be 2"
msgstr "length of choices must be 2"

#. R/smspline.R: stop("lengths of 'x' and 'w' must match")
#: R/smspline.R:0
msgid "lengths of 'x' and 'w' must match"
msgstr "lengths of 'x' and 'w' must match"

#. R/arima.R: stop("lengths of 'x' and 'xreg' do not match")
#. R/arma0.R: stop("lengths of 'x' and 'xreg' do not match")
#: R/arima.R:0 R/arma0.R:0
msgid "lengths of 'x' and 'xreg' do not match"
msgstr "lengths of 'x' and 'xreg' do not match"

#. R/nls-profile.R: warning("levels truncated to positive values only")
#: R/nls-profile.R:0
msgid "levels truncated to positive values only"
msgstr "levels truncated to positive values only"

#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#. R/family.R: gettextf("link \"%s\" not available for %s family; available links are %s",     linktemp, family, paste(sQuote(okLinks), collapse = ", "))
#: R/family.R:0
msgid "link \"%s\" not available for %s family; available links are %s"
msgstr "link \"%s\" not available for %s family; available links are %s"

#. R/lm.R: stop("lm object does not have a proper 'qr' component.\n Rank zero or should not have used lm(.., qr=FALSE).")
#: R/lm.R:0
msgid ""
"lm object does not have a proper 'qr' component.\n"
" Rank zero or should not have used lm(.., qr=FALSE)."
msgstr ""
"lm object does not have a proper 'qr' component.\n"
" Rank zero or should not have used lm(.., qr=FALSE)."

#. R/nlminb.R: stop("logical 'hessian' argument not allowed.  See documentation.")
#: R/nlminb.R:0
msgid "logical 'hessian' argument not allowed.  See documentation."
msgstr "logical 'hessian' argument not allowed.  See documentation."

#. R/nlm.R: stop("lower < upper  is not fulfilled")
#: R/nlm.R:0
msgid "lower < upper  is not fulfilled"
msgstr "lower < upper  is not fulfilled"

#. R/lm.R: message("lower-rank qr: determining non-estimable cases")
#: R/lm.R:0
msgid "lower-rank qr: determining non-estimable cases"
msgstr "lower-rank qr: determining non-estimable cases"

#. R/glm.R: stop("maximum number of iterations must be > 0")
#: R/glm.R:0
msgid "maximum number of iterations must be > 0"
msgstr "maximum number of iterations must be > 0"

#. R/optim.R: stop("method = \"Brent\" is only available for one-dimensional optimization")
#: R/optim.R:0
msgid "method = \"Brent\" is only available for one-dimensional optimization"
msgstr "method = \"Brent\" is only available for one-dimensional optimization"

#. R/lm.R: gettextf("method = '%s' is not supported. Using 'qr'", method)
#. R/lm.R: gettextf("method = '%s' is not supported. Using 'qr'", method)
#. R/lm.R: gettextf("method = '%s' is not supported. Using 'qr'", method)
#: R/lm.R:0
msgid "method = '%s' is not supported. Using 'qr'"
msgstr "method = '%s' is not supported. Using 'qr'"

#. R/optim.R: warning("method L-BFGS-B uses 'factr' (and 'pgtol') instead of 'reltol' and 'abstol'")
#: R/optim.R:0
msgid "method L-BFGS-B uses 'factr' (and 'pgtol') instead of 'reltol' and 'abstol'"
msgstr "method L-BFGS-B uses 'factr' (and 'pgtol') instead of 'reltol' and 'abstol'"

#. R/dendrogram.R: warning("midcache() of non-binary dendrograms only partly implemented")
#: R/dendrogram.R:0
msgid "midcache() of non-binary dendrograms only partly implemented"
msgstr "midcache() of non-binary dendrograms only partly implemented"

#. R/bandwidths.R: warning("minimum occurred at one end of the range")
#. R/bandwidths.R: warning("minimum occurred at one end of the range")
#: R/bandwidths.R:0
msgid "minimum occurred at one end of the range"
msgstr "minimum occurred at one end of the range"

#. R/ppr.R: stop("mismatched 'x' and 'weights'")
#: R/ppr.R:0
#, fuzzy
msgid "mismatched 'x' and 'weights'"
msgstr "mismatched 'x' and 'y'"

#. R/ppr.R: stop("mismatched 'x' and 'y'")
#: R/ppr.R:0
msgid "mismatched 'x' and 'y'"
msgstr "mismatched 'x' and 'y'"

#. R/lsfit.R: warning("missing observations deleted")
#: R/lsfit.R:0
msgid "missing observations deleted"
msgstr "missing observations deleted"

#. R/smspline.R: stop("missing or infinite values in inputs are not allowed")
#: R/smspline.R:0
msgid "missing or infinite values in inputs are not allowed"
msgstr "missing or infinite values in inputs are not allowed"

#. R/lm.R: stop("missing or negative weights not allowed")
#. R/nls.R: stop("missing or negative weights not allowed")
#: R/lm.R:0 R/nls.R:0
msgid "missing or negative weights not allowed"
msgstr "missing or negative weights not allowed"

#. R/quantile.R: stop("missing values and NaN's not allowed if 'na.rm' is FALSE")
#: R/quantile.R:0
msgid "missing values and NaN's not allowed if 'na.rm' is FALSE"
msgstr "missing values and NaN's not allowed if 'na.rm' is FALSE"

#. R/contr.poly.R: stop("missing values are not allowed in 'poly'")
#: R/contr.poly.R:0
msgid "missing values are not allowed in 'poly'"
msgstr "missing values are not allowed in 'poly'"

#. R/filter.R: stop("missing values in 'filter'")
#: R/filter.R:0
msgid "missing values in 'filter'"
msgstr "missing values in 'filter'"

#. R/nafns.R: stop("missing values in object")
#: R/nafns.R:0
msgid "missing values in object"
msgstr "missing values in object"

#. R/isoreg.R: stop("missing values not allowed")
#: R/isoreg.R:0
msgid "missing values not allowed"
msgstr "missing values not allowed"

#. R/models.R: stop("model frame and formula mismatch in model.matrix()")
#: R/models.R:0
msgid "model frame and formula mismatch in model.matrix()"
msgstr "model frame and formula mismatch in model.matrix()"

#. R/AIC.R: warning("models are not all fitted to the same number of observations")
#. R/AIC.R: warning("models are not all fitted to the same number of observations")
#: R/AIC.R:0
msgid "models are not all fitted to the same number of observations"
msgstr "models are not all fitted to the same number of observations"

#. R/glm.R: stop("models were not all fitted to the same size of dataset")
#. R/lm.R: stop("models were not all fitted to the same size of dataset")
#. R/mlm.R: stop("models were not all fitted to the same size of dataset")
#: R/glm.R:0 R/lm.R:0 R/mlm.R:0
msgid "models were not all fitted to the same size of dataset"
msgstr "models were not all fitted to the same size of dataset"

#. R/glm.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/lm.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/loess.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/mlm.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#. R/nls.R: gettextf("models with response %s removed because response differs from model 1",     sQuote(deparse(responses[!sameresp])))
#: R/glm.R:0 R/lm.R:0 R/loess.R:0 R/mlm.R:0 R/nls.R:0
msgid "models with response %s removed because response differs from model 1"
msgstr "models with response %s removed because response differs from model 1"

#. R/kmeans.R: stop("more cluster centers than data points")
#: R/kmeans.R:0
msgid "more cluster centers than data points"
msgstr "more cluster centres than data points"

#. R/kmeans.R: stop("more cluster centers than distinct data points.")
#: R/kmeans.R:0
msgid "more cluster centers than distinct data points."
msgstr "more cluster centres than distinct data points."

#. R/dummy.coef.R: stop("multivariate case with missing coefficients is not yet implemented")
#. R/dummy.coef.R: stop("multivariate case with missing coefficients is not yet implemented")
#: R/dummy.coef.R:0
msgid "multivariate case with missing coefficients is not yet implemented"
msgstr "multivariate case with missing coefficients is not yet implemented"

#. R/symnum.R: stop("must have 2 'symbols' for logical 'x' argument")
#: R/symnum.R:0
msgid "must have 2 'symbols' for logical 'x' argument"
msgstr "must have 2 'symbols' for logical 'x' argument"

#. R/zzModels.R: stop("must have at least 4 observations to fit an 'SSfol' model")
#: R/zzModels.R:0
msgid "must have at least 4 observations to fit an 'SSfol' model"
msgstr "must have at least 4 observations to fit an 'SSfol' model"

#. R/zzModels.R: stop("must have length of response = length of second argument to 'SSfol'")
#: R/zzModels.R:0
msgid "must have length of response = length of second argument to 'SSfol'"
msgstr "must have length of response = length of second argument to 'SSfol'"

#. R/hclust.R: stop("must have n >= 2 objects to cluster")
#: R/hclust.R:0
msgid "must have n >= 2 objects to cluster"
msgstr "must have n >= 2 objects to cluster"

#. R/kmeans.R: stop("must have same number of columns in 'x' and 'centers'")
#: R/kmeans.R:0
msgid "must have same number of columns in 'x' and 'centers'"
msgstr "must have same number of columns in 'x' and 'centers'"

#. R/smspline.R: stop("must not specify both 'spar' and 'lambda'")
#: R/smspline.R:0
msgid "must not specify both 'spar' and 'lambda'"
msgstr "must not specify both 'spar' and 'lambda'"

#. R/spectrum.R: stop("must specify 'spans' or a valid kernel")
#: R/spectrum.R:0
msgid "must specify 'spans' or a valid kernel"
msgstr "must specify 'spans' or a valid kernel"

#. R/xtabs.R: stop("must supply 'formula' or 'data'")
#: R/xtabs.R:0
#, fuzzy
msgid "must supply 'formula' or 'data'"
msgstr "must supply either 'formula' or 'data'"

#. R/contr.poly.R: stop("must supply one or more vectors")
#: R/contr.poly.R:0
msgid "must supply one or more vectors"
msgstr "must supply one or more vectors"

#. R/model.tables.R: stop("na.action must be a function")
#: R/model.tables.R:0
msgid "na.action must be a function"
msgstr "na.action must be a function"

#. R/fisher.test.R: stop("names(hybridPars) should be NULL or be identical to the default's")
#: R/fisher.test.R:0
msgid "names(hybridPars) should be NULL or be identical to the default's"
msgstr "names(hybridPars) should be NULL or be identical to the default's"

#. R/fisher.test.R: stop("need 2 or more non-zero column marginals")
#: R/fisher.test.R:0
msgid "need 2 or more non-zero column marginals"
msgstr "need 2 or more non-zero column marginals"

#. R/fisher.test.R: stop("need 2 or more non-zero row marginals")
#: R/fisher.test.R:0
msgid "need 2 or more non-zero row marginals"
msgstr "need 2 or more non-zero row marginals"

#. R/family.R: stop("need CRAN package 'SuppDists' for simulation from the 'inverse.gaussian' family")
#: R/family.R:0
msgid "need CRAN package 'SuppDists' for simulation from the 'inverse.gaussian' family"
msgstr "need CRAN package 'SuppDists' for simulation from the 'inverse.gaussian' family"

#. R/update.R: stop("need an object with call component")
#: R/update.R:0
msgid "need an object with call component"
msgstr "need an object with call component"

#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#. R/bandwidths.R: stop("need at least 2 data points")
#: R/bandwidths.R:0
msgid "need at least 2 data points"
msgstr "need at least 2 data points"

#. R/HoltWinters.R: stop("need at least 2 periods to compute seasonal start values")
#: R/HoltWinters.R:0
msgid "need at least 2 periods to compute seasonal start values"
msgstr "need at least 2 periods to compute seasonal start values"

#. R/density.R: stop("need at least 2 points to select a bandwidth automatically")
#: R/density.R:0
msgid "need at least 2 points to select a bandwidth automatically"
msgstr "need at least 2 points to select a bandwidth automatically"

#. R/smspline.R: stop("need at least four unique 'x' values")
#: R/smspline.R:0
msgid "need at least four unique 'x' values"
msgstr "need at least four unique 'x' values"

#. R/approx.R: stop("need at least two non-NA values to interpolate")
#. R/approx.R: stop("need at least two non-NA values to interpolate")
#: R/approx.R:0
msgid "need at least two non-NA values to interpolate"
msgstr "need at least two non-NA values to interpolate"

#. R/hclust.R: stop("need dendrograms where all leaves have labels")
#: R/hclust.R:0
msgid "need dendrograms where all leaves have labels"
msgstr "need dendrograms where all leaves have labels"

#. R/manova.R: stop("need multiple responses")
#. R/manova.R: stop("need multiple responses")
#. R/manova.R: stop("need multiple responses")
#: R/manova.R:0
msgid "need multiple responses"
msgstr "need multiple responses"

#. R/median.R: stop("need numeric data")
#: R/median.R:0
msgid "need numeric data"
msgstr "need numeric data"

#. R/smspline.R: stop("need result of smooth.spline(keep.data = TRUE)")
#. R/smspline.R: stop("need result of smooth.spline(keep.data = TRUE)")
#. R/smspline.R: stop("need result of smooth.spline(keep.data = TRUE)")
#: R/smspline.R:0
msgid "need result of smooth.spline(keep.data = TRUE)"
msgstr "need result of smooth.spline(keep.data = TRUE)"

#. R/family.R: stop("negative values not allowed for the 'Poisson' family")
#: R/family.R:0
msgid "negative values not allowed for the 'Poisson' family"
msgstr "negative values not allowed for the 'Poisson' family"

#. R/family.R: stop("negative values not allowed for the 'quasiPoisson' family")
#: R/family.R:0
msgid "negative values not allowed for the 'quasiPoisson' family"
msgstr "negative values not allowed for the 'quasiPoisson' family"

#. R/glm.R: stop("negative weights not allowed")
#. R/lsfit.R: stop("negative weights not allowed")
#: R/glm.R:0 R/lsfit.R:0
msgid "negative weights not allowed"
msgstr "negative weights not allowed"

#. R/factanal.R: stop("neither 'x' nor 'covmat' supplied")
#: R/factanal.R:0
msgid "neither 'x' nor 'covmat' supplied"
msgstr "neither 'x' nor 'covmat' supplied"

#. R/logLik.R: stop("no \"nobs\" attribute is available")
#: R/logLik.R:0
msgid "no \"nobs\" attribute is available"
msgstr "no \"nobs\" attribute is available"

#. R/add.R: stop("no 'add1' method implemented for \"mlm\" models")
#: R/add.R:0
msgid "no 'add1' method implemented for \"mlm\" models"
msgstr "no 'add1' method implemented for \"mlm\" models"

#. R/stepfun.R: stop("no 'as.stepfun' method available for 'x'")
#: R/stepfun.R:0
msgid "no 'as.stepfun' method available for 'x'"
msgstr "no 'as.stepfun' method available for 'x'"

#. R/add.R: stop("no 'drop1' method for \"mlm\" models")
#: R/add.R:0
msgid "no 'drop1' method for \"mlm\" models"
msgstr "no 'drop1' method for \"mlm\" models"

#. R/selfStart.R: gettextf("no 'getInitial' method found for \"%s\" objects", data.class(object))
#: R/selfStart.R:0
msgid "no 'getInitial' method found for \"%s\" objects"
msgstr "no 'getInitial' method found for \"%s\" objects"

#. R/logLik.R: warning("no 'nobs' method is available")
#. R/logLik.R: stop("no 'nobs' method is available")
#: R/logLik.R:0
msgid "no 'nobs' method is available"
msgstr "no 'nobs' method is available"

#. R/reshape.R: stop("no 'reshapeWide' attribute, must specify 'varying'")
#: R/reshape.R:0
msgid "no 'reshapeWide' attribute, must specify 'varying'"
msgstr "no 'reshapeWide' attribute, must specify 'varying'"

#. R/aov.R: stop("no degrees of freedom for residuals")
#: R/aov.R:0
msgid "no degrees of freedom for residuals"
msgstr "no degrees of freedom for residuals"

#. R/TukeyHSD.R: stop("no factors in the fitted model")
#: R/TukeyHSD.R:0
msgid "no factors in the fitted model"
msgstr "no factors in the fitted model"

#. R/smspline.R: stop("no finite observations")
#: R/smspline.R:0
msgid "no finite observations"
msgstr "no finite observations"

#. R/loess.R: stop("no models to compare")
#: R/loess.R:0
msgid "no models to compare"
msgstr "no models to compare"

#. R/glm.R: gettextf("no observations informative at iteration %d", iter)
#: R/glm.R:0
msgid "no observations informative at iteration %d"
msgstr "no observations informative at iteration %d"

#. R/nls.R: stop("no parameters to fit")
#: R/nls.R:0
msgid "no parameters to fit"
msgstr "no parameters to fit"

#. R/ts.R: stop("no replacement values supplied")
#: R/ts.R:0
msgid "no replacement values supplied"
msgstr "no replacement values supplied"

#. R/aggregate.R: stop("no rows to aggregate")
#: R/aggregate.R:0
msgid "no rows to aggregate"
msgstr "no rows to aggregate"

#. R/prcomp.R: stop("no scores are available: refit with 'retx=TRUE'")
#: R/prcomp.R:0
msgid "no scores are available: refit with 'retx=TRUE'"
msgstr "no scores are available: refit with 'retx=TRUE'"

#. R/nlm.R: gettextf("no sign change found in %d iterations", it - 1)
#. R/nlm.R: gettextf("no sign change found in %d iterations", it - 1)
#. R/nlm.R: gettextf("no sign change found in %d iterations", it - 1)
#: R/nlm.R:0
msgid "no sign change found in %d iterations"
msgstr "no sign change found in %d iterations"

#. R/bandwidths.R: stop("no solution in the specified range of bandwidths")
#: R/bandwidths.R:0
msgid "no solution in the specified range of bandwidths"
msgstr "no solution in the specified range of bandwidths"

#. R/nls.R: stop("no starting values specified")
#: R/nls.R:0
msgid "no starting values specified"
msgstr "no starting values specified"

#. R/factanal.R: stop("no starting values supplied")
#: R/factanal.R:0
msgid "no starting values supplied"
msgstr "no starting values supplied"

#. R/models.R: stop("no terms component nor attribute")
#: R/models.R:0
msgid "no terms component nor attribute"
msgstr "no terms component nor attribute"

#. R/add.R: stop("no terms in scope")
#. R/add.R: stop("no terms in scope")
#: R/add.R:0
msgid "no terms in scope"
msgstr "no terms in scope"

#. R/add.R: stop("no terms in scope for adding to object")
#. R/add.R: stop("no terms in scope for adding to object")
#. R/add.R: stop("no terms in scope for adding to object")
#: R/add.R:0
msgid "no terms in scope for adding to object"
msgstr "no terms in scope for adding to object"

#. R/ts.R: stop("no time series supplied")
#: R/ts.R:0
msgid "no time series supplied"
msgstr "no time series supplied"

#. R/glm.R: stop("no valid set of coefficients has been found: please supply starting values",     call. = FALSE)
#. R/glm.R: stop("no valid set of coefficients has been found: please supply starting values",     call. = FALSE)
#: R/glm.R:0
msgid "no valid set of coefficients has been found: please supply starting values"
msgstr "no valid set of coefficients has been found: please supply starting values"

#. R/lm.influence.R: stop("non-NA residual length does not match cases used in fitting")
#: R/lm.influence.R:0
msgid "non-NA residual length does not match cases used in fitting"
msgstr "non-NA residual length does not match cases used in fitting"

#. R/model.tables.R: gettextf("non-factors ignored: %s", paste(names(nn), collapse = ", "))
#: R/model.tables.R:0
msgid "non-factors ignored: %s"
msgstr "non-factors ignored: %s"

#. R/density.R: stop("non-finite 'bw'")
#: R/density.R:0
msgid "non-finite 'bw'"
msgstr "non-finite 'bw'"

#. R/density.R: stop("non-finite 'from'")
#: R/density.R:0
msgid "non-finite 'from'"
msgstr "non-finite 'from'"

#. R/density.R: stop("non-finite 'to'")
#: R/density.R:0
msgid "non-finite 'to'"
msgstr "non-finite 'to'"

#. R/glm.R: gettextf("non-finite coefficients at iteration %d", iter)
#: R/glm.R:0
msgid "non-finite coefficients at iteration %d"
msgstr "non-finite coefficients at iteration %d"

#. R/family.R: gettextf("non-integer #successes in a %s glm!", FAMILY)
#: R/family.R:0
msgid "non-integer #successes in a %s glm!"
msgstr "non-integer #successes in a %s glm!"

#. R/family.R: gettextf("non-integer counts in a %s glm!", FAMILY)
#: R/family.R:0
msgid "non-integer counts in a %s glm!"
msgstr "non-integer counts in a %s glm!"

#. R/ts.R: warning("non-intersecting series")
#: R/ts.R:0
msgid "non-intersecting series"
msgstr "non-intersecting series"

#. R/dendrogram.R: stop("non-leaf subtree of length 0")
#: R/dendrogram.R:0
msgid "non-leaf subtree of length 0"
msgstr "non-leaf subtree of length 0"

#. R/models.R: warning("non-list contrasts argument ignored")
#: R/models.R:0
msgid "non-list contrasts argument ignored"
msgstr "non-list contrasts argument ignored"

#. R/family.R: stop("non-positive values not allowed for the 'Gamma' family")
#: R/family.R:0
msgid "non-positive values not allowed for the 'Gamma' family"
msgstr "non-positive values not allowed for the 'Gamma' family"

#. R/dist.R: warning("non-square matrix")
#: R/dist.R:0
msgid "non-square matrix"
msgstr "non-square matrix"

#. R/arima.R: stop("non-stationary AR part")
#. R/arma0.R: stop("non-stationary AR part")
#: R/arima.R:0 R/arma0.R:0
msgid "non-stationary AR part"
msgstr "non-stationary AR part"

#. R/arima.R: stop("non-stationary AR part from CSS")
#: R/arima.R:0
msgid "non-stationary AR part from CSS"
msgstr "non-stationary AR part from CSS"

#. R/arima.R: stop("non-stationary seasonal AR part")
#. R/arma0.R: stop("non-stationary seasonal AR part")
#: R/arima.R:0 R/arma0.R:0
msgid "non-stationary seasonal AR part"
msgstr "non-stationary seasonal AR part"

#. R/arima.R: stop("non-stationary seasonal AR part from CSS")
#: R/arima.R:0
msgid "non-stationary seasonal AR part from CSS"
msgstr "non-stationary seasonal AR part from CSS"

#. R/ts.R: stop("non-time series not of the correct length")
#: R/ts.R:0
msgid "non-time series not of the correct length"
msgstr "non-time series not of the correct length"

#. R/smspline.R: stop("not a valid \"smooth.spline\" object")
#: R/smspline.R:0
msgid "not a valid \"smooth.spline\" object"
msgstr "not a valid \"smooth.spline\" object"

#. R/stepfun.R: stop("not a valid step function")
#: R/stepfun.R:0
msgid "not a valid step function"
msgstr "not a valid step function"

#. R/ts.R: stop("not all series have the same frequency")
#: R/ts.R:0
msgid "not all series have the same frequency"
msgstr "not all series have the same frequency"

#. R/ts.R: stop("not all series have the same phase")
#: R/ts.R:0
msgid "not all series have the same phase"
msgstr "not all series have the same phase"

#. R/friedman.test.R: stop("not an unreplicated complete block design")
#. R/quade.test.R: stop("not an unreplicated complete block design")
#: R/friedman.test.R:0 R/quade.test.R:0
msgid "not an unreplicated complete block design"
msgstr "not an unreplicated complete block design"

#. R/ks.test.R: stop("not enough 'x' data")
#. R/ks.test.R: stop("not enough 'x' data")
#. R/ks.test.R: stop("not enough 'x' data")
#: R/ks.test.R:0
msgid "not enough 'x' data"
msgstr "not enough 'x' data"

#. R/ansari.test.R: stop("not enough 'x' observations")
#. R/t.test.R: stop("not enough 'x' observations")
#. R/t.test.R: stop("not enough 'x' observations")
#. R/var.test.R: stop("not enough 'x' observations")
#: R/ansari.test.R:0 R/t.test.R:0 R/var.test.R:0
msgid "not enough 'x' observations"
msgstr "not enough 'x' observations"

#. R/ks.test.R: stop("not enough 'y' data")
#. R/ks.test.R: stop("not enough 'y' data")
#. R/ks.test.R: stop("not enough 'y' data")
#: R/ks.test.R:0
msgid "not enough 'y' data"
msgstr "not enough 'y' data"

#. R/ansari.test.R: stop("not enough 'y' observations")
#. R/t.test.R: stop("not enough 'y' observations")
#. R/var.test.R: stop("not enough 'y' observations")
#. R/wilcox.test.R: stop("not enough 'y' observations")
#: R/ansari.test.R:0 R/t.test.R:0 R/var.test.R:0 R/wilcox.test.R:0
msgid "not enough 'y' observations"
msgstr "not enough 'y' observations"

#. R/wilcox.test.R: stop("not enough (non-missing) 'x' observations")
#: R/wilcox.test.R:0
msgid "not enough (non-missing) 'x' observations"
msgstr "not enough (non-missing) 'x' observations"

#. R/poisson.test.R: stop("not enough data")
#. R/prop.test.R: stop("not enough data")
#: R/poisson.test.R:0 R/prop.test.R:0
msgid "not enough data"
msgstr "not enough data"

#. R/contrast.R: stop("not enough degrees of freedom to define contrasts")
#. R/contrast.R: stop("not enough degrees of freedom to define contrasts")
#. R/contrast.R: stop("not enough degrees of freedom to define contrasts")
#: R/contrast.R:0
msgid "not enough degrees of freedom to define contrasts"
msgstr "not enough degrees of freedom to define contrasts"

#. R/cor.test.R: stop("not enough finite observations")
#. R/cor.test.R: stop("not enough finite observations")
#: R/cor.test.R:0
msgid "not enough finite observations"
msgstr "not enough finite observations"

#. R/oneway.test.R: stop("not enough groups")
#: R/oneway.test.R:0
msgid "not enough groups"
msgstr "not enough groups"

#. R/fligner.test.R: stop("not enough observations")
#. R/kruskal.test.R: stop("not enough observations")
#. R/mood.test.R: stop("not enough observations")
#. R/oneway.test.R: stop("not enough observations")
#. R/t.test.R: stop("not enough observations")
#: R/fligner.test.R:0 R/kruskal.test.R:0 R/mood.test.R:0 R/oneway.test.R:0
#: R/t.test.R:0
msgid "not enough observations"
msgstr "not enough observations"

#. R/plot.lm.R: gettextf("not plotting observations with leverage one:\n  %s",     paste(which(isInf), collapse = ", "))
#: R/plot.lm.R:0
msgid ""
"not plotting observations with leverage one:\n"
"  %s"
msgstr ""
"not plotting observations with leverage one:\n"
"  %s"

#. R/smspline.R: warning("not using invalid df; must have 1 < df <= n := #{unique x} = ",     nx)
#: R/smspline.R:0
msgid "not using invalid df; must have 1 < df <= n := #{unique x} ="
msgstr "not using invalid df; must have 1 < df <= n := #{unique x} ="

#. R/ftable.R: stop("nothing to tabulate")
#: R/ftable.R:0
msgid "nothing to tabulate"
msgstr "nothing to tabulate"

#. R/symnum.R: stop("number of 'cutpoints' must be one less than number of symbols")
#: R/symnum.R:0
msgid "number of 'cutpoints' must be one less than number of symbols"
msgstr "number of 'cutpoints' must be one less than number of symbols"

#. R/symnum.R: stop("number of 'cutpoints' must be one more than number of symbols")
#: R/symnum.R:0
msgid "number of 'cutpoints' must be one more than number of symbols"
msgstr "number of 'cutpoints' must be one more than number of symbols"

#. R/kmeans.R: stop("number of cluster centres must lie between 1 and nrow(x)",     call. = FALSE)
#: R/kmeans.R:0
msgid "number of cluster centres must lie between 1 and nrow(x)"
msgstr "number of cluster centres must lie between 1 and nrow(x)"

#. R/ts.R: stop("number of differences must be a positive integer")
#: R/ts.R:0
msgid "number of differences must be a positive integer"
msgstr "number of differences must be a positive integer"

#. R/power.anova.test.R: stop("number of groups must be at least 2")
#: R/power.anova.test.R:0
msgid "number of groups must be at least 2"
msgstr "number of groups must be at least 2"

#. R/smspline.R: stop("number of observations in 'x' and 'y' must match.")
#: R/smspline.R:0
msgid "number of observations in 'x' and 'y' must match."
msgstr "number of observations in 'x' and 'y' must match."

#. R/power.anova.test.R: stop("number of observations in each group must be at least 2")
#: R/power.anova.test.R:0
msgid "number of observations in each group must be at least 2"
msgstr "number of observations in each group must be at least 2"

#. R/glm.R: gettextf("number of offsets is %d should equal %d (number of observations)",     length(offset), NROW(Y))
#: R/glm.R:0
msgid "number of offsets is %d should equal %d (number of observations)"
msgstr "number of offsets is %d should equal %d (number of observations)"

#. R/lm.R: gettextf("number of offsets is %d, should equal %d (number of observations)",     NROW(offset), ny)
#: R/lm.R:0
msgid "number of offsets is %d, should equal %d (number of observations)"
msgstr "number of offsets is %d, should equal %d (number of observations)"

#. R/add.R: stop("number of rows in use has changed: remove missing values?")
#. R/add.R: stop("number of rows in use has changed: remove missing values?")
#. R/add.R: stop("number of rows in use has changed: remove missing values?")
#: R/add.R:0
msgid "number of rows in use has changed: remove missing values?"
msgstr "number of rows in use has changed: remove missing values?"

#. R/ar.R: stop("number of series in 'object' and 'newdata' do not match")
#: R/ar.R:0
msgid "number of series in 'object' and 'newdata' do not match"
msgstr "number of series in 'object' and 'newdata' do not match"

#. R/ts.R: stop("number of values supplied is not a sub-multiple of the number of values to be replaced")
#: R/ts.R:0
msgid "number of values supplied is not a sub-multiple of the number of values to be replaced"
msgstr "number of values supplied is not a sub-multiple of the number of values to be replaced"

#. R/lsfit.R: gettextf("number of weights = %d should equal %d (number of responses)",     nwts, nry)
#: R/lsfit.R:0
msgid "number of weights = %d should equal %d (number of responses)"
msgstr "number of weights = %d should equal %d (number of responses)"

#. R/smspline.R: stop("number of weights must match number of observations.")
#: R/smspline.R:0
msgid "number of weights must match number of observations."
msgstr "number of weights must match number of observations."

#. R/smspline.R: stop("numeric 'all.knots' must cover [0,1] (= the transformed data-range)")
#: R/smspline.R:0
msgid "numeric 'all.knots' must cover [0,1] (= the transformed data-range)"
msgstr "numeric 'all.knots' must cover [0,1] (= the transformed data-range)"

#. R/contrast.R: stop("numeric contrasts or contrast name expected")
#: R/contrast.R:0
msgid "numeric contrasts or contrast name expected"
msgstr "numeric contrasts or contrast name expected"

#. R/ksmooth.R: stop("numeric y must be supplied.\nFor density estimation use density()")
#: R/ksmooth.R:0
msgid ""
"numeric y must be supplied.\n"
"For density estimation use density()"
msgstr ""
"numeric y must be supplied.\n"
"For density estimation use density()"

#. R/biplot.R: gettextf("object '%s' has no scores", deparse1(substitute(x)))
#. R/biplot.R: gettextf("object '%s' has no scores", deparse1(substitute(x)))
#: R/biplot.R:0
msgid "object '%s' has no scores"
msgstr "object '%s' has no scores"

#. R/manova.R: gettextf("object must be of class %s or %s", dQuote("manova"),     dQuote("maov"))
#: R/manova.R:0
msgid "object must be of class %s or %s"
msgstr "object must be of class %s or %s"

#. R/C.R: stop("object not interpretable as a factor")
#: R/C.R:0
msgid "object not interpretable as a factor"
msgstr "object not interpretable as a factor"

#. R/lsfit.R: warning("observations with 0 weight not used in calculating standard deviation")
#: R/lsfit.R:0
msgid "observations with 0 weight not used in calculating standard deviation"
msgstr "observations with 0 weight not used in calculating standard deviation"

#. R/lsfit.R: warning("observations with 0 weights not used")
#: R/lsfit.R:0
msgid "observations with 0 weights not used"
msgstr "observations with 0 weights not used"

#. R/glm.R: warning("observations with zero weight not used for calculating dispersion")
#: R/glm.R:0
msgid "observations with zero weight not used for calculating dispersion"
msgstr "observations with zero weight not used for calculating dispersion"

#. R/optim.R: warning("one-dimensional optimization by Nelder-Mead is unreliable:\nuse \"Brent\" or optimize() directly")
#: R/optim.R:0
msgid ""
"one-dimensional optimization by Nelder-Mead is unreliable:\n"
"use \"Brent\" or optimize() directly"
msgstr ""
"one-dimensional optimization by Nelder-Mead is unreliable:\n"
"use \"Brent\" or optimize() directly"

#. R/cmdscale.R: gettextf("only %d of the first %d eigenvalues are > 0", k1, k)
#: R/cmdscale.R:0
msgid "only %d of the first %d eigenvalues are > 0"
msgstr "only %d of the first %d eigenvalues are > 0"

#. R/loess.R: stop("only 1-4 predictors are allowed")
#: R/loess.R:0
msgid "only 1-4 predictors are allowed"
msgstr "only 1-4 predictors are allowed"

#. R/StructTS.R: stop("only implemented for univariate time series")
#. R/arima.R: stop("only implemented for univariate time series")
#. R/arma0.R: stop("only implemented for univariate time series")
#. R/cpgram.R: stop("only implemented for univariate time series")
#: R/StructTS.R:0 R/arima.R:0 R/arma0.R:0 R/cpgram.R:0
msgid "only implemented for univariate time series"
msgstr "only implemented for univariate time series"

#. R/ts.R: stop("only replacement of elements is allowed")
#: R/ts.R:0
msgid "only replacement of elements is allowed"
msgstr "only replacement of elements is allowed"

#. R/stl.R: stop("only univariate series are allowed")
#: R/stl.R:0
msgid "only univariate series are allowed"
msgstr "only univariate series are allowed"

#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#. R/HoltWinters.R: gettextf("optimization difficulties: %s", sol$message)
#: R/HoltWinters.R:0
msgid "optimization difficulties: %s"
msgstr "optimization difficulties: %s"

#. R/HoltWinters.R: stop("optimization failure")
#. R/HoltWinters.R: stop("optimization failure")
#. R/HoltWinters.R: stop("optimization failure")
#. R/HoltWinters.R: stop("optimization failure")
#: R/HoltWinters.R:0
msgid "optimization failure"
msgstr "optimization failure"

#. R/anova.R: warning("option \"show.coef.Pvalues\" is invalid: assuming TRUE")
#: R/anova.R:0
msgid "option \"show.coef.Pvalues\" is invalid: assuming TRUE"
msgstr "option \"show.coef.Pvalues\" is invalid: assuming TRUE"

#. R/anova.R: warning("option \"show.signif.stars\" is invalid: assuming TRUE")
#: R/anova.R:0
msgid "option \"show.signif.stars\" is invalid: assuming TRUE"
msgstr "option \"show.signif.stars\" is invalid: assuming TRUE"

#. R/contr.poly.R: gettextf("orthogonal polynomials cannot be represented accurately enough for %d degrees of freedom",     n - 1)
#: R/contr.poly.R:0
msgid "orthogonal polynomials cannot be represented accurately enough for %d degrees of freedom"
msgstr "orthogonal polynomials cannot be represented accurately enough for %d degrees of freedom"

#. R/ks.test.R: warning("p-value will be approximate in the presence of ties")
#: R/ks.test.R:0
msgid "p-value will be approximate in the presence of ties"
msgstr "p-value will be approximate in the presence of ties"

#. R/nls.R: gettextf("parameters without starting value in 'data': %s", paste(nnn,     collapse = ", "))
#: R/nls.R:0
msgid "parameters without starting value in 'data': %s"
msgstr "parameters without starting value in 'data': %s"

#. R/smspline.R: stop("penalty must be numeric and > 0")
#: R/smspline.R:0
#, fuzzy
msgid "penalty must be numeric and > 0"
msgstr "'y' must be numeric"

#. R/pairwise.R: stop("pooling of SD is incompatible with paired tests")
#: R/pairwise.R:0
msgid "pooling of SD is incompatible with paired tests"
msgstr "pooling of SD is incompatible with paired tests"

#. R/family.R: stop("positive values only are allowed for the 'inverse.gaussian' family")
#: R/family.R:0
msgid "positive values only are allowed for the 'inverse.gaussian' family"
msgstr "positive values only are allowed for the 'inverse.gaussian' family"

#. R/StructTS.R: gettextf("possible convergence problem: 'optim' gave code = %d and message %s",     res$convergence, sQuote(res$message))
#: R/StructTS.R:0
msgid "possible convergence problem: 'optim' gave code = %d and message %s"
msgstr "possible convergence problem: 'optim' gave code = %d and message %s"

#. R/arima.R: gettextf("possible convergence problem: optim gave code = %d",     res$convergence)
#. R/arima.R: gettextf("possible convergence problem: optim gave code = %d",     res$convergence)
#. R/arma0.R: gettextf("possible convergence problem: optim gave code = %d",     code)
#: R/arima.R:0 R/arma0.R:0
msgid "possible convergence problem: optim gave code = %d"
msgstr "possible convergence problem: optim gave code = %d"

#. R/lm.R: gettext("prediction from rank-deficient fit")
#: R/lm.R:0
msgid "prediction from rank-deficient fit"
msgstr "prediction from rank-deficient fit"

#. R/lm.R: warning("predictions on current data refer to _future_ responses\n")
#: R/lm.R:0
msgid "predictions on current data refer to _future_ responses"
msgstr "predictions on current data refer to _future_ responses"

#. R/loess.R: stop("predictors must all be numeric")
#: R/loess.R:0
msgid "predictors must all be numeric"
msgstr "predictors must all be numeric"

#. R/distn.R: stop("probabilities must be finite, non-negative and not all 0")
#: R/distn.R:0
msgid "probabilities must be finite, non-negative and not all 0"
msgstr "probabilities must be finite, non-negative and not all 0"

#. R/chisq.test.R: stop("probabilities must be non-negative.")
#: R/chisq.test.R:0
msgid "probabilities must be non-negative."
msgstr "probabilities must be non-negative."

#. R/chisq.test.R: stop("probabilities must sum to 1.")
#: R/chisq.test.R:0
msgid "probabilities must sum to 1."
msgstr "probabilities must sum to 1."

#. R/glm-profile.R: stop("profiling has found a better solution, so original fit had not converged")
#: R/glm-profile.R:0
msgid "profiling has found a better solution, so original fit had not converged"
msgstr "profiling has found a better solution, so original fit had not converged"

#. R/optim.R: warning("read the documentation for 'trace' more carefully")
#: R/optim.R:0
msgid "read the documentation for 'trace' more carefully"
msgstr "read the documentation for 'trace' more carefully"

#. R/relevel.R: gettextf("ref = %d must be in 1L:%d", ref, nlev)
#: R/relevel.R:0
msgid "ref = %d must be in 1L:%d"
msgstr "ref = %d must be in 1L:%d"

#. R/wilcox.test.R: warning("requested conf.level not achievable")
#. R/wilcox.test.R: warning("requested conf.level not achievable")
#. R/wilcox.test.R: warning("requested conf.level not achievable")
#. R/wilcox.test.R: warning("requested conf.level not achievable")
#: R/wilcox.test.R:0
msgid "requested conf.level not achievable"
msgstr "requested conf.level not achievable"

#. R/factanal.R: stop("requested scores without an 'x' matrix")
#: R/factanal.R:0
msgid "requested scores without an 'x' matrix"
msgstr "requested scores without an 'x' matrix"

#. R/lm.R: warning("residual degrees of freedom in object suggest this is not an \"lm\" fit")
#: R/lm.R:0
msgid "residual degrees of freedom in object suggest this is not an \"lm\" fit"
msgstr "residual degrees of freedom in object suggest this is not an \"lm\" fit"

#. R/manova.R: gettextf("residuals have rank %d < %d", rss.qr$rank, ncol(resid))
#: R/manova.R:0
msgid "residuals have rank %d < %d"
msgstr "residuals have rank %d < %d"

#. R/mlm.R: gettextf("residuals have rank %s < %s", rss.qr$rank, pp)
#. R/mlm.R: gettextf("residuals have rank %s < %s", rss.qr$rank, pp)
#: R/mlm.R:0
msgid "residuals have rank %s < %s"
msgstr "residuals have rank %s < %s"

#. R/factanal.R: stop("response not allowed in formula")
#. R/prcomp.R: stop("response not allowed in formula")
#. R/princomp.R: stop("response not allowed in formula")
#: R/factanal.R:0 R/prcomp.R:0 R/princomp.R:0
msgid "response not allowed in formula"
msgstr "response not allowed in formula"

#. R/selfStart.R: stop("right-hand side of formula is not a call")
#: R/selfStart.R:0
msgid "right-hand side of formula is not a call"
msgstr "right-hand side of formula is not a call"

#. R/dendrogram.R: stop("row dendrogram ordering gave index of wrong length")
#: R/dendrogram.R:0
msgid "row dendrogram ordering gave index of wrong length"
msgstr "row dendrogram ordering gave index of wrong length"

#. R/mantelhaen.test.R: stop("sample size in each stratum must be > 1")
#: R/mantelhaen.test.R:0
msgid "sample size in each stratum must be > 1"
msgstr "sample size in each stratum must be > 1"

#. R/shapiro.test.R: stop("sample size must be between 3 and 5000")
#: R/shapiro.test.R:0
msgid "sample size must be between 3 and 5000"
msgstr "sample size must be between 3 and 5000"

#. R/ansari.test.R: warning("samples differ in location: cannot compute confidence set, returning NA")
#. R/ansari.test.R: warning("samples differ in location: cannot compute confidence set, returning NA")
#: R/ansari.test.R:0
msgid "samples differ in location: cannot compute confidence set, returning NA"
msgstr "samples differ in location: cannot compute confidence set, returning NA"

#. R/ts.R: stop("scatter plots only for univariate time series")
#: R/ts.R:0
msgid "scatter plots only for univariate time series"
msgstr "scatter plots only for univariate time series"

#. R/add.R: stop("scope is not a subset of term labels")
#. R/add.R: stop("scope is not a subset of term labels")
#. R/add.R: stop("scope is not a subset of term labels")
#: R/add.R:0
msgid "scope is not a subset of term labels"
msgstr "scope is not a subset of term labels"

#. R/arima.R: warning("seasonal MA part of model is not invertible")
#. R/arma0.R: warning("seasonal MA part of model is not invertible")
#: R/arima.R:0 R/arma0.R:0
msgid "seasonal MA part of model is not invertible"
msgstr "seasonal MA part of model is not invertible"

#. R/ts.R: warning("series is corrupt, with no 'tsp' attribute")
#. R/ts.R: stop("series is corrupt, with no 'tsp' attribute")
#: R/ts.R:0
msgid "series is corrupt, with no 'tsp' attribute"
msgstr "series is corrupt, with no 'tsp' attribute"

#. R/ts.R: gettextf("series is corrupt: length %d with 'tsp' implying %d",     NROW(x), nn)
#. R/ts.R: gettextf("series is corrupt: length %d with 'tsp' implying %d",     NROW(x), nn)
#: R/ts.R:0
msgid "series is corrupt: length %d with 'tsp' implying %d"
msgstr "series is corrupt: length %d with 'tsp' implying %d"

#. R/stl.R: stop("series is not periodic or has less than two periods")
#: R/stl.R:0
msgid "series is not periodic or has less than two periods"
msgstr "series is not periodic or has less than two periods"

#. R/nls.R: stop("setVarying : 'vary' length must match length of parameters")
#. R/nls.R: stop("setVarying : 'vary' length must match length of parameters")
#: R/nls.R:0
msgid "setVarying : 'vary' length must match length of parameters"
msgstr "setVarying : 'vary' length must match length of parameters"

#. R/models.R: gettextf("setting '%s' in terms.formula() is deprecated", "abb")
#. R/models.R: gettextf("setting '%s' in terms.formula() is deprecated", "neg.out")
#: R/models.R:0
msgid "setting '%s' in terms.formula() is deprecated"
msgstr ""

#. R/smspline.R: warning(wtxt, "\nsetting df = 1  __use with care!__")
#: R/smspline.R:0
msgid "setting df = 1  __use with care!__"
msgstr "setting df = 1  __use with care!__"

#. R/lm.R: stop("simulate() is not yet implemented for multivariate lm()")
#: R/lm.R:0
msgid "simulate() is not yet implemented for multivariate lm()"
msgstr "simulate() is not yet implemented for multivariate lm()"

#. R/contrast.R: stop("singular contrast matrix")
#: R/contrast.R:0
msgid "singular contrast matrix"
msgstr "singular contrast matrix"

#. R/glm.R: stop("singular fit encountered")
#. R/lm.R: stop("singular fit encountered")
#. R/lm.R: stop("singular fit encountered")
#: R/glm.R:0 R/lm.R:0
msgid "singular fit encountered"
msgstr "singular fit encountered"

#. R/nls.R: stop("singular gradient matrix at initial parameter estimates")
#: R/nls.R:0
msgid "singular gradient matrix at initial parameter estimates"
msgstr "singular gradient matrix at initial parameter estimates"

#. R/ts-tests.R: stop("singularities in regression")
#: R/ts-tests.R:0
msgid "singularities in regression"
msgstr "singularities in regression"

#. R/distn.R: stop("size != sum(x), i.e. one is wrong")
#: R/distn.R:0
msgid "size != sum(x), i.e. one is wrong"
msgstr "size != sum(x), i.e. one is wrong"

#. R/hclust.R: stop("size cannot be NA nor exceed 65536")
#: R/hclust.R:0
msgid "size cannot be NA nor exceed 65536"
msgstr "size cannot be NA nor exceed 65536"

#. R/arima.R: warning("some AR parameters were fixed: setting transform.pars = FALSE")
#: R/arima.R:0
msgid "some AR parameters were fixed: setting transform.pars = FALSE"
msgstr "some AR parameters were fixed: setting transform.pars = FALSE"

#. R/arma0.R: warning("some ARMA parameters were fixed: setting transform.pars = FALSE")
#: R/arma0.R:0
msgid "some ARMA parameters were fixed: setting transform.pars = FALSE"
msgstr "some ARMA parameters were fixed: setting transform.pars = FALSE"

#. R/reshape.R: gettextf("some constant variables (%s) are really varying", paste(names(rval)[!really.constant],     collapse = ","))
#: R/reshape.R:0
msgid "some constant variables (%s) are really varying"
msgstr "some constant variables (%s) are really varying"

#. R/kruskal.test.R: warning("some elements of 'x' are not numeric and will be coerced to numeric")
#: R/kruskal.test.R:0
msgid "some elements of 'x' are not numeric and will be coerced to numeric"
msgstr "some elements of 'x' are not numeric and will be coerced to numeric"

#. R/dummy.coef.R: warning("some terms will have NAs due to the limits of the method")
#: R/dummy.coef.R:0
msgid "some terms will have NAs due to the limits of the method"
msgstr "some terms will have NAs due to the limits of the method"

#. R/smspline.R: stop("some weights should be positive")
#: R/smspline.R:0
msgid "some weights should be positive"
msgstr "some weights should be positive"

#. R/loess.R: stop("specified parametric for all predictors")
#: R/loess.R:0
msgid "specified parametric for all predictors"
msgstr "specified parametric for all predictors"

#. R/loess.R: stop("specified the square of a factor predictor to be dropped when degree = 1")
#: R/loess.R:0
msgid "specified the square of a factor predictor to be dropped when degree = 1"
msgstr "specified the square of a factor predictor to be dropped when degree = 1"

#. R/loess.R: stop("specified the square of a predictor to be dropped with only one numeric predictor")
#: R/loess.R:0
msgid "specified the square of a predictor to be dropped with only one numeric predictor"
msgstr "specified the square of a predictor to be dropped with only one numeric predictor"

#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#. R/distn.R: warning("specify 'rate' or 'scale' but not both")
#. R/distn.R: stop("specify 'rate' or 'scale' but not both")
#: R/distn.R:0
msgid "specify 'rate' or 'scale' but not both"
msgstr "specify 'rate' or 'scale' but not both"

#. R/identify.hclust.R: stop("specify exactly one of 'k' and 'h'")
#. R/identify.hclust.R: stop("specify exactly one of 'k' and 'h'")
#: R/identify.hclust.R:0
msgid "specify exactly one of 'k' and 'h'"
msgstr "specify exactly one of 'k' and 'h'"

#. R/identify.hclust.R: stop("specify exactly one of 'which' and 'x'")
#: R/identify.hclust.R:0
msgid "specify exactly one of 'which' and 'x'"
msgstr "specify exactly one of 'which' and 'x'"

#. R/splinefun.R: warning("spline: first and last y values differ - using y[1L] for both")
#: R/splinefun.R:0
msgid "spline: first and last y values differ - using y[1L] for both"
msgstr "spline: first and last y values differ - using y[1L] for both"

#. R/spline.R: warning("spline: first and last y values differ - using y[1] for both")
#: R/spline.R:0
msgid "spline: first and last y values differ - using y[1] for both"
msgstr "spline: first and last y values differ - using y[1] for both"

#. R/glm.R: warning("step size truncated due to divergence", call. = FALSE)
#: R/glm.R:0
msgid "step size truncated due to divergence"
msgstr "step size truncated due to divergence"

#. R/glm.R: warning("step size truncated: out of bounds", call. = FALSE)
#: R/glm.R:0
msgid "step size truncated: out of bounds"
msgstr "step size truncated: out of bounds"

#. R/stepfun.R: stop("stepfun: 'x' must be ordered increasingly")
#: R/stepfun.R:0
msgid "stepfun: 'x' must be ordered increasingly"
msgstr "stepfun: 'x' must be ordered increasingly"

#. R/density.R: warning("sum(weights) != 1  -- will not get true density")
#: R/density.R:0
msgid "sum(weights) != 1  -- will not get true density"
msgstr "sum(weights) != 1  -- will not get true density"

#. R/cor.R: stop("supply both 'x' and 'y' or a matrix-like 'x'")
#. R/cor.R: stop("supply both 'x' and 'y' or a matrix-like 'x'")
#: R/cor.R:0
msgid "supply both 'x' and 'y' or a matrix-like 'x'"
msgstr "supply both 'x' and 'y' or a matrix-like 'x'"

#. R/prop.test.R: stop("table 'x' should have 2 entries")
#: R/prop.test.R:0
msgid "table 'x' should have 2 entries"
msgstr "table 'x' should have 2 entries"

#. R/cutree.R: stop("the 'height' component of 'tree' is not sorted (increasingly)")
#: R/cutree.R:0
msgid "the 'height' component of 'tree' is not sorted (increasingly)"
msgstr "the 'height' component of 'tree' is not sorted (increasingly)"

#. R/lm.R: stop("the 'se.fit' argument is not yet implemented for \"mlm\" objects")
#: R/lm.R:0
msgid "the 'se.fit' argument is not yet implemented for \"mlm\" objects"
msgstr "the 'se.fit' argument is not yet implemented for \"mlm\" objects"

#. R/aov.R: stop("the 'split' argument must be a list")
#: R/aov.R:0
msgid "the 'split' argument must be a list"
msgstr "the 'split' argument must be a list"

#. R/poisson.test.R: stop("the case k > 2 is unimplemented")
#: R/poisson.test.R:0
msgid "the case k > 2 is unimplemented"
msgstr "the case k > 2 is unimplemented"

#. R/aov.R: stop("the contrast defined is empty (has no TRUE elements)")
#. R/aov.R: stop("the contrast defined is empty (has no TRUE elements)")
#: R/aov.R:0
msgid "the contrast defined is empty (has no TRUE elements)"
msgstr "the contrast defined is empty (has no TRUE elements)"

#. R/StructTS.R: stop("the first value of the time series must not be missing")
#: R/StructTS.R:0
msgid "the first value of the time series must not be missing"
msgstr "the first value of the time series must not be missing"

#. R/glm.R: gettext("the following arguments to 'anova.glm' are invalid and dropped: ",     domain = "R-stats")
#: R/glm.R:0
msgid "the following arguments to 'anova.glm' are invalid and dropped:"
msgstr "the following arguments to 'anova.glm' are invalid and dropped:"

#. R/StructTS.R: stop("the series is entirely NA")
#. R/StructTS.R: stop("the series is entirely NA")
#. R/StructTS.R: stop("the series is entirely NA")
#: R/StructTS.R:0
msgid "the series is entirely NA"
msgstr "the series is entirely NA"

#. R/reshape.R: warning("there are records with missing times, which will be dropped.")
#: R/reshape.R:0
msgid "there are records with missing times, which will be dropped."
msgstr "there are records with missing times, which will be dropped."

#. R/bartlett.test.R: stop("there must be at least 2 observations in each group")
#: R/bartlett.test.R:0
msgid "there must be at least 2 observations in each group"
msgstr "there must be at least 2 observations in each group"

#. R/model.tables.R: stop("this fit does not inherit from \"lm\"")
#: R/model.tables.R:0
msgid "this fit does not inherit from \"lm\""
msgstr "this fit does not inherit from \"lm\""

#. R/ks.test.R: warning("ties should not be present for the one-sample Kolmogorov-Smirnov test")
#: R/ks.test.R:0
msgid "ties should not be present for the one-sample Kolmogorov-Smirnov test"
msgstr "ties should not be present for the one-sample Kolmogorov-Smirnov test"

#. R/ts.R: stop("time series contains internal NAs")
#: R/ts.R:0
msgid "time series contains internal NAs"
msgstr "time series contains internal NAs"

#. R/HoltWinters.R: stop("time series has no or less than 2 periods")
#: R/HoltWinters.R:0
msgid "time series has no or less than 2 periods"
msgstr "time series has no or less than 2 periods"

#. R/ts.R: stop("times to be replaced do not match")
#: R/ts.R:0
msgid "times to be replaced do not match"
msgstr "times to be replaced do not match"

#. R/lm.influence.R: stop("too few cases i with h_ii > 0), n < k")
#: R/lm.influence.R:0
msgid "too few cases i with h_ii > 0), n < k"
msgstr "too few cases i with h_ii > 0), n < k"

#. R/zzModels.R: stop("too few distinct input values to fit a Michaelis-Menten model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit a Michaelis-Menten model"
msgstr "too few distinct input values to fit a Michaelis-Menten model"

#. R/zzModels.R: stop("too few distinct input values to fit a biexponential")
#: R/zzModels.R:0
msgid "too few distinct input values to fit a biexponential"
msgstr "too few distinct input values to fit a biexponential"

#. R/zzModels.R: stop("too few distinct input values to fit a four-parameter logistic")
#: R/zzModels.R:0
msgid "too few distinct input values to fit a four-parameter logistic"
msgstr "too few distinct input values to fit a four-parameter logistic"

#. R/zzModels.R: stop("too few distinct input values to fit a logistic model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit a logistic model"
msgstr "too few distinct input values to fit a logistic model"

#. R/zzModels.R: stop("too few distinct input values to fit an asymptotic regression model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit an asymptotic regression model"
msgstr "too few distinct input values to fit an asymptotic regression model"

#. R/zzModels.R: stop("too few distinct input values to fit the 'asympOff' model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit the 'asympOff' model"
msgstr "too few distinct input values to fit the 'asympOff' model"

#. R/zzModels.R: stop("too few distinct input values to fit the 'asympOrig' model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit the 'asympOrig' model"
msgstr "too few distinct input values to fit the 'asympOrig' model"

#. R/zzModels.R: stop("too few distinct input values to fit the Gompertz model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit the Gompertz model"
msgstr "too few distinct input values to fit the Gompertz model"

#. R/zzModels.R: stop("too few distinct input values to fit the Weibull growth model")
#: R/zzModels.R:0
msgid "too few distinct input values to fit the Weibull growth model"
msgstr "too few distinct input values to fit the Weibull growth model"

#. R/pairwise.R: stop("too few groups")
#: R/pairwise.R:0
msgid "too few groups"
msgstr "too few groups"

#. R/arima.R: stop("too few non-missing observations")
#: R/arima.R:0
msgid "too few non-missing observations"
msgstr "too few non-missing observations"

#. R/zzModels.R: stop("too few observations to fit an asymptotic regression model")
#: R/zzModels.R:0
msgid "too few observations to fit an asymptotic regression model"
msgstr "too few observations to fit an asymptotic regression model"

#. R/ts.R: stop("too many replacement values supplied")
#: R/ts.R:0
msgid "too many replacement values supplied"
msgstr "too many replacement values supplied"

#. R/arma0.R: warning("transformed ARMA parameters were fixed")
#: R/arma0.R:0
msgid "transformed ARMA parameters were fixed"
msgstr "transformed ARMA parameters were fixed"

#. R/model.tables.R: gettextf("type '%s' is not implemented yet", type)
#. R/model.tables.R: gettextf("type '%s' is not implemented yet", type)
#: R/model.tables.R:0
msgid "type '%s' is not implemented yet"
msgstr "type '%s' is not implemented yet"

#. R/smspline.R: stop("type = \"partial\" is not yet implemented")
#: R/smspline.R:0
msgid "type = \"partial\" is not yet implemented"
msgstr "type = \"partial\" is not yet implemented"

#. R/cancor.R: stop("unequal number of rows in 'cancor'")
#: R/cancor.R:0
msgid "unequal number of rows in 'cancor'"
msgstr "unequal number of rows in 'cancor'"

#. R/acf.R: stop("univariate time series only")
#: R/acf.R:0
msgid "univariate time series only"
msgstr "univariate time series only"

#. R/density.R: stop("unknown bandwidth rule")
#: R/density.R:0
msgid "unknown bandwidth rule"
msgstr "unknown bandwidth rule"

#. R/kernel.R: stop("unknown named kernel")
#: R/kernel.R:0
msgid "unknown named kernel"
msgstr "unknown named kernel"

#. R/optim.R: gettext("unknown names in control: ", domain = "R-stats")
#: R/optim.R:0
msgid "unknown names in control:"
msgstr "unknown names in control:"

#. R/stl.R: stop("unknown string value for s.window")
#: R/stl.R:0
msgid "unknown string value for s.window"
msgstr "unknown string value for s.window"

#. R/nls.R: warning("upper and lower bounds ignored unless algorithm = \"port\"")
#: R/nls.R:0
msgid "upper and lower bounds ignored unless algorithm = \"port\""
msgstr "upper and lower bounds ignored unless algorithm = \"port\""

#. R/plot.lm.R: stop("use only with \"lm\" objects")
#: R/plot.lm.R:0
msgid "use only with \"lm\" objects"
msgstr "use only with \"lm\" objects"

#. R/glm.R: gettextf("using F test with a '%s' family is inappropriate",     fname)
#. R/glm.R: gettextf("using F test with a '%s' family is inappropriate",     fam)
#: R/glm.R:0
msgid "using F test with a '%s' family is inappropriate"
msgstr "using F test with a '%s' family is inappropriate"

#. R/glm.R: warning("using F test with a fixed dispersion is inappropriate")
#. R/glm.R: warning("using F test with a fixed dispersion is inappropriate")
#: R/glm.R:0
msgid "using F test with a fixed dispersion is inappropriate"
msgstr "using F test with a fixed dispersion is inappropriate"

#. R/models.R: warning("using type = \"numeric\" with a factor response will be ignored")
#: R/models.R:0
msgid "using type = \"numeric\" with a factor response will be ignored"
msgstr "using type = \"numeric\" with a factor response will be ignored"

#. R/family.R: message("using weights as inverse variances")
#: R/family.R:0
msgid "using weights as inverse variances"
msgstr "using weights as inverse variances"

#. R/family.R: message("using weights as shape parameters")
#: R/family.R:0
msgid "using weights as shape parameters"
msgstr "using weights as shape parameters"

#. R/glm.R: stop("value of 'epsilon' must be > 0")
#: R/glm.R:0
msgid "value of 'epsilon' must be > 0"
msgstr "value of 'epsilon' must be > 0"

#. R/models.R: gettextf("variable '%s' is absent, its contrast will be ignored",     nn)
#: R/models.R:0
msgid "variable '%s' is absent, its contrast will be ignored"
msgstr "variable '%s' is absent, its contrast will be ignored"

#. R/models.R: gettextf("variable '%s' is not a factor", nm)
#: R/models.R:0
msgid "variable '%s' is not a factor"
msgstr "variable '%s' is not a factor"

#. R/models.R: gettextf("variable '%s' was fitted with type \"%s\" but type \"%s\" was supplied",     names(old)[wrong], old[wrong], new[wrong])
#: R/models.R:0
msgid "variable '%s' was fitted with type \"%s\" but type \"%s\" was supplied"
msgstr "variable '%s' was fitted with type \"%s\" but type \"%s\" was supplied"

#. R/models.R: gettextf("variables %s were specified with different types from the fit",     paste(sQuote(names(old)[wrong]), collapse = ", "))
#: R/models.R:0
msgid "variables %s were specified with different types from the fit"
msgstr "variables %s were specified with different types from the fit"

#. R/aov.R: stop("weights are not supported in a multistratum aov() fit")
#: R/aov.R:0
msgid "weights are not supported in a multistratum aov() fit"
msgstr "weights are not supported in a multistratum aov() fit"

#. R/cov.wt.R: stop("weights must be non-negative and not all zero")
#: R/cov.wt.R:0
msgid "weights must be non-negative and not all zero"
msgstr "weights must be non-negative and not all zero"

#. R/embed.R: stop("wrong embedding dimension")
#. R/embed.R: stop("wrong embedding dimension")
#: R/embed.R:0
msgid "wrong embedding dimension"
msgstr "wrong embedding dimension"

#. R/anova.R: stop("wrong k / cs.ind")
#: R/anova.R:0
msgid "wrong k / cs.ind"
msgstr "wrong k / cs.ind"

#. R/arima.R: stop("wrong length for 'fixed'")
#. R/arma0.R: stop("wrong length for 'fixed'")
#: R/arima.R:0 R/arma0.R:0
msgid "wrong length for 'fixed'"
msgstr "wrong length for 'fixed'"

#. R/ftable.R: stop("wrong method")
#: R/ftable.R:0
msgid "wrong method"
msgstr "wrong method"

#. R/ppr.R: stop("wrong number of columns in 'x'")
#: R/ppr.R:0
msgid "wrong number of columns in 'x'"
msgstr "wrong number of columns in 'x'"

#. R/contr.poly.R: stop("wrong number of columns in new data: ", deparse1(substitute(...)))
#: R/contr.poly.R:0
msgid "wrong number of columns in new data:"
msgstr "wrong number of columns in new data:"

#. R/contrast.R: stop("wrong number of contrast matrix rows")
#: R/contrast.R:0
msgid "wrong number of contrast matrix rows"
msgstr "wrong number of contrast matrix rows"

#. R/ts-tests.R: stop("x is not a vector or univariate time series")
#. R/ts-tests.R: stop("x is not a vector or univariate time series")
#: R/ts-tests.R:0
msgid "x is not a vector or univariate time series"
msgstr "x is not a vector or univariate time series"

#. R/acf.R: stop("x$lag must have at least 1 column")
#: R/acf.R:0
msgid "x$lag must have at least 1 column"
msgstr "x$lag must have at least 1 column"

#. R/cmdscale.R: warning("x.ret=TRUE is disregarded when list.=FALSE")
#: R/cmdscale.R:0
msgid "x.ret=TRUE is disregarded when list.=FALSE"
msgstr "x.ret=TRUE is disregarded when list.=FALSE"

#. R/diffinv.R: warning("x[1] != r[1]; using x[1] for diagonal")
#: R/diffinv.R:0
msgid "x[1] != r[1]; using x[1] for diagonal"
msgstr "x[1] != r[1]; using x[1] for diagonal"

#. R/distn.R: stop("x[] and prob[] must be equal length vectors.")
#: R/distn.R:0
msgid "x[] and prob[] must be equal length vectors."
msgstr "x[] and prob[] must be equal length vectors."

#. R/plot.lm.R: stop("y is empty or has only NAs")
#. R/qqnorm.R: stop("y is empty or has only NAs")
#: R/plot.lm.R:0 R/qqnorm.R:0
msgid "y is empty or has only NAs"
msgstr "y is empty or has only NAs"

#. R/family.R: stop("y values must be 0 <= y <= 1")
#: R/family.R:0
msgid "y values must be 0 <= y <= 1"
msgstr "y values must be 0 <= y <= 1"

#. R/approx.R: stop("zero non-NA points")
#. R/approx.R: stop("zero non-NA points")
#. R/spline.R: stop("zero non-NA points")
#. R/splinefun.R: stop("zero non-NA points")
#: R/approx.R:0 R/spline.R:0 R/splinefun.R:0
msgid "zero non-NA points"
msgstr "zero non-NA points"

#. R/ar.R: stop("zero-variance series")
#. R/ar.R: stop("zero-variance series")
#: R/ar.R:0
msgid "zero-variance series"
msgstr "zero-variance series"

#. R/factanal.R: ngettext(factors, "%d factor is too many for %d variables", "%d factors are too many for %d variables")
#: R/factanal.R:0
msgid "%d factor is too many for %d variables"
msgid_plural "%d factors are too many for %d variables"
msgstr[0] "%d factor is too many for %d variables"
msgstr[1] "%d factors are too many for %d variables"

#. R/lsfit.R: ngettext(sum(!good), "%d missing value deleted", "%d missing values deleted")
#: R/lsfit.R:0
msgid "%d missing value deleted"
msgid_plural "%d missing values deleted"
msgstr[0] "%d missing value deleted"
msgstr[1] "%d missing values deleted"

#. R/nafns.R: ngettext(n <- length(x), "%d observation deleted due to missingness",     "%d observations deleted due to missingness")
#: R/nafns.R:0
msgid "%d observation deleted due to missingness"
msgid_plural "%d observations deleted due to missingness"
msgstr[0] "%d observation deleted due to missingness"
msgstr[1] "%d observations deleted due to missingness"

#. R/smspline.R: ngettext(diff, "%d observation with NA, NaN or Inf deleted",     "%d observations with NAs, NaNs and/or Infs deleted")
#: R/smspline.R:0
msgid "%d observation with NA, NaN or Inf deleted"
msgid_plural "%d observations with NAs, NaNs and/or Infs deleted"
msgstr[0] "%d observation with NA, NaN or Inf deleted"
msgstr[1] "%d observations with NAs, NaNs and/or Infs deleted"

#. R/lsfit.R: ngettext(nrx, "'X' matrix has %d case (row)", "'X' matrix has %d cases (rows)")
#: R/lsfit.R:0
msgid "'X' matrix has %d case (row)"
msgid_plural "'X' matrix has %d cases (rows)"
msgstr[0] "'X' matrix has %d case (row)"
msgstr[1] "'X' matrix has %d cases (rows)"

#. R/lsfit.R: ngettext(nry, "'Y' has %d case (row)", "'Y' has %d cases (rows)")
#: R/lsfit.R:0
msgid "'Y' has %d case (row)"
msgid_plural "'Y' has %d cases (rows)"
msgstr[0] "'Y' has %d case (row)"
msgstr[1] "'Y' has %d cases (rows)"

#. R/filter.R: ngettext(nser, "'init' must have %d column", "'init' must have 1 or %d columns",     domain = "R-stats")
#: R/filter.R:0
msgid "'init' must have %d column"
msgid_plural "'init' must have 1 or %d columns"
msgstr[0] "'init' must have %d column"
msgstr[1] "'init' must have 1 or %d columns"

#. R/models.R: ngettext(nr, "'newdata' had %d row", "'newdata' had %d rows")
#: R/models.R:0
msgid "'newdata' had %d row"
msgid_plural "'newdata' had %d rows"
msgstr[0] "'newdata' had %d row"
msgstr[1] "'newdata' had %d rows"

#. R/factanal.R: ngettext(p, "'start' must have %d row", "'start' must have %d rows")
#: R/factanal.R:0
msgid "'start' must have %d row"
msgid_plural "'start' must have %d rows"
msgstr[0] "'start' must have %d row"
msgstr[1] "'start' must have %d rows"

#. R/ts.R: ngettext(n.start, "'start.innov' is too short: need %d point",     "'start.innov' is too short: need %d points")
#: R/ts.R:0
msgid "'start.innov' is too short: need %d point"
msgid_plural "'start.innov' is too short: need %d points"
msgstr[0] "'start.innov' is too short: need %d point"
msgstr[1] "'start.innov' is too short: need %d points"

#. R/glm.R: ngettext(nobs, "X matrix has rank %d, but only %d observation",     "X matrix has rank %d, but only %d observations")
#: R/glm.R:0
msgid "X matrix has rank %d, but only %d observation"
msgid_plural "X matrix has rank %d, but only %d observations"
msgstr[0] "X matrix has rank %d, but only %d observation"
msgstr[1] "X matrix has rank %d, but only %d observations"

#. R/nlm.R: ngettext(maxiter, "_NOT_ converged in %d iteration", "_NOT_ converged in %d iterations")
#: R/nlm.R:0
msgid "_NOT_ converged in %d iteration"
msgid_plural "_NOT_ converged in %d iterations"
msgstr[0] "_NOT_ converged in %d iteration"
msgstr[1] "_NOT_ converged in %d iterations"

#. R/lsfit.R: ngettext(ncx, "but %d variable", "but %d variables")
#: R/lsfit.R:0
msgid "but %d variable"
msgid_plural "but %d variables"
msgstr[0] "but %d variable"
msgstr[1] "but %d variables"

#. R/models.R: ngettext(nr2, "but variable found had %d row", "but variables found have %d rows")
#: R/models.R:0
msgid "but variable found had %d row"
msgid_plural "but variables found have %d rows"
msgstr[0] "but variable found had %d row"
msgstr[1] "but variables found have %d rows"

#. R/kmeans.R: ngettext(iter.max, "did not converge in %d iteration", "did not converge in %d iterations")
#: R/kmeans.R:0
msgid "did not converge in %d iteration"
msgid_plural "did not converge in %d iterations"
msgstr[0] "did not converge in %d iteration"
msgstr[1] "did not converge in %d iterations"

#. R/dendrogram.R: ngettext(length(nms), "extra argument %s is not of class \"%s\"",     "extra arguments %s are not of class \"%s\"")
#: R/dendrogram.R:0
#, fuzzy
msgid "extra argument %s is not of class \"%s\""
msgid_plural "extra arguments %s are not of class \"%s\""
msgstr[0] "extra argument %s is not of class \"%s\""
msgstr[1] "extra arguments %s are not of class \"%s\"s"

#. R/models.R: ngettext(length(m), "factor %s has new level %s", "factor %s has new levels %s")
#: R/models.R:0
msgid "factor %s has new level %s"
msgid_plural "factor %s has new levels %s"
msgstr[0] "factor %s has new level %s"
msgstr[1] "factor %s has new levels %s"

#. R/nls.R: ngettext(sum(np == -1), "fitting parameter %s without any variables",     "fitting parameters %s without any variables")
#: R/nls.R:0
msgid "fitting parameter %s without any variables"
msgid_plural "fitting parameters %s without any variables"
msgstr[0] "fitting parameter %s without any variables"
msgstr[1] "fitting parameters %s without any variables"

#. R/add.R: ngettext(sum(where == 0), "lower scope has term %s not included in model",     "lower scope has terms %s not included in model")
#: R/add.R:0
msgid "lower scope has term %s not included in model"
msgid_plural "lower scope has terms %s not included in model"
msgstr[0] "lower scope has term %s not included in model"
msgstr[1] "lower scope has terms %s not included in model"

#. R/medpolish.R: ngettext(maxiter, "medpolish() did not converge in %d iteration",     "medpolish() did not converge in %d iterations")
#: R/medpolish.R:0
msgid "medpolish() did not converge in %d iteration"
msgid_plural "medpolish() did not converge in %d iterations"
msgstr[0] "medpolish() did not converge in %d iteration"
msgstr[1] "medpolish() did not converge in %d iterations"

#. R/lsfit.R: ngettext(nry, "only %d case", "only %d cases")
#: R/lsfit.R:0
msgid "only %d case"
msgid_plural "only %d cases"
msgstr[0] "only %d case"
msgstr[1] "only %d cases"

#. R/selfStart.R: ngettext(sum(msng), "parameter %s does not occur in the model formula",     "parameters %s do not occur in the model formula")
#: R/selfStart.R:0
msgid "parameter %s does not occur in the model formula"
msgid_plural "parameters %s do not occur in the model formula"
msgstr[0] "parameter %s does not occur in the model formula"
msgstr[1] "parameters %s do not occur in the model formula"

#. R/aov.R: ngettext(length(indError), "there are %d Error terms: only 1 is allowed",     "there are %d Error terms: only 1 is allowed")
#: R/aov.R:0
msgid "there are %d Error terms: only 1 is allowed"
msgid_plural "there are %d Error terms: only 1 is allowed"
msgstr[0] "there is %d Error term: only 1 is allowed"
msgstr[1] "there are %d Error terms: only 1 is allowed"

#. R/factanal.R: ngettext(nc, "unable to optimize from this starting value", "unable to optimize from these starting values")
#: R/factanal.R:0
msgid "unable to optimize from this starting value"
msgid_plural "unable to optimize from these starting values"
msgstr[0] "unable to optimise from this starting value"
msgstr[1] "unable to optimise from these starting values"

#. R/aov.R: ngettext(na, "unknown name %s in the 'split' list", "unknown names %s in the 'split' list")
#: R/aov.R:0
msgid "unknown name %s in the 'split' list"
msgid_plural "unknown names %s in the 'split' list"
msgstr[0] "unknown name %s in the 'split' list"
msgstr[1] "unknown names %s in the 'split' list"

#. R/nlminb.R: ngettext(length(nap), "unrecognized control element named %s ignored",     "unrecognized control elements named %s ignored")
#. R/nls.R: ngettext(length(nap), "unrecognized control element named %s ignored",     "unrecognized control elements named %s ignored")
#: R/nlminb.R:0 R/nls.R:0
msgid "unrecognized control element named %s ignored"
msgid_plural "unrecognized control elements named %s ignored"
msgstr[0] "unrecognized control element named %s ignored"
msgstr[1] "unrecognized control elements named %s ignored"

#. R/add.R: ngettext(sum(where == 0), "upper scope has term %s not included in model",     "upper scope has terms %s not included in model")
#: R/add.R:0
msgid "upper scope has term %s not included in model"
msgid_plural "upper scope has terms %s not included in model"
msgstr[0] "upper scope has term %s not included in model"
msgstr[1] "upper scope has terms %s not included in model"

#. R/add.R: ngettext(newn, "using the %d/%d row from a combined fit", "using the %d/%d rows from a combined fit")
#. R/add.R: ngettext(newn, "using the %d/%d row from a combined fit", "using the %d/%d rows from a combined fit")
#: R/add.R:0
msgid "using the %d/%d row from a combined fit"
msgid_plural "using the %d/%d rows from a combined fit"
msgstr[0] "using the %d/%d row from a combined fit"
msgstr[1] "using the %d/%d rows from a combined fit"

#~ msgid ","
#~ msgstr ","

#~ msgid "down"
#~ msgstr "down"

#~ msgid "ignored"
#~ msgstr "ignored"

#~ msgid "up"
#~ msgstr "up"

#~ msgid "Reprofiling for"
#~ msgstr "Reprofiling for"
