# Low-level tests for the CXXR classes.

# Compiler and Flags
uname := $(shell uname)
VPATH := @srcdir@
srcdir := @srcdir@
top_srcdir := @top_srcdir@
top_builddir := ../..

include $(top_builddir)/Makeconf
subdir := tests/CXXR
R_HOME := $(top_builddir)
RDIFF := $(R_HOME)/bin/R CMD Rdiff
maindir := $(top_srcdir)/src/main

# Detect valgrind if available and configure flags
# Thanks to Jochen Laubrock for suggestions about the handling of
# valgrind on non-Linux platforms.
valgrind := $(shell type -t valgrind > /dev/null && echo "valgrind -q --leak-check=full")
valgrind_flags := $(if $(valgrind),-DVALGRIND_LEVEL=2)

# Source files and test programs
sources_cxx := CellPooltest.cpp CellHeaptest.cpp MemoryBanktest.cpp Allocatortest.cpp RObject_sizer.cpp splice_test.cpp
tests := CellPooltest MemoryBanktest Allocatortest RObject_sizer splice_test #CellHeaptest

# Add dependencies
deps := CellPool.o MemoryBank.o RObject_sizer.o
test_deps := $(tests:=.o)

# Default target
all: test-CXXR

# Rule for all tests
test-CXXR: $(tests:=.ts)

# Pattern rule for compiling test object files in the current directory
%.o: %.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -DR_MEMORY_PROFILING -c -o $@ $<

# Rules for external object files with specified paths
%.o: $(maindir)/%.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -DR_MEMORY_PROFILING -c -o $@ $<

# Allocatortest build and test
Allocatortest_objs := Allocatortest.o MemoryBank.o CellPool.o

Allocatortest: $(Allocatortest_objs)
	$(LINK.cc) -o $@ $^

Allocatortest.ts: Allocatortest Allocatortest.save
	$(valgrind) ./Allocatortest 10 12 | tee Allocatortest.out
	$(RDIFF) $(srcdir)/Allocatortest.save Allocatortest.out
	-@rm Allocatortest.out
	@touch $@

# CellPooltest build and test
CellPooltest_objs := CellPooltest.o CellPool.o

CellPooltest: $(CellPooltest_objs)
	$(LINK.cc) -o $@ $^

CellPooltest.ts: CellPooltest CellPooltest.save
	$(valgrind) ./CellPooltest > CellPooltest.out
	$(RDIFF) $(srcdir)/CellPooltest.save CellPooltest.out
	-@rm CellPooltest.out
	@touch $@

# CellHeaptest build and test
CellHeaptest_objs := CellHeaptest.o CellHeap.o

CellHeaptest: $(CellHeaptest_objs)
	$(LINK.cc) -o $@ $^

CellHeaptest.ts: CellHeaptest CellHeaptest.save
	$(valgrind) ./CellHeaptest > CellHeaptest.out
	$(RDIFF) $(srcdir)/CellHeaptest.save CellHeaptest.out
	-@rm CellHeaptest.out
	@touch $@

# MemoryBanktest build and test
MemoryBanktest_objs := MemoryBanktest.o MemoryBank.o CellPool.o

MemoryBanktest: $(MemoryBanktest_objs)
	$(LINK.cc) -o $@ $^

MemoryBanktest.ts: MemoryBanktest MemoryBanktest.save
	$(valgrind) ./MemoryBanktest 10 12 > MemoryBanktest.out
	$(RDIFF) $(srcdir)/MemoryBanktest.save MemoryBanktest.out
	-@rm MemoryBanktest.out
	@touch $@

# splice_test build and test
splice_test_objs := splice_test.o

splice_test: $(splice_test_objs)
	$(LINK.cc) -o $@ $^

splice_test.ts: splice_test splice_test.save
	./splice_test > splice_test.out
	$(RDIFF) $(srcdir)/splice_test.save splice_test.out
	-@rm splice_test.out
	touch $@

# RObject_sizer build and test
RObject_sizer_objs := RObject_sizer.o

RObject_sizer: $(RObject_sizer_objs)
	$(LINK.cc) -o $@ $^

RObject_sizer.ts: RObject_sizer RObject_sizer.save
	./RObject_sizer > RObject_sizer.out
	$(RDIFF) $(srcdir)/RObject_sizer.save RObject_sizer.out
	-@rm RObject_sizer.out
	@touch $@

# Regenerate Makefile if config changes
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

# Cleanup
clean:
	-@rm -f *.d *.o *.ts $(tests)

distclean: clean
	-@rm -f Makefile

maintainer-clean: distclean

